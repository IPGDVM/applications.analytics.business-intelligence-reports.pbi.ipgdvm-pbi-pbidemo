{
  "name": "SemanticModel",
  "id": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "IBI",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "name": "actis_db",
        "connectionString": "Provider=MSDASQL;DSN=PostgreSQL_actis",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "type": "structured",
        "name": "AnalysisServices/ipg_feature intel com;ipg_feature",
        "connectionDetails": {
          "protocol": "analysis-services",
          "address": {
            "server": "ipg_feature.intel.com",
            "database": "ipg_feature"
          },
          "authentication": null,
          "query": null
        },
        "options": {
          "typedMeasureColumns": true,
          "implementation": "2.0"
        },
        "credential": {
          "AuthenticationKind": "ServiceAccount"
        }
      }
    ],
    "tables": [
      {
        "name": "dates",
        "columns": [
          {
            "name": "Year",
            "dataType": "int64",
            "sourceColumn": "Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Quarter",
            "dataType": "string",
            "sourceColumn": "Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WW start date",
            "dataType": "dateTime",
            "sourceColumn": "WW start date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "YY'WW",
            "dataType": "string",
            "sourceColumn": "YY'WW",
            "sortByColumn": "WW",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WW_6WW_back",
            "dataType": "int64",
            "sourceColumn": "WW_6WW_back"
          },
          {
            "name": "is current WW",
            "dataType": "int64",
            "sourceColumn": "is current WW"
          },
          {
            "name": "is previous WW",
            "dataType": "int64",
            "sourceColumn": "is previous WW"
          },
          {
            "name": "is current WW or before",
            "dataType": "int64",
            "sourceColumn": "is current WW or before"
          },
          {
            "name": "is previous WW or before",
            "dataType": "int64",
            "sourceColumn": "is previous WW or before"
          },
          {
            "type": "calculated",
            "name": "YearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Year]&[Quarter]"
          },
          {
            "type": "calculated",
            "name": ".Month.",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Month]<10, \"0\"&FORMAT([Month],\"General Number\"),FORMAT([Month],\"General Number\"))",
              ""
            ]
          },
          {
            "name": "Year_Quarter",
            "dataType": "string",
            "sourceColumn": "Year_Quarter"
          },
          {
            "name": "Std_cell roadmap timeframe",
            "dataType": "int64",
            "sourceColumn": "Std_cell roadmap timeframe"
          }
        ],
        "partitions": [
          {
            "name": "Dates",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct ",
                " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
                "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
                "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
                "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
                "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
                "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before],",
                "max(case when [WW start date] >= dateadd(quarter, -2,getdate()) and [WW start date] <= dateadd(quarter, 7,getdate())",
                " then 1 else 0 end ) over (partition by [Year_Quarter])as [Std_cell roadmap timeframe]",
                "from  [v_ipg_calendar]",
                "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                "order by [WW start date] asc"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
                  " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                  "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
                  "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                  "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                  "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
                  "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
                  "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
                  "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
                  "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before],",
                  "max(case when [WW start date] >= dateadd(quarter, -2,getdate()) and [WW start date] <= dateadd(quarter, 7,getdate())",
                  " then 1 else 0 end ) over (partition by [Year_Quarter])as [Std_cell roadmap timeframe]",
                  "from  [v_ipg_calendar]",
                  "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                  "order by [WW start date] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "poc_dates_filter",
            "expression": [
              "",
              "IF(ISFILTERED(dates[WW]),0,MAX(dates[is current WW or before]))"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ",
              " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
              "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
              "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
              "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
              "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
              "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before],",
              "max(case when [WW start date] >= dateadd(quarter, -2,getdate()) and [WW start date] <= dateadd(quarter, 7,getdate())",
              " then 1 else 0 end ) over (partition by [Year_Quarter])as [Std_cell roadmap timeframe]",
              "from  [v_ipg_calendar]",
              "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "order by [WW start date] asc"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Dates"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
              " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
              "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
              "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
              "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
              "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
              "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before],",
              "max(case when [WW start date] >= dateadd(quarter, -2,getdate()) and [WW start date] <= dateadd(quarter, 7,getdate())",
              " then 1 else 0 end ) over (partition by [Year_Quarter])as [Std_cell roadmap timeframe]",
              "from  [v_ipg_calendar]",
              "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "order by [WW start date] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_data",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain"
          },
          {
            "name": "SubDomain",
            "dataType": "string",
            "sourceColumn": "SubDomain"
          },
          {
            "name": "Org",
            "dataType": "string",
            "sourceColumn": "Org"
          },
          {
            "name": "LeadProduct",
            "dataType": "string",
            "sourceColumn": "LeadProduct"
          },
          {
            "name": "LeadAffectedProduct",
            "dataType": "string",
            "sourceColumn": "LeadAffectedProduct"
          },
          {
            "name": "IpGeneration",
            "dataType": "string",
            "sourceColumn": "IpGeneration"
          },
          {
            "name": "AffectedProducts",
            "dataType": "string",
            "sourceColumn": "AffectedProducts"
          },
          {
            "name": "RequestingProducts",
            "dataType": "string",
            "sourceColumn": "RequestingProducts"
          },
          {
            "name": "HsdEsId",
            "dataType": "int64",
            "sourceColumn": "HsdEsId"
          },
          {
            "name": "IsFunded",
            "dataType": "boolean",
            "sourceColumn": "IsFunded"
          },
          {
            "name": "IsClosed",
            "dataType": "string",
            "sourceColumn": "IsClosed"
          },
          {
            "name": "IsUnrequestable",
            "dataType": "string",
            "sourceColumn": "IsUnrequestable"
          },
          {
            "name": "Lifecycle",
            "dataType": "string",
            "sourceColumn": "Lifecycle"
          },
          {
            "name": "Node",
            "dataType": "string",
            "sourceColumn": "Node"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process"
          },
          {
            "name": "MDG Name",
            "dataType": "string",
            "sourceColumn": "MDG Name"
          },
          {
            "name": "TopLevelModuleName",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse"
          },
          {
            "name": "PlanningStatus",
            "dataType": "string",
            "sourceColumn": "PlanningStatus"
          },
          {
            "type": "calculated",
            "name": "Is SIP",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([IpType] in {\"SIP\",\"Software\",\"vip\"},1,",
              "IF(NOT(ISBLANK([IpConfigurationId])),0",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "Is HIP",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1-[Is SIP]"
          },
          {
            "type": "calculated",
            "name": "HIP/SIP",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Is HIP]=1,\"HIP\",",
              "IF([Is SIP]=1,\"SIP\"",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "Count of IPs",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Count of IPs\""
          },
          {
            "type": "calculated",
            "name": "Carbon milestone link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\" & [HsdEsId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "IpFamilyId",
            "dataType": "int64",
            "sourceColumn": "IpFamilyId"
          },
          {
            "type": "calculated",
            "name": "Is AMS",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF( [Supplier] in {\"SCI\",\"CICG Analog IP\"},\"Yes\",",
              "IF( [Supplier] = \"BDC\" && [SubDomain] = \"hsio_phy\",\"Yes\",",
              "IF( [Supplier] = \"ESIP\" && [SubDomain] <> \"pll\",\"Yes\",",
              "IF( [Supplier] = \"MIP\" && [SubDomain] = \"ddr_lp_combo_phy\",\"Yes\",",
              "IF( ISBLANK([Supplier]) && [SubDomain] = \"hsio_phy\",\"Yes\",",
              "\"No\"",
              ")))))"
            ]
          },
          {
            "type": "calculated",
            "name": "Bug Escape Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://app.powerbi.com/groups/631ba559-e38c-4087-84f8-381245e8291c/reports/38497fed-8950-4d9f-a6ff-0385f22a11c8/ReportSection4a3372f1468ccb9118e8?filter=QueryBug/release eq '\"&[Configuration]&\"'\"",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Incoming and Closed bugs Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://app.powerbi.com/groups/631ba559-e38c-4087-84f8-381245e8291c/reports/de33a7a3-65d5-4c1f-b337-9a60a8cbadb9/ReportSection?filter=QueryBug/release eq '\"&[Configuration]&\"'\"",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "is_std_cells",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(LEFT([Configuration],3) = \"LIB\",1,0)"
          },
          {
            "type": "calculated",
            "name": "Configuration_std_cells",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Configuration]",
            "sortByColumn": "std_cells_process"
          },
          {
            "type": "calculated",
            "name": "std_cells_process_length",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(LEFT([Configuration],3) = \"LIB\",",
              "FIND(\"_\",[Configuration],,LEN([Configuration]))-4,",
              "LEN([Configuration]))"
            ]
          },
          {
            "type": "calculated",
            "name": "std_cells_process",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "IF(len([std_cells_process_step1])>2,",
              "VALUE( LEFT([std_cells_process_step1],2)),",
              "[std_cells_process_step1]",
              ")"
            ],
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "std_cells_process_step1",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "IF(LEFT([Configuration],3) = \"LIB\",",
              " value(\"0\"&MID([Configuration],4,[std_cells_process_length])),",
              " 99999)"
            ]
          },
          {
            "name": "old_IpFamily",
            "dataType": "string",
            "sourceColumn": "old_IpFamily"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(release_central_family[IpFamily])"
          },
          {
            "name": "IsRequestable",
            "dataType": "string",
            "sourceColumn": "IsRequestable"
          }
        ],
        "partitions": [
          {
            "name": "IP",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                " [IpConfigurationId],[Name] as[Configuration],",
                "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
                "[AffectedProducts],[RequestingProducts],",
                "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[IsRequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
                "from  [V_IPG_CARBON_IPCONFIGURATION]",
                "where [Org] ='IPG' ",
                "and [IpType] != 'services'",
                "--and [IsUnrequestable] = 'N'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  " [IpConfigurationId],[Name] as[Configuration],",
                  "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
                  "[AffectedProducts],[RequestingProducts],",
                  "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[IsRequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
                  "from  [V_IPG_CARBON_IPCONFIGURATION]",
                  "where [Org] ='IPG' ",
                  "and [IpType] != 'services'",
                  "--and [IsUnrequestable] = 'N'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Count of SIP",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_soc_mapping[IpConfigurationId]),",
              "FILTER(ALL(ip_data[Is SIP]),ip_data[Is SIP]=1)",
              " )"
            ]
          },
          {
            "name": "Count of HIP",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_soc_mapping[IpConfigurationId]),",
              "FILTER(ALL(ip_data[Is HIP]),ip_data[Is HIP]=1)",
              " )"
            ]
          },
          {
            "name": "Count of configurations",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_soc_mapping[IpConfigurationId])",
              " )"
            ]
          },
          {
            "name": "Count of Soft IPs/Hard IPs",
            "expression": " 0+[Count of HIP]&\"/\" & 0+[Count of SIP]"
          },
          {
            "name": "Count of configurations with ALL filters",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(ip_data[IpConfigurationId]),",
              "ALL(ip_milestone_data),",
              "ALL(ip_milestone_data_with_dates),",
              "ALL(ip_soc_mapping[is related milestone]) )"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              " [IpConfigurationId],[Name] as[Configuration],",
              "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
              "[AffectedProducts],[RequestingProducts],",
              "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[IsRequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
              "from  [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] ='IPG' ",
              "and [IpType] != 'services'",
              "--and [IsUnrequestable] = 'N'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "IP"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              " [IpConfigurationId],[Name] as[Configuration],",
              "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily] as [old_IpFamily],[IpFamilyId],[IpGeneration],",
              "[AffectedProducts],[RequestingProducts],",
              "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[IsRequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
              "from  [V_IPG_CARBON_IPCONFIGURATION]",
              "where [Org] ='IPG' ",
              "and [IpType] != 'services'",
              "--and [IsUnrequestable] = 'N'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_milestone_data",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sortByColumn": "Drop order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Drop order",
            "dataType": "int64",
            "sourceColumn": "Drop order"
          },
          {
            "name": "is standard drop",
            "dataType": "int64",
            "sourceColumn": "is standard drop"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts"
          },
          {
            "name": "Drop color",
            "dataType": "string",
            "sourceColumn": "Drop color"
          },
          {
            "name": "TrendYYYYWW (PorYYYYWW)",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW (PorYYYYWW)"
          },
          {
            "type": "calculated",
            "name": "die is mentioned in using releases",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(SEARCH(max(soc_data[DieName]), ip_milestone_data[UsingProducts],,-1)>=0,1,0)",
              "-- I THINK THIS IS AN UNUSED COLUMN THAT DOESNT WORK,  what are we searching? we can't serch from another table like that"
            ]
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset"
          },
          {
            "name": "is late",
            "dataType": "int64",
            "sourceColumn": "is late"
          },
          {
            "name": "is 1 week late",
            "dataType": "int64",
            "sourceColumn": "is 1 week late"
          },
          {
            "name": "is 2 or more weeks late",
            "dataType": "int64",
            "sourceColumn": "is 2 or more weeks late"
          },
          {
            "name": "drop case",
            "dataType": "int64",
            "sourceColumn": "drop case"
          },
          {
            "name": "is future drop",
            "dataType": "int64",
            "sourceColumn": "is future drop"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason"
          },
          {
            "name": "is stale",
            "dataType": "int64",
            "sourceColumn": "is stale"
          },
          {
            "name": "is hotfix",
            "dataType": "int64",
            "sourceColumn": "is hotfix"
          },
          {
            "name": "pas filter",
            "dataType": "int64",
            "sourceColumn": "pas filter"
          },
          {
            "name": "redrop filter",
            "dataType": "int64",
            "sourceColumn": "redrop filter"
          },
          {
            "name": "TrendYYYYWW_6WW_back",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW_6WW_back"
          },
          {
            "type": "calculated",
            "name": "PAS legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " IF([ops_exec_pas_late] =1 , \"Late\",",
              " \"On time\")"
            ]
          },
          {
            "type": "calculated",
            "name": "ReDrop legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF([is hotfix]=1 , \"Hotfix\", \"Not hotfix\")",
            "sortByColumn": "is hotfix"
          },
          {
            "type": "calculated",
            "name": "is future late",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([ops_exec_late] =1 && [is future drop],1,0)"
          },
          {
            "name": "is current ww drop",
            "dataType": "int64",
            "sourceColumn": "is current ww drop"
          },
          {
            "name": "is drop is in last 6 weeks",
            "dataType": "int64",
            "sourceColumn": "is drop is in last 6 weeks"
          },
          {
            "name": "is execution drop",
            "dataType": "int64",
            "sourceColumn": "is execution drop"
          },
          {
            "name": "is current ww or future drop",
            "dataType": "int64",
            "sourceColumn": "is current ww or future drop"
          },
          {
            "name": "drop matrix legend",
            "dataType": "string",
            "sourceColumn": "drop matrix legend",
            "sortByColumn": "drop matrix color"
          },
          {
            "name": "drop matrix color",
            "dataType": "string",
            "sourceColumn": "drop matrix color"
          },
          {
            "type": "calculated",
            "name": "drop matrix value",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "IF([drop case] in {3,4}, \"**\", [TrendYYYYWW]) ",
              "&UNICHAR(10)&\" \"&",
              "IF([drop case] in {2,4}, \"**\", [PorYYYYWW]) ",
              "&UNICHAR(10)&\" \"&",
              "[DropType]",
              "&UNICHAR(10)&\" \"&",
              "[Revision]",
              "&UNICHAR(10)&\" \"&",
              "[UsingProductsSummary]"
            ]
          },
          {
            "name": "drop matrix order",
            "dataType": "int64",
            "sourceColumn": "drop matrix order"
          },
          {
            "type": "calculated",
            "name": "Is upcoming drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is current ww or future drop] =1,\"Yes\", \"No\")"
          },
          {
            "name": "is previous ww drop",
            "dataType": "int64",
            "sourceColumn": "is previous ww drop"
          },
          {
            "name": "TrendQuarter",
            "dataType": "string",
            "sourceColumn": "TrendQuarter"
          },
          {
            "name": "TrendMonth",
            "dataType": "string",
            "sourceColumn": "TrendMonth"
          },
          {
            "name": "PorQuarter",
            "dataType": "string",
            "sourceColumn": "PorQuarter"
          },
          {
            "name": "PorMonth",
            "dataType": "string",
            "sourceColumn": "PorMonth"
          },
          {
            "type": "calculated",
            "name": "999",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "999"
          },
          {
            "type": "calculated",
            "name": "Drop:Revision:POR",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Drop]&\" : \"&[Revision]&\" : \"&[PorYYYYWW]"
          },
          {
            "type": "calculated",
            "name": "1",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "is missing trend or por",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([TrendYYYYWW]) || [TrendYYYYWW] <1 || ISBLANK([PorYYYYWW]) || [PorYYYYWW] <1,1,0)"
          },
          {
            "name": "TopLevelModuleName",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName"
          },
          {
            "name": "TopLevelModuleName, MilestoneId",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName, MilestoneId"
          },
          {
            "name": "Late Reason",
            "dataType": "string",
            "sourceColumn": "Late Reason"
          },
          {
            "name": "Redrop Reason",
            "dataType": "string",
            "sourceColumn": "Redrop Reason"
          },
          {
            "name": "Mitigation",
            "dataType": "string",
            "sourceColumn": "Mitigation"
          },
          {
            "name": "Future Prevention",
            "dataType": "string",
            "sourceColumn": "Future Prevention"
          },
          {
            "name": "Impact",
            "dataType": "string",
            "sourceColumn": "Impact"
          },
          {
            "name": "is tentative",
            "dataType": "int64",
            "sourceColumn": "is tentative"
          },
          {
            "type": "calculated",
            "name": "std_cell_color",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Complete] =\"Yes\",1,",
              "IF([is tentative] = 1,3,",
              "2))"
            ]
          },
          {
            "type": "calculated",
            "name": "std_cell_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Complete] =\"Yes\",\"Completed\",",
              "IF([is tentative] = 1,\"Tentative\",",
              "\"Planned\"))"
            ],
            "sortByColumn": "std_cell_color"
          },
          {
            "type": "calculated",
            "name": "Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "PAS legend order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " IF([is 2 or more weeks late] =1 , 3,",
              " IF([is 1 week late] =1 , 2,",
              "1))"
            ]
          },
          {
            "type": "calculated",
            "name": "PAS label",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " IF([is 2 or more weeks late] =1 , \"Late\",",
              "IF([is 1 week late] =1 , \"One week late\",",
              " \"On time\"))"
            ],
            "sortByColumn": "PAS label order"
          },
          {
            "type": "calculated",
            "name": "PAS label order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " IF([is 2 or more weeks late] =1 , 3,",
              " IF([is 1 week late] =1 , 2,",
              "1))"
            ]
          },
          {
            "type": "calculated",
            "name": "Standard PROD",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([Drop]=\"PROD\"&& [DropType] IN {\"Standard\", \"TC_Standard\"}, [TrendYYYYWW (PorYYYYWW)])"
          },
          {
            "name": "Purpose",
            "dataType": "string",
            "sourceColumn": "Purpose"
          },
          {
            "name": "is complete",
            "dataType": "int64",
            "sourceColumn": "is complete"
          },
          {
            "name": "is missing trend",
            "dataType": "int64",
            "sourceColumn": "is missing trend"
          },
          {
            "name": "is current ww or past drop",
            "dataType": "int64",
            "sourceColumn": "is current ww or past drop"
          },
          {
            "name": "ranking_for_upcoming_drop",
            "dataType": "int64",
            "sourceColumn": "ranking_for_upcoming_drop"
          },
          {
            "name": "ranking_for_completed_drop",
            "dataType": "int64",
            "sourceColumn": "ranking_for_completed_drop"
          },
          {
            "type": "calculated",
            "name": "Drop (Trend)",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Drop]&\" (\"&[TrendYYYYWW]& \")\""
          },
          {
            "type": "calculated",
            "name": "dummy_field",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "name": "is side drop",
            "dataType": "int64",
            "sourceColumn": "is side drop"
          },
          {
            "name": "Redrop Category",
            "dataType": "string",
            "sourceColumn": "Redrop Category"
          },
          {
            "type": "calculated",
            "name": "is_missing_using_releases",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([UsingProducts] = \"\" || [UsingProductsSummary] = \"\",1,0)",
              ""
            ]
          },
          {
            "name": "is gladius drop",
            "dataType": "int64",
            "sourceColumn": "is gladius drop"
          },
          {
            "name": "is execution or gladius drop",
            "dataType": "int64",
            "sourceColumn": "is execution or gladius drop"
          },
          {
            "type": "calculated",
            "name": "is current ww or up to 2 ww ahead drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " IF( ISBLANK(ip_milestone_data[TrendExactDate]) ,0,",
              "IF( DATEDIFF(ip_milestone_data[TrendExactDate], TODAY() , WEEK) >= -2  && DATEDIFF(ip_milestone_data[TrendExactDate], TODAY() , WEEK) <= 0",
              "    , 1, 0))"
            ]
          },
          {
            "type": "calculated",
            "name": "is current ww or previous ww drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ip_milestone_data[is previous ww drop] = 1 || ip_milestone_data[is current ww drop]= 1 ,1, 0)"
          },
          {
            "name": "is drop is in last 8 weeks",
            "dataType": "int64",
            "sourceColumn": "is drop is in last 8 weeks"
          },
          {
            "name": "Configuration,MilestoneId key",
            "dataType": "string",
            "sourceColumn": "Configuration,MilestoneId key"
          },
          {
            "type": "calculated",
            "name": "Add t",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(SEARCH(max(soc_data[DieName]), ip_milestone_data[UsingProducts],,-1)>=0,1,0)"
          },
          {
            "name": "external or internal",
            "dataType": "string",
            "sourceColumn": "external or internal"
          },
          {
            "name": "is external",
            "dataType": "int64",
            "sourceColumn": "is external"
          },
          {
            "type": "calculated",
            "name": "legend external internal",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF (",
              "    ip_milestone_data[external or internal] = \"External ReDrop\",",
              "    \"External ReDrop\",",
              "    IF (",
              "        ip_milestone_data[external or internal] = \"Internal ReDrop\",",
              "        \"Internal ReDrop\",",
              "        \"Non-Redrop\"",
              "    )",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "IP_milestones",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select milestone.*,",
                "retrospective.[Late Reason],retrospective.[Redrop Reason],retrospective.[Redrop Category], retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
                "case when retrospective.[Redrop Category] in ('Nested IP', 'PDK', 'TFM') and milestone.[is hotfix]  = 1 then'External ReDrop'",
                "when milestone.[is hotfix]  = 1  and retrospective.[Redrop Category] not in ('Nested IP', 'PDK', 'TFM')  then  'Internal ReDrop' end as [external or internal],",
                "case when [external or internal] = 'External ReDrop' then 1 else 0 end as [is external]",
                "",
                "from",
                "\t(select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "\t[configuration] + ', ' + [MilestoneId]as [Configuration,MilestoneId key],",
                "\t[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
                "\t[UsingProductsSummary],[UsingProducts],[Purpose],",
                "\t[Revision],[Drop],[Complete],[DropType],",
                "\t[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                "\t[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                "\tcast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                "\tmax(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                "\twhen [Drop] like '%(IC)%'  then 22 when [Drop] like '%(IE)%'  then 23",
                "\twhen [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
                "\twhen [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
                "\tcase when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
                "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                "\tcase when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'   then 1 else 0 end as [is hotfix], ",
                "\tcase when [DropType] like '%Patch%' or [DropType] like '%Side Drop%' then 1 else 0 end as [is side drop], ",
                "\tcase when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
                "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
                "\tcase when [TrendYYYYWW] >0 then 0 else 1 end as [is missing trend],",
                "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                "\tcase when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                "\tcase when [TrendYYYYWW] <= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or past drop],",
                "",
                "\tcase when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                "\tcase when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                "\tcase when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                "\tcase when [TrendYYYYWW] >= DATEPART(ww, dateadd(week,-8,GETDATE()))then 1 else 0 end as [is drop is in last 8 weeks],",
                "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                "\t------------------- drop matrix columns -------------------",
                "\tcase when [drop case]<>1  then 'Missing Trend/POR'",
                "\twhen [is stale] =1 then 'Stale'",
                "\twhen [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                "\twhen [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                "\twhen [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                "\twhen [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                "\tcase when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                "\twhen [is stale] =1 then '#C81326'--'Stale'",
                "\twhen [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                "\twhen [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                "\twhen [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                "\twhen [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                "\tend as [drop matrix color],",
                "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                "\t------------------- end -------------------",
                "\tcase when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
                "\tcase when [Drop] in('IP Concept Refresh (ICR)','IP Execution Commit (IE)','IP Architecture Complete (IAC)') then 1 else 0 end as [is gladius drop],",
                "\tcase when  [is execution drop] =1 or [is gladius drop]=1 then 1 else 0 end as [is execution or gladius drop],",
                "\tcase when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
                "\tcase when [Complete] = 'Yes' and [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter],",
                "\trow_number() over(partition by [IpConfigurationId] order by [is complete] asc ,[is missing trend] asc,[is current ww or future drop] desc ,[TrendExactDate] asc) as [ranking_for_upcoming_drop],",
                "\trow_number() over(partition by [IpConfigurationId] order by [is complete] desc ,[is missing trend] asc,[is current ww or past drop] desc ,[TrendExactDate] desc) as [ranking_for_completed_drop]",
                "\tfrom  [V_IPG_CARBON_MILESTONE]",
                "\twhere [DevOrg] ='IPG' ",
                "\tand [Visible] = 'Yes') as milestone",
                "left join",
                "              (select distinct [MilestoneId],",
                "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
                "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
                "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
                "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
                "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact],",
                "\tmax(case when [CommentType]  ='Redrop Category' then [Summary] else null end )as [Redrop Category]",
                "              from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
                "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact','Redrop Category') ",
                "              and [Summary] is not null",
                "              group by [MilestoneId])retrospective",
                "on milestone.[MilestoneId] = retrospective.[MilestoneId]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select milestone.*,",
                  "retrospective.[Late Reason],retrospective.[Redrop Reason],retrospective.[Redrop Category], retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
                  "case when retrospective.[Redrop Category] in ('Nested IP', 'PDK', 'TFM') and milestone.[is hotfix]  = 1 then'External ReDrop'",
                  "when milestone.[is hotfix]  = 1  and retrospective.[Redrop Category] not in ('Nested IP', 'PDK', 'TFM')  then  'Internal ReDrop' end as [external or internal],",
                  "case when [external or internal] = 'External ReDrop' then 1 else 0 end as [is external]",
                  "",
                  "from",
                  "\t(select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                  "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "\t[configuration] + ', ' + [MilestoneId]as [Configuration,MilestoneId key],",
                  "\t[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
                  "\t[UsingProductsSummary],[UsingProducts],[Purpose],",
                  "\t[Revision],[Drop],[Complete],[DropType],",
                  "\t[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                  "\t[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                  "\tcast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                  "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                  "\tmax(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                  "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                  "\twhen [Drop] like '%(IC)%'  then 22 when [Drop] like '%(IE)%'  then 23",
                  "\twhen [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
                  "\twhen [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
                  "\tcase when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
                  "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                  "\tcase when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'   then 1 else 0 end as [is hotfix], ",
                  "\tcase when [DropType] like '%Patch%' or [DropType] like '%Side Drop%' then 1 else 0 end as [is side drop], ",
                  "\tcase when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
                  "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
                  "\tcase when [TrendYYYYWW] >0 then 0 else 1 end as [is missing trend],",
                  "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                  "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                  "\tcase when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                  "\tcase when [TrendYYYYWW] <= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or past drop],",
                  "",
                  "\tcase when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                  "\tcase when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                  "\tcase when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                  "\tcase when [TrendYYYYWW] >= DATEPART(ww, dateadd(week,-8,GETDATE()))then 1 else 0 end as [is drop is in last 8 weeks],",
                  "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                  "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                  "\t------------------- drop matrix columns -------------------",
                  "\tcase when [drop case]<>1  then 'Missing Trend/POR'",
                  "\twhen [is stale] =1 then 'Stale'",
                  "\twhen [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                  "\twhen [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                  "\twhen [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                  "\twhen [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                  "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                  "\tcase when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                  "\twhen [is stale] =1 then '#C81326'--'Stale'",
                  "\twhen [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                  "\twhen [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                  "\twhen [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                  "\twhen [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                  "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                  "\tend as [drop matrix color],",
                  "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                  "\t------------------- end -------------------",
                  "\tcase when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
                  "\tcase when [Drop] in('IP Concept Refresh (ICR)','IP Execution Commit (IE)','IP Architecture Complete (IAC)') then 1 else 0 end as [is gladius drop],",
                  "\tcase when  [is execution drop] =1 or [is gladius drop]=1 then 1 else 0 end as [is execution or gladius drop],",
                  "\tcase when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
                  "\tcase when [Complete] = 'Yes' and [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter],",
                  "\trow_number() over(partition by [IpConfigurationId] order by [is complete] asc ,[is missing trend] asc,[is current ww or future drop] desc ,[TrendExactDate] asc) as [ranking_for_upcoming_drop],",
                  "\trow_number() over(partition by [IpConfigurationId] order by [is complete] desc ,[is missing trend] asc,[is current ww or past drop] desc ,[TrendExactDate] desc) as [ranking_for_completed_drop]",
                  "\tfrom  [V_IPG_CARBON_MILESTONE]",
                  "\twhere [DevOrg] ='IPG' ",
                  "\tand [Visible] = 'Yes') as milestone",
                  "left join",
                  "              (select distinct [MilestoneId],",
                  "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
                  "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
                  "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
                  "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
                  "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact],",
                  "\tmax(case when [CommentType]  ='Redrop Category' then [Summary] else null end )as [Redrop Category]",
                  "              from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
                  "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact','Redrop Category') ",
                  "              and [Summary] is not null",
                  "              group by [MilestoneId])retrospective",
                  "on milestone.[MilestoneId] = retrospective.[MilestoneId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AGG of Carbon trend dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data[TrendYYYYWW]),[TrendYYYYWW], \", \",[TrendYYYYWW],ASC),",
              "FILTER(ALL(ip_milestone_data[is standard drop]), ip_milestone_data[is standard drop]=1),",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1),",
              "FILTER(ALL(ip_milestone_data[TrendYYYYWW]),NOT(ISBLANK(ip_milestone_data[TrendYYYYWW])))",
              ") "
            ]
          },
          {
            "name": "AGG of RTL0P5 trend dates",
            "expression": [
              "",
              "CALCULATE([AGG of Carbon trend dates],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"RTL0P5\")",
              ") ",
              ""
            ]
          },
          {
            "name": "AGG of RTL1P0 trend dates",
            "expression": [
              "",
              "CALCULATE([AGG of Carbon trend dates],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"RTL1P0\")",
              ") "
            ]
          },
          {
            "name": "AGG of POLO trend dates",
            "expression": [
              "",
              "CALCULATE([AGG of Carbon trend dates],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"POLO\")",
              ") "
            ]
          },
          {
            "name": "AGG of PROD trend dates",
            "expression": [
              "",
              "CALCULATE([AGG of Carbon trend dates],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"PROD\")",
              ") "
            ]
          },
          {
            "name": "AGG of using releases",
            "expression": [
              "",
              "IF(COUNTROWS(VALUES(soc_data[DieName]))>10,BLANK(),",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data[UsingProducts]),[UsingProducts], \", \",[UsingProducts],ASC),",
              "FILTER(ALL(ip_milestone_data[UsingProducts]),NOT(ISBLANK(ip_milestone_data[UsingProducts])))",
              ") ",
              ") ",
              ""
            ]
          },
          {
            "name": "AGG of RTL0P8 trend dates",
            "expression": [
              "",
              "CALCULATE([AGG of Carbon trend dates],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"RTL0P8\")",
              ") ",
              ""
            ]
          },
          {
            "name": "Count of drops",
            "expression": [
              "",
              " CALCULATE(SUMX(DISTINCT(ip_milestone_data[MilestoneId]),[milestone_MaxDummy])",
              ")"
            ]
          },
          {
            "name": "Count of completed drops",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]=\"Yes\")",
              " )"
            ]
          },
          {
            "name": "Count of completed on time drops",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]=\"Yes\"),",
              "FILTER(ALL(ip_milestone_data[is late]),ip_milestone_data[is late]=0 && NOT(ISBLANK(ip_milestone_data[is late])))",
              " )"
            ]
          },
          {
            "name": "Count of completed late drops",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]=\"Yes\"),",
              "FILTER(ALL(ip_milestone_data[is late]),ip_milestone_data[is late]=1)",
              " )"
            ]
          },
          {
            "name": "Cumulative drops actual",
            "expression": [
              "0+ ",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]=\"Yes\"),",
              "FILTER(ALL(ip_milestone_data[porYYYYWW]),NOT(ISBLANK(ip_milestone_data[porYYYYWW])) && ip_milestone_data[porYYYYWW] <= MAX(dates[WW])),",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ")"
            ]
          },
          {
            "name": "Cumulative drops plan",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[PorYYYYWW]),NOT(ISBLANK(ip_milestone_data[PorYYYYWW])) && ip_milestone_data[PorYYYYWW] <= MAX(dates[WW]))",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ")"
            ]
          },
          {
            "name": "Drop AGG",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data[TrendYYYYWW]),[TrendYYYYWW], \", \",[TrendYYYYWW],ASC),",
              "FILTER(ALL(ip_milestone_data[is standard drop]), ip_milestone_data[is standard drop]=1),",
              "FILTER(ALL(ip_milestone_data[TrendYYYYWW]),NOT(ISBLANK(ip_milestone_data[TrendYYYYWW])))",
              ") "
            ]
          },
          {
            "name": "IP3",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"IP3\")",
              " )"
            ]
          },
          {
            "name": "RTL0P5",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]in{\"RTL0P5\",\"Alpha\"})",
              " )"
            ]
          },
          {
            "name": "RTL0P8",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"RTL0P8\")",
              " )"
            ]
          },
          {
            "name": "RTL1P0",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]in{\"RTL1P0\",\"Beta\"})",
              " )"
            ]
          },
          {
            "name": "POLO",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"POLO\")",
              " )"
            ]
          },
          {
            "name": "PROD",
            "expression": [
              "",
              "CALCULATE([Drop AGG],",
              "FILTER(ALL(ip_milestone_data[Drop]), ip_milestone_data[Drop]=\"PROD\")",
              " )"
            ]
          },
          {
            "name": "Count of completed late drops with %",
            "expression": [
              " ",
              "[Count of completed late drops]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed late drops],[Count of completed drops],0) , \"0%\")",
              " &\")\""
            ]
          },
          {
            "name": "Count of completed on time drops with %",
            "expression": [
              " ",
              "[Count of completed on time drops]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed on time drops],[Count of completed drops],0) , \"0%\")",
              " &\")\""
            ]
          },
          {
            "name": "pas_total",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "//FILTER(ALL(ip_milestone_data[MilestoneId]),NOT(ISBLANK(ip_milestone_data[MilestoneId]))),",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1)",
              ")"
            ]
          },
          {
            "name": "pas_ontime",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "//FILTER(ALL(ip_milestone_data[MilestoneId]),NOT(ISBLANK(ip_milestone_data[MilestoneId]))),",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1),",
              "FILTER(ALL(ip_milestone_data[is 2 or more weeks late]), ip_milestone_data[is 2 or more weeks late]=0 )",
              ")"
            ]
          },
          {
            "name": "pas_late",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[MilestoneId]),NOT(ISBLANK(ip_milestone_data[MilestoneId]))),",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1),",
              "FILTER(ALL(ip_milestone_data[is 2 or more weeks late]), ip_milestone_data[is 2 or more weeks late]=1)",
              ")"
            ]
          },
          {
            "name": "PAS",
            "expression": [
              "IF([pas_total]<1,0,",
              "DIVIDE([ops_exec_pas_ontime],[pas_total],0)",
              ")",
              ""
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "redrop_not_redrop",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[redrop filter]), ip_milestone_data[redrop filter]=1),",
              "FILTER(ALL(ip_milestone_data[is hotfix]), ip_milestone_data[is hotfix]=0&&NOT(ISBLANK(ip_milestone_data[is hotfix])))",
              ")"
            ]
          },
          {
            "name": "redrop_is_redrop",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[redrop filter]), ip_milestone_data[redrop filter]=1),",
              "FILTER(ALL(ip_milestone_data[is hotfix]), ip_milestone_data[is hotfix]=1)",
              ")"
            ]
          },
          {
            "name": "ReDrop",
            "expression": [
              "IF([redrop_total]<1,0,",
              "DIVIDE([redrop_is_redrop],[redrop_total],0)",
              ")",
              ""
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "pas_6ww_avg",
            "expression": [
              "",
              "CALCULATE([PAS],",
              "FILTER(ALL(dates[WW]),",
              "dates[WW]<= max(dates[WW] ) && dates[WW]>=  max(dates[WW_6WW_back] ) ",
              ")",
              ")"
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "PAS Target",
            "expression": [
              " 0.95",
              "",
              ""
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "redrop_6ww_avg",
            "expression": [
              "",
              "CALCULATE([ReDrop],",
              "FILTER(ALL(dates[WW]),dates[WW] <= max(dates[WW] )",
              "&& dates[WW]>=  max(dates[WW_6WW_back] ))",
              ")",
              ""
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "ReDrop Target",
            "expression": [
              " 0.02",
              ""
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "future late",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_late],",
              "FILTER(ALL(ip_milestone_data[MilestoneId]),NOT(ISBLANK(ip_milestone_data[MilestoneId]))),",
              "FILTER(ALL(ip_milestone_data[is execution drop]), ip_milestone_data[is execution drop]=1),",
              "FILTER(ALL(ip_milestone_data[is current ww or future drop]), ip_milestone_data[is current ww or future drop]=1)",
              "//FILTER(ALL(ip_milestone_data[is 2 or more weeks late]), ip_milestone_data[is 2 or more weeks late]=1)",
              ")"
            ]
          },
          {
            "name": "stale drops",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[MilestoneId]),NOT(ISBLANK(ip_milestone_data[MilestoneId]))),",
              "FILTER(ALL(ip_milestone_data[is execution drop]), ip_milestone_data[is execution drop]=1),",
              "FILTER(ALL(ip_milestone_data[is stale]), ip_milestone_data[is stale]=1)",
              ")"
            ]
          },
          {
            "name": "AGG of Carbon por dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data[PorYYYYWW]),[PorYYYYWW], \", \",[PorYYYYWW],ASC),",
              "FILTER(ALL(ip_milestone_data[is standard drop]), ip_milestone_data[is standard drop]=1),",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1),",
              "FILTER(ALL(ip_milestone_data[PorYYYYWW]),NOT(ISBLANK(ip_milestone_data[PorYYYYWW])))",
              ") "
            ]
          },
          {
            "name": "is milestone",
            "expression": "IF(MAX(ip_milestone_data[MilestoneId])>0, 111, 222)"
          },
          {
            "name": "std_cells_color_coding",
            "expression": [
              "",
              "IF(MAX(ip_milestone_data[999])=999,2,",
              "IF(MAX(dates[is current WW])=1,1",
              "))"
            ]
          },
          {
            "name": "Drop:Revision:POR AGG",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data[Drop:Revision:POR]),[Drop:Revision:POR], UNICHAR(10),[Drop:Revision:POR],ASC),",
              "FILTER(ALL(ip_milestone_data[Drop:Revision:POR]),NOT(ISBLANK(ip_milestone_data[Drop:Revision:POR])))",
              ") "
            ]
          },
          {
            "name": "ops_exec_is_late",
            "expression": [
              "IF(MAX(one_week_late[is_one_week_late])=1,",
              "MAX(ip_milestone_data[is 2 or more weeks late]),",
              "MAX(ip_milestone_data[is late])",
              ")"
            ]
          },
          {
            "name": "ops_exec_pas_total",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_total],",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1)",
              ")"
            ]
          },
          {
            "name": "ops_exec_pas_ontime",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_ontime],",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1)",
              ")"
            ]
          },
          {
            "name": "ops_exec_pas_late",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_late],",
              "FILTER(ALL(ip_milestone_data[pas filter]), ip_milestone_data[pas filter]=1)",
              ")",
              ""
            ]
          },
          {
            "name": "ops_exec_PAS",
            "expression": [
              "IF([ops_exec_pas_total]<1,BLANK(),",
              "DIVIDE([ops_exec_pas_ontime],[ops_exec_pas_total],0)",
              ")"
            ],
            "formatString": "0.00 %;-0.00 %;0.00 %"
          },
          {
            "name": "ops_exec_PAS_FINAL",
            "expression": [
              "",
              "FORMAT([ops_exec_PAS],\"0.00%\") &\" (\"&[ops_exec_pas_ontime]&\"/\"&[ops_exec_pas_total]&\")\""
            ]
          },
          {
            "name": "ops_exec_future_late",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_late],",
              "FILTER(ALL(ip_milestone_data[is current ww or future drop]), ip_milestone_data[is current ww or future drop]=1)",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "ops_exec_future_late_FINAL",
            "expression": [
              "",
              "IF([ops_exec_future_total] <1,BLANK(),",
              "[ops_exec_future_late]&\"/\"&[ops_exec_future_total]",
              ")",
              ""
            ]
          },
          {
            "name": "ops_exec_future_late_COLOR",
            "expression": [
              "",
              "IF([ops_exec_future_late] >0,3,",
              "IF(MAX(ip_milestone_data[is missing trend or por])=1,2,",
              "1))"
            ]
          },
          {
            "name": "ops_exec_future_total",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_total],",
              "FILTER(ALL(ip_milestone_data[is current ww or future drop]), ip_milestone_data[is current ww or future drop]=1)",
              ")"
            ]
          },
          {
            "name": "Count of trending 2 or more wks late drops",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]<> \"Yes\"),",
              "FILTER(ALL(ip_milestone_data[is 2 or more weeks late]),ip_milestone_data[is 2 or more weeks late]=1)",
              " )"
            ]
          },
          {
            "name": "Count of trending late drops",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]<> \"Yes\"),",
              "FILTER(ALL(ip_milestone_data[is late]),ip_milestone_data[is late]=1)",
              " )"
            ]
          },
          {
            "name": "Count of trending 1 wk late drops",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete]<> \"Yes\"),",
              "FILTER(ALL(ip_milestone_data[is 1 week late]),ip_milestone_data[is 1 week late]=1)",
              " )"
            ]
          },
          {
            "name": "trending_late_summary",
            "expression": "if([Count of trending late drops] >= 2 || [Count of trending 2 or more wks late drops] >= 1, 0, if([Count of trending late drops] >= 1 || [Count of trending 1 wk late drops] >= 1, 50, 100))"
          },
          {
            "name": "schedule_summary",
            "expression": "if([trending_late_summary] = 0 || [pas_late] >= 1, 0, if([Count of trending late drops] >= 1, 50, 100))"
          },
          {
            "name": "pas_ontime_total",
            "expression": [
              " ",
              "IF(ISBLANK([pas_total]),BLANK(),",
              "[ops_exec_pas_ontime]&\"/\"&[pas_total]",
              ")"
            ]
          },
          {
            "name": "redrop_/_notredrop",
            "expression": [
              "",
              "[redrop_is_redrop]&\"/\"&[redrop_not_redrop]"
            ]
          },
          {
            "name": "hotfix_count",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ip_milestone_data, ip_milestone_data[is hotfix] = 1)",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "side_drop_count",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ip_milestone_data, ip_milestone_data[is side drop]=1)",
              ")"
            ]
          },
          {
            "name": "redrop_total",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[redrop filter]), ip_milestone_data[redrop filter]=1)",
              ")"
            ]
          },
          {
            "name": "redrop_/_total",
            "expression": [
              "",
              "[redrop_is_redrop]&\"/\"&[redrop_total]"
            ]
          },
          {
            "name": "ops_exec_ontime",
            "expression": [
              "0+",
              "IF(MAX(one_week_late[is_one_week_late])=1,",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[is 2 or more weeks late]), ip_milestone_data[is 2 or more weeks late]=0 )",
              "),",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[is late]), ip_milestone_data[is late]=0 )",
              ")",
              ")"
            ]
          },
          {
            "name": "ops_exec_late",
            "expression": [
              "0+",
              "IF(MAX(one_week_late[is_one_week_late])=1,",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[is 2 or more weeks late]), ip_milestone_data[is 2 or more weeks late]=1)",
              "),",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data[is late]), ip_milestone_data[is late]=1)",
              ")",
              ")"
            ]
          },
          {
            "name": "ops_exec_total",
            "expression": [
              "0+",
              "CALCULATE([Count of drops])",
              ""
            ]
          },
          {
            "name": "ops_exec_subip_late",
            "expression": [
              "0+",
              "IF(MAX(one_week_late[is_one_week_late])=1,",
              "CALCULATE(DISTINCTCOUNT(subip_milestone_data[MilestoneId]),",
              "FILTER(ALL(subip_milestone_data[is 2 or more weeks late]), subip_milestone_data[is 2 or more weeks late]=1)",
              "),",
              "CALCULATE(DISTINCTCOUNT(subip_milestone_data[MilestoneId]),",
              "FILTER(ALL(subip_milestone_data[is late]), subip_milestone_data[is late]=1)",
              ")",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "ops_exec_future_subip_late",
            "expression": [
              "0+",
              "CALCULATE([ops_exec_subip_late],",
              "FILTER(ALL(subip_milestone_data[is current ww or future drop]), subip_milestone_data[is current ww or future drop]=1)",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "upcoming_drop_per_configuration",
            "expression": [
              "CALCULATE(FIRSTNONBLANK(ip_milestone_data[Drop (Trend)],1),",
              "FILTER(ip_milestone_data, ip_milestone_data[ranking_for_upcoming_drop] = min(ip_milestone_data[ranking_for_upcoming_drop])),",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete] =\"No\")",
              ")"
            ]
          },
          {
            "name": "last_completed_drop_per_configuration",
            "expression": [
              "CALCULATE(FIRSTNONBLANK(ip_milestone_data[Drop (Trend)],1),",
              "FILTER(ip_milestone_data, ip_milestone_data[ranking_for_completed_drop] = min(ip_milestone_data[ranking_for_completed_drop])),",
              "FILTER(ALL(ip_milestone_data[Complete]),ip_milestone_data[Complete] =\"Yes\")",
              ")",
              ""
            ]
          },
          {
            "name": "ie_trend_date",
            "expression": [
              "CALCULATE(min(ip_milestone_data[TrendYYYYWW]),",
              "FILTER(ALL(ip_milestone_data[Drop]),ip_milestone_data[Drop] =\"IP Execution Commit (IE)\"),",
              "ALL(ip_milestone_data[is execution drop]),",
              "ALL(ip_milestone_data[Drop]),",
              "ALL(ip_milestone_data[DropType]),",
              "ALL(ip_milestone_data[Complete])",
              ")",
              ""
            ]
          },
          {
            "name": "milestone_MaxDummy",
            "expression": "MAX(ip_milestone_data[dummy_field])"
          },
          {
            "name": "count_of_ie",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Drop]),ip_milestone_data[Drop]=\"IP Execution Commit (IE)\"),",
              "ALL(ip_milestone_data[is execution drop])",
              " )",
              ""
            ]
          },
          {
            "name": "count_of_icr",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Drop]),ip_milestone_data[Drop]=\"IP Concept Refresh (ICR)\"),",
              "ALL(ip_milestone_data[is execution drop])",
              ")",
              ""
            ]
          },
          {
            "name": "count_of_iac",
            "expression": [
              "0+",
              "CALCULATE([Count of drops],",
              "FILTER(ALL(ip_milestone_data[Drop]),ip_milestone_data[Drop]=\"IP Architecture Complete (IAC)\"),",
              "ALL(ip_milestone_data[is execution drop])",
              ")",
              ""
            ]
          },
          {
            "name": "no_data_curr_or_prev_ww_for_drop",
            "expression": [
              " ",
              "IF(",
              "    CALCULATE( SUM(ip_milestone_data[is current ww or previous ww drop])) = 0, ",
              "             \"No data in the current ww or previous ww\", \"\")"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select milestone.*,",
              "retrospective.[Late Reason],retrospective.[Redrop Reason],retrospective.[Redrop Category], retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
              "case when retrospective.[Redrop Category] in ('Nested IP', 'PDK', 'TFM') and milestone.[is hotfix]  = 1 then'External ReDrop'",
              "when milestone.[is hotfix]  = 1  and retrospective.[Redrop Category] not in ('Nested IP', 'PDK', 'TFM')  then  'Internal ReDrop' end as [external or internal],",
              "case when [external or internal] = 'External ReDrop' then 1 else 0 end as [is external]",
              "",
              "from",
              "\t(select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "\t[configuration] + ', ' + [MilestoneId]as [Configuration,MilestoneId key],",
              "\t[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
              "\t[UsingProductsSummary],[UsingProducts],[Purpose],",
              "\t[Revision],[Drop],[Complete],[DropType],",
              "\t[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "\t[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "\tcast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "\tmax(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "\twhen [Drop] like '%(IC)%'  then 22 when [Drop] like '%(IE)%'  then 23",
              "\twhen [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
              "\twhen [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
              "\tcase when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
              "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "\tcase when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'   then 1 else 0 end as [is hotfix], ",
              "\tcase when [DropType] like '%Patch%' or [DropType] like '%Side Drop%' then 1 else 0 end as [is side drop], ",
              "\tcase when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
              "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
              "\tcase when [TrendYYYYWW] >0 then 0 else 1 end as [is missing trend],",
              "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "\tcase when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "\tcase when [TrendYYYYWW] <= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or past drop],",
              "",
              "\tcase when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "\tcase when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "\tcase when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "\tcase when [TrendYYYYWW] >= DATEPART(ww, dateadd(week,-8,GETDATE()))then 1 else 0 end as [is drop is in last 8 weeks],",
              "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "\t------------------- drop matrix columns -------------------",
              "\tcase when [drop case]<>1  then 'Missing Trend/POR'",
              "\twhen [is stale] =1 then 'Stale'",
              "\twhen [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "\twhen [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "\twhen [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "\twhen [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "\tcase when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "\twhen [is stale] =1 then '#C81326'--'Stale'",
              "\twhen [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "\twhen [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "\twhen [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "\twhen [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "\tend as [drop matrix color],",
              "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "\t------------------- end -------------------",
              "\tcase when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
              "\tcase when [Drop] in('IP Concept Refresh (ICR)','IP Execution Commit (IE)','IP Architecture Complete (IAC)') then 1 else 0 end as [is gladius drop],",
              "\tcase when  [is execution drop] =1 or [is gladius drop]=1 then 1 else 0 end as [is execution or gladius drop],",
              "\tcase when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
              "\tcase when [Complete] = 'Yes' and [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter],",
              "\trow_number() over(partition by [IpConfigurationId] order by [is complete] asc ,[is missing trend] asc,[is current ww or future drop] desc ,[TrendExactDate] asc) as [ranking_for_upcoming_drop],",
              "\trow_number() over(partition by [IpConfigurationId] order by [is complete] desc ,[is missing trend] asc,[is current ww or past drop] desc ,[TrendExactDate] desc) as [ranking_for_completed_drop]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG' ",
              "\tand [Visible] = 'Yes') as milestone",
              "left join",
              "              (select distinct [MilestoneId],",
              "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
              "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
              "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
              "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
              "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact],",
              "\tmax(case when [CommentType]  ='Redrop Category' then [Summary] else null end )as [Redrop Category]",
              "              from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
              "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact','Redrop Category') ",
              "              and [Summary] is not null",
              "              group by [MilestoneId])retrospective",
              "on milestone.[MilestoneId] = retrospective.[MilestoneId]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "IP_milestones"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select milestone.*,",
              "retrospective.[Late Reason],retrospective.[Redrop Reason],retrospective.[Redrop Category], retrospective.[Mitigation],retrospective.[Future Prevention],retrospective.[Impact],",
              "case when retrospective.[Redrop Category] in ('Nested IP', 'PDK', 'TFM') and milestone.[is hotfix]  = 1 then'External ReDrop'",
              "when milestone.[is hotfix]  = 1  and retrospective.[Redrop Category] not in ('Nested IP', 'PDK', 'TFM')  then  'Internal ReDrop' end as [external or internal],",
              "case when [external or internal] = 'External ReDrop' then 1 else 0 end as [is external]",
              "",
              "from",
              "\t(select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "\t[configuration] + ', ' + [MilestoneId]as [Configuration,MilestoneId key],",
              "\t[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
              "\t[UsingProductsSummary],[UsingProducts],[Purpose],",
              "\t[Revision],[Drop],[Complete],[DropType],",
              "\t[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "\t[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "\tcast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "\tmax(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "\twhen [Drop] like '%(IC)%'  then 22 when [Drop] like '%(IE)%'  then 23",
              "\twhen [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
              "\twhen [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
              "\tcase when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
              "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "\tcase when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'   then 1 else 0 end as [is hotfix], ",
              "\tcase when [DropType] like '%Patch%' or [DropType] like '%Side Drop%' then 1 else 0 end as [is side drop], ",
              "\tcase when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
              "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
              "\tcase when [TrendYYYYWW] >0 then 0 else 1 end as [is missing trend],",
              "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "\tcase when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "\tcase when [TrendYYYYWW] <= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or past drop],",
              "",
              "\tcase when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "\tcase when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "\tcase when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "\tcase when [TrendYYYYWW] >= DATEPART(ww, dateadd(week,-8,GETDATE()))then 1 else 0 end as [is drop is in last 8 weeks],",
              "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "\t------------------- drop matrix columns -------------------",
              "\tcase when [drop case]<>1  then 'Missing Trend/POR'",
              "\twhen [is stale] =1 then 'Stale'",
              "\twhen [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "\twhen [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "\twhen [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "\twhen [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "\tcase when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "\twhen [is stale] =1 then '#C81326'--'Stale'",
              "\twhen [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "\twhen [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "\twhen [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "\twhen [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "\twhen [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "\tend as [drop matrix color],",
              "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "\t------------------- end -------------------",
              "\tcase when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
              "\tcase when [Drop] in('IP Concept Refresh (ICR)','IP Execution Commit (IE)','IP Architecture Complete (IAC)') then 1 else 0 end as [is gladius drop],",
              "\tcase when  [is execution drop] =1 or [is gladius drop]=1 then 1 else 0 end as [is execution or gladius drop],",
              "\tcase when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
              "\tcase when [Complete] = 'Yes' and [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter],",
              "\trow_number() over(partition by [IpConfigurationId] order by [is complete] asc ,[is missing trend] asc,[is current ww or future drop] desc ,[TrendExactDate] asc) as [ranking_for_upcoming_drop],",
              "\trow_number() over(partition by [IpConfigurationId] order by [is complete] desc ,[is missing trend] asc,[is current ww or past drop] desc ,[TrendExactDate] desc) as [ranking_for_completed_drop]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG' ",
              "\tand [Visible] = 'Yes') as milestone",
              "left join",
              "              (select distinct [MilestoneId],",
              "              max(case when [CommentType]  ='Late Reason' then [Summary] else null end )as [Late Reason],",
              "              max(case when [CommentType]  ='Redrop Reason' then [Summary] else null end )as [Redrop Reason],",
              "              max(case when [CommentType]  ='Mitigation' then [Summary] else null end )as [Mitigation],",
              "              max(case when [CommentType]  ='Future Prevention' then [Summary] else null end)as [Future Prevention],",
              "              max(case when [CommentType]  ='Impact' then [Summary] else null end )as [Impact],",
              "\tmax(case when [CommentType]  ='Redrop Category' then [Summary] else null end )as [Redrop Category]",
              "              from [V_IPG_CARBON_MILESTONE_COMMENT_SUMMARY_WITH_AREA] ",
              "              where [CommentType] in ( 'Late Reason','Redrop Reason','Mitigation','Future Prevention','Impact','Redrop Category') ",
              "              and [Summary] is not null",
              "              group by [MilestoneId])retrospective",
              "on milestone.[MilestoneId] = retrospective.[MilestoneId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_data",
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DieDesignedFunctionCode",
            "dataType": "string",
            "sourceColumn": "DieDesignedFunctionCode",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DiePFAMItemDsc",
            "dataType": "string",
            "sourceColumn": "DiePFAMItemDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SiProductItemCd",
            "dataType": "int64",
            "sourceColumn": "SiProductItemCd",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SiProductItemDsc",
            "dataType": "string",
            "sourceColumn": "SiProductItemDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SiProductDesignedFunctionCode",
            "dataType": "string",
            "sourceColumn": "SiProductDesignedFunctionCode",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SiPFAMItemDsc",
            "dataType": "string",
            "sourceColumn": "SiPFAMItemDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SecondLvlPlatformConfigID",
            "dataType": "int64",
            "sourceColumn": "SecondLvlPlatformConfigID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SecondLvlPlatformConfigNm",
            "dataType": "string",
            "sourceColumn": "SecondLvlPlatformConfigNm",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PlatformConfigID",
            "dataType": "int64",
            "sourceColumn": "PlatformConfigID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PlatformConfigNm",
            "dataType": "string",
            "sourceColumn": "PlatformConfigNm",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentPlatformId",
            "dataType": "int64",
            "sourceColumn": "ParentPlatformId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "ParentPlatformNm",
            "dataType": "string",
            "sourceColumn": "ParentPlatformNm",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Acronym",
            "dataType": "string",
            "sourceColumn": "Acronym",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Die grouping",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE([DiePFAMItemDsc],",
              "\"Grouping\",\"\"),\"grouping\",\"\"),\"GROUPING\",\"\"),\"Family\",\"\"),\"Dies\",\"\"),\"die\",\"\"),\"Die\",\"\"),\"DIE\",\"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Silicon grouping",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE([SiPFAMItemDsc],",
              "\"Grouping\",\"\"),\"grouping\",\"\"),\"GROUPING\",\"\"),\"Products\",\"\"),\"products\",\"\"),\"Product\",\"\"),\"product\",\"\"),\"Package\",\"\")",
              ",\"package\",\"\"),\"PACKAGE\",\"\"),\"Combos\",\"\"),\"Family\",\"\"),\"PKG\",\"\"),\"Pkg\",\"\")",
              ",\"Si\",\"\"),\"SOC\",\"\"),\"Dies\",\"\"),\"Die\",\"\"),\"PRODUCT\",\"\")",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Platform grouping",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE([SecondLvlPlatformConfigNm],",
              "\"Platform Configuration\",\"\"),\"Platform\",\"\"),\"Configuration\",\"\"),\"Corporate\",\"\"),\"Config\",\"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Atlas link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "\"https://atlas.intel.com/ProductDashboard/\" &[DieID]",
              ""
            ],
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Count of Projects",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Count of Projects\""
          },
          {
            "type": "calculated",
            "name": "DieName with process order",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "soc_data[DieName]"
          },
          {
            "type": "calculated",
            "name": "Die grouping - short",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LEFT([Die grouping],",
              "FIND(\" \",[Die grouping],",
              "FIND(\" \",[Die grouping],1,1)+1,LEN([Die grouping]))",
              ")"
            ]
          },
          {
            "name": "Process Node",
            "dataType": "string",
            "sourceColumn": "Process Node"
          },
          {
            "name": "Eng Org",
            "dataType": "string",
            "sourceColumn": "Eng Org"
          },
          {
            "name": "Segment",
            "dataType": "string",
            "sourceColumn": "Segment"
          },
          {
            "name": "IPG Customers",
            "dataType": "string",
            "sourceColumn": "IPG Customers"
          },
          {
            "name": "Anchor Product",
            "dataType": "string",
            "sourceColumn": "Anchor Product"
          },
          {
            "type": "calculated",
            "name": "Silicon grouping - short",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LEFT([Silicon grouping],",
              "FIND(\" \",[Silicon grouping],",
              "FIND(\" \",[Silicon grouping],1,1)+1,LEN([Silicon grouping]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Platform grouping - short",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LEFT([Platform grouping],",
              "FIND(\" \",[Platform grouping],",
              "FIND(\" \",[Platform grouping],1,1)+1,LEN([Platform grouping]))",
              ")"
            ]
          },
          {
            "name": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
            "dataType": "string",
            "sourceColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID"
          },
          {
            "type": "calculated",
            "name": "Product/TC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([IPG Customers] = \"TestChip\", \"TC\", \"Product\")"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "Project Description",
            "dataType": "string",
            "sourceColumn": "Project Description"
          }
        ],
        "partitions": [
          {
            "name": "ip_to_soc_flattened",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "bom.[DieID],bom.[DieName],bom.[DieDesignedFunctionCode],bom.[DiePFAMItemDsc],",
                "bom.[SiProductItemCd],bom.[SiProductItemDsc],bom.[SiProductDesignedFunctionCode],bom.[SiPFAMItemDsc],",
                "bom.[SecondLvlPlatformConfigID],bom.[SecondLvlPlatformConfigNm],",
                "bom.[PlatformConfigID],bom.[PlatformConfigNm],bom.[ParentPlatformId],bom.[ParentPlatformNm],",
                "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
                "product.[Acronym],process.[Process Node],",
                "atlas.[Eng Org],atlas.[Segment],atlas.[Project Description],",
                "anchor.[IPG Customers] ,anchor.[Anchor Product],anchor.[SoC]",
                "",
                "from",
                "\t(select [DieID],[DieName],[DieStatus],[DieDesignedFunctionCode],[DiePFAMItemDsc],",
                "\t[SiProductItemCd],[SiProductItemDsc],[SiProductDesignedFunctionCode],[SiPFAMItemDsc],",
                "\t[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm],",
                "\t[PlatformConfigID],[PlatformConfigNm],[ParentPlatformId],[ParentPlatformNm]",
                "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "left join",
                "\t(select [Name] as [Carbon ProductName],[ProductId],[MilestoneSpeedId],[SpeedId],[Acronym], [hsdesid]",
                "\tfrom  [V_IPG_CARBON_PRODUCT] ",
                "\t)as product",
                "on bom.[DieID] = product.[SpeedId]",
                "left join",
                "\t(select cast(ItemCode as int) as  [Speed ID], cast([AttributeValue] as varchar) as [Process Node]",
                "\tfrom [V_RAWDATA_IPG_SPEED_ITEM_ATTRIBUTES]",
                "\twhere AttributeName = 'PS_DOT_PROCESS'",
                "\tand [Speed ID] >0) as process",
                "on bom.[DieID] = process.[Speed ID]",
                "left join",
                "\t(select  [Speed ID],",
                "\tmax(case when [PropertyName] = 'Key Features' then [PropertyValue] end) as [Project Description],",
                "\tmax(case when [PropertyName] = 'Eng Org' then [PropertyValue] end) as [Eng Org],",
                "\tmax(case when [PropertyName] = 'Segment' then [PropertyValue] end) as [Segment]",
                "\tfrom [V_RAWDATA_ATLAS_PRODUCT_PROPERTIES]",
                "\twhere [PropertyName] in ('Key Features','Eng Org','Segment')",
                "\tgroup by [Speed ID]) as atlas",
                "on bom.[DieID] = atlas.[Speed ID]",
                "left join",
                "\t(select  [Speed id],[IPG Customers] ,[Anchor Product],[SoC]",
                "\tfrom [ipg_soc_customers_anchor] ) as anchor",
                "on bom.[DieID] = anchor.[Speed ID]",
                "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "bom.[DieID],bom.[DieName],bom.[DieDesignedFunctionCode],bom.[DiePFAMItemDsc],",
                  "bom.[SiProductItemCd],bom.[SiProductItemDsc],bom.[SiProductDesignedFunctionCode],bom.[SiPFAMItemDsc],",
                  "bom.[SecondLvlPlatformConfigID],bom.[SecondLvlPlatformConfigNm],",
                  "bom.[PlatformConfigID],bom.[PlatformConfigNm],bom.[ParentPlatformId],bom.[ParentPlatformNm],",
                  "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
                  "product.[Acronym],process.[Process Node],",
                  "atlas.[Eng Org],atlas.[Segment],atlas.[Project Description],",
                  "anchor.[IPG Customers] ,anchor.[Anchor Product],anchor.[SoC]",
                  "",
                  "from",
                  "\t(select [DieID],[DieName],[DieStatus],[DieDesignedFunctionCode],[DiePFAMItemDsc],",
                  "\t[SiProductItemCd],[SiProductItemDsc],[SiProductDesignedFunctionCode],[SiPFAMItemDsc],",
                  "\t[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm],",
                  "\t[PlatformConfigID],[PlatformConfigNm],[ParentPlatformId],[ParentPlatformNm]",
                  "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "left join",
                  "\t(select [Name] as [Carbon ProductName],[ProductId],[MilestoneSpeedId],[SpeedId],[Acronym], [hsdesid]",
                  "\tfrom  [V_IPG_CARBON_PRODUCT] ",
                  "\t)as product",
                  "on bom.[DieID] = product.[SpeedId]",
                  "left join",
                  "\t(select cast(ItemCode as int) as  [Speed ID], cast([AttributeValue] as varchar) as [Process Node]",
                  "\tfrom [V_RAWDATA_IPG_SPEED_ITEM_ATTRIBUTES]",
                  "\twhere AttributeName = 'PS_DOT_PROCESS'",
                  "\tand [Speed ID] >0) as process",
                  "on bom.[DieID] = process.[Speed ID]",
                  "left join",
                  "\t(select  [Speed ID],",
                  "\tmax(case when [PropertyName] = 'Key Features' then [PropertyValue] end) as [Project Description],",
                  "\tmax(case when [PropertyName] = 'Eng Org' then [PropertyValue] end) as [Eng Org],",
                  "\tmax(case when [PropertyName] = 'Segment' then [PropertyValue] end) as [Segment]",
                  "\tfrom [V_RAWDATA_ATLAS_PRODUCT_PROPERTIES]",
                  "\twhere [PropertyName] in ('Key Features','Eng Org','Segment')",
                  "\tgroup by [Speed ID]) as atlas",
                  "on bom.[DieID] = atlas.[Speed ID]",
                  "left join",
                  "\t(select  [Speed id],[IPG Customers] ,[Anchor Product],[SoC]",
                  "\tfrom [ipg_soc_customers_anchor] ) as anchor",
                  "on bom.[DieID] = anchor.[Speed ID]",
                  "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AGG of DieName",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_data[DieName]),[DieName], \", \",[DieName],ASC)",
              ") "
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "bom.[DieID],bom.[DieName],bom.[DieDesignedFunctionCode],bom.[DiePFAMItemDsc],",
              "bom.[SiProductItemCd],bom.[SiProductItemDsc],bom.[SiProductDesignedFunctionCode],bom.[SiPFAMItemDsc],",
              "bom.[SecondLvlPlatformConfigID],bom.[SecondLvlPlatformConfigNm],",
              "bom.[PlatformConfigID],bom.[PlatformConfigNm],bom.[ParentPlatformId],bom.[ParentPlatformNm],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
              "product.[Acronym],process.[Process Node],",
              "atlas.[Eng Org],atlas.[Segment],atlas.[Project Description],",
              "anchor.[IPG Customers] ,anchor.[Anchor Product],anchor.[SoC]",
              "",
              "from",
              "\t(select [DieID],[DieName],[DieStatus],[DieDesignedFunctionCode],[DiePFAMItemDsc],",
              "\t[SiProductItemCd],[SiProductItemDsc],[SiProductDesignedFunctionCode],[SiPFAMItemDsc],",
              "\t[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm],",
              "\t[PlatformConfigID],[PlatformConfigNm],[ParentPlatformId],[ParentPlatformNm]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "left join",
              "\t(select [Name] as [Carbon ProductName],[ProductId],[MilestoneSpeedId],[SpeedId],[Acronym], [hsdesid]",
              "\tfrom  [V_IPG_CARBON_PRODUCT] ",
              "\t)as product",
              "on bom.[DieID] = product.[SpeedId]",
              "left join",
              "\t(select cast(ItemCode as int) as  [Speed ID], cast([AttributeValue] as varchar) as [Process Node]",
              "\tfrom [V_RAWDATA_IPG_SPEED_ITEM_ATTRIBUTES]",
              "\twhere AttributeName = 'PS_DOT_PROCESS'",
              "\tand [Speed ID] >0) as process",
              "on bom.[DieID] = process.[Speed ID]",
              "left join",
              "\t(select  [Speed ID],",
              "\tmax(case when [PropertyName] = 'Key Features' then [PropertyValue] end) as [Project Description],",
              "\tmax(case when [PropertyName] = 'Eng Org' then [PropertyValue] end) as [Eng Org],",
              "\tmax(case when [PropertyName] = 'Segment' then [PropertyValue] end) as [Segment]",
              "\tfrom [V_RAWDATA_ATLAS_PRODUCT_PROPERTIES]",
              "\twhere [PropertyName] in ('Key Features','Eng Org','Segment')",
              "\tgroup by [Speed ID]) as atlas",
              "on bom.[DieID] = atlas.[Speed ID]",
              "left join",
              "\t(select  [Speed id],[IPG Customers] ,[Anchor Product],[SoC]",
              "\tfrom [ipg_soc_customers_anchor] ) as anchor",
              "on bom.[DieID] = anchor.[Speed ID]",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_to_soc_flattened"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "bom.[DieID],bom.[DieName],bom.[DieDesignedFunctionCode],bom.[DiePFAMItemDsc],",
              "bom.[SiProductItemCd],bom.[SiProductItemDsc],bom.[SiProductDesignedFunctionCode],bom.[SiPFAMItemDsc],",
              "bom.[SecondLvlPlatformConfigID],bom.[SecondLvlPlatformConfigNm],",
              "bom.[PlatformConfigID],bom.[PlatformConfigNm],bom.[ParentPlatformId],bom.[ParentPlatformNm],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
              "product.[Acronym],process.[Process Node],",
              "atlas.[Eng Org],atlas.[Segment],atlas.[Project Description],",
              "anchor.[IPG Customers] ,anchor.[Anchor Product],anchor.[SoC]",
              "",
              "from",
              "\t(select [DieID],[DieName],[DieStatus],[DieDesignedFunctionCode],[DiePFAMItemDsc],",
              "\t[SiProductItemCd],[SiProductItemDsc],[SiProductDesignedFunctionCode],[SiPFAMItemDsc],",
              "\t[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm],",
              "\t[PlatformConfigID],[PlatformConfigNm],[ParentPlatformId],[ParentPlatformNm]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "left join",
              "\t(select [Name] as [Carbon ProductName],[ProductId],[MilestoneSpeedId],[SpeedId],[Acronym], [hsdesid]",
              "\tfrom  [V_IPG_CARBON_PRODUCT] ",
              "\t)as product",
              "on bom.[DieID] = product.[SpeedId]",
              "left join",
              "\t(select cast(ItemCode as int) as  [Speed ID], cast([AttributeValue] as varchar) as [Process Node]",
              "\tfrom [V_RAWDATA_IPG_SPEED_ITEM_ATTRIBUTES]",
              "\twhere AttributeName = 'PS_DOT_PROCESS'",
              "\tand [Speed ID] >0) as process",
              "on bom.[DieID] = process.[Speed ID]",
              "left join",
              "\t(select  [Speed ID],",
              "\tmax(case when [PropertyName] = 'Key Features' then [PropertyValue] end) as [Project Description],",
              "\tmax(case when [PropertyName] = 'Eng Org' then [PropertyValue] end) as [Eng Org],",
              "\tmax(case when [PropertyName] = 'Segment' then [PropertyValue] end) as [Segment]",
              "\tfrom [V_RAWDATA_ATLAS_PRODUCT_PROPERTIES]",
              "\twhere [PropertyName] in ('Key Features','Eng Org','Segment')",
              "\tgroup by [Speed ID]) as atlas",
              "on bom.[DieID] = atlas.[Speed ID]",
              "left join",
              "\t(select  [Speed id],[IPG Customers] ,[Anchor Product],[SoC]",
              "\tfrom [ipg_soc_customers_anchor] ) as anchor",
              "on bom.[DieID] = anchor.[Speed ID]",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_soc_mapping",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Depth",
            "dataType": "int64",
            "sourceColumn": "Depth",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Is IPG",
            "dataType": "string",
            "sourceColumn": "Is IPG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Carbon ProductName",
            "dataType": "string",
            "sourceColumn": "Carbon ProductName"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId"
          },
          {
            "name": "is related milestone",
            "dataType": "int64",
            "sourceColumn": "is related milestone"
          },
          {
            "name": "Drop matrix order",
            "dataType": "int64",
            "sourceColumn": "Drop matrix order"
          },
          {
            "type": "calculated",
            "name": "Related DieName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is related milestone] =1,[DieName])"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts"
          },
          {
            "name": "Die in UsingProducts",
            "dataType": "int64",
            "sourceColumn": "Die in UsingProducts"
          },
          {
            "type": "calculated",
            "name": "Die in UsingProducts string",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF([Die in UsingProducts] = 1, \"Matches Die Name\" , \"Matches other Die Name or is empty\" )"
          },
          {
            "type": "calculated",
            "name": "ipsmv_milestone_drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "//this is used to check whether an ip is a RESUSE for the given program - we need to IE milestone to CONTAIN the given die name in the using releases to check if the IP is reuse or not. if kdie name is NOT in the using release of the IPs IE milestoen then it IS REUSE",
              "",
              "RELATED(ip_milestone_data[Drop])"
            ],
            "sortByColumn": "ipsmv_milestone_order"
          },
          {
            "type": "calculated",
            "name": "ipsmv_is_reuse",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "// This check will return the count of IE milestones that this config has where the given die name is contained in the using products string - if the die name is NOT in the IE then it is reuse, hence if this count is not blank then it is NOT reuse, if it is blank then it IS reuse",
              "// this is used specifcially as the is reuse yes/no in the dashabore, this needs to be a COLUMN in order ot be availabel as a slicer. hence, need to pull in column based logic for each milesotne",
              "if(NOT(ISBLANK(CALCULATE(DISTINCTCOUNT(ip_soc_mapping[MilestoneId]), FILTER(ip_soc_mapping, ip_soc_mapping[Configuration] = EARLIEST(ip_soc_mapping[Configuration]) && [ipsmv_milestone_drop] = \"IP Execution Commit (IE)\" && [Die in UsingProducts] = 1 && [DieName] = EARLIEST([DieName]))))), \"No\", \"Yes\")"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_is_reuse_filter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "//this is for the Main table in order to flag reuse ips seperatly from non-reuse ips.... since this has to be on the rows in the matrix of power BI we are not able to do any conditional formatting, this could be an icon though, or reduced to just \"R\"",
              "IF([ipsmv_is_reuse] = \"Yes\", \"Reuse\", \"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_trend",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(ip_milestone_data[TrendYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "ipsmv_POR",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(ip_milestone_data[PorYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "ipsmv_Complete",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(ip_milestone_data[Complete])"
          },
          {
            "type": "calculated",
            "name": "ipsmv_is_late",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(ip_milestone_data[is late]) // note, the is late is caluclated at the DAY grnualrity so it is possible for por and trend to be in same ww but to be flagged as late becuase trend is late by a single day form por"
          },
          {
            "type": "calculated",
            "name": "ipsmv_offset",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK(ip_soc_mapping[ipsmv_trend]) || ISBLANK(ip_soc_mapping[ipsmv_POR]), blank(), RELATED(ip_milestone_data[Trend Offset]))"
          },
          {
            "type": "calculated",
            "name": "ipsmv_is_latest_milestone",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " // need a flag to only get the LATEST of a milestone per config... in other words if a config has MULTIPLE FV drops, we only want to show the drop informaiton for the LATEST one in the table. this needs to be done in a calc column flag becuase if we were to just say \"max trend\" and add on any (-diff wws) to lat emilesotnes, then we may incorrectly show a max trend ww with a DIFFERENT trend v. por diff. simialr to the check for compelte, this has to be done on the same latest milestone, with multiple drops we dont want to risk mixing content form one drop with another by using things like MAX or LASTNONBLANK",
              "",
              "// also, when the ip is RESUSE we want the latest regardless of if the die name is in the using release, ",
              "IF([ipsmv_is_reuse] = \"Reuse\", if([ipsmv_trend] = CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && [ipsmv_droptype] = EARLIEST([ipsmv_droptype]))), 1, 0),",
              "",
              "//else we only want the latest where the die name IS in the using release, so need ot only look at latest drop where diename IS in using rleease",
              " if([ipsmv_trend] = CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && [ipsmv_droptype] = EARLIEST([ipsmv_droptype]) && [Die in UsingProducts] = 1)), 1, 0))"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_droptype",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "RELATED(ip_milestone_data[DropType])"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_reuse_has_complete",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([ipsmv_is_reuse] = \"Yes\", CALCULATE(DISTINCTCOUNT(ip_soc_mapping[MilestoneId]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = earliest(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype]) && ip_soc_mapping[ipsmv_Complete] = \"Yes\" )) + 0, blank())"
          },
          {
            "type": "calculated",
            "name": "ipsmv_reuse_latest_complete_drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "// this gets the latest trend of REUSE IPs that HAVE A compelted milestone for this drop/droptype already",
              "if(ip_soc_mapping[ipsmv_reuse_has_complete] > 0, ",
              "if(ip_soc_mapping[ipsmv_trend] = CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype]) && ip_soc_mapping[ipsmv_Complete] = \"Yes\"  && ip_soc_mapping[ipsmv_is_reuse] = \"Yes\")), ip_soc_mapping[ipsmv_trend], blank()), blank())"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_reuse_latest_drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " // this will show the ltest trend date of reuse IPs regardless that DO NOT HAVE an already compelted milestone ",
              "if(ip_soc_mapping[ipsmv_reuse_has_complete] = 0, ",
              "if(ip_soc_mapping[ipsmv_trend] = CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype]) && ip_soc_mapping[ipsmv_is_reuse] = \"Yes\")), ip_soc_mapping[ipsmv_trend], blank()), ",
              "blank())"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_non_reuse_latest_drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " // for non_reuse drops we need to consider only those where the die name is in the using release *EXCEPT FOR IC* ",
              "IF(ip_soc_mapping[ipsmv_trend] = ",
              "// if milesotne is IC then do NTO include the criteria to check for die name in using release",
              "if(ip_soc_mapping[ipsmv_milestone_drop] = \"IP Concept (IC)\", CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype])  && ip_soc_mapping[ipsmv_is_reuse] = \"No\" )),",
              "// else when not IC milestone check for the die name in the using release",
              "  CALCULATE(MAX(ip_soc_mapping[ipsmv_trend]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype])  && ip_soc_mapping[ipsmv_is_reuse] = \"No\" && ip_soc_mapping[Die in UsingProducts] = 1)) ), ip_soc_mapping[ipsmv_trend], blank())"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_display",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(NOT(ISBLANK([ipsmv_display_itrm])), IF(ip_soc_mapping[ipsmv_valid_id] > 1, \"*\" , blank() ) & ip_soc_mapping[ipsmv_display_itrm], blank())",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_display_color",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              " // 0 = dark green; 1 = light green; 2 = white (IE not complete but no POR); 3 = yellow (IE complete and no por) ; 4 = red (late)",
              "// display items that ARE REUSE and HAVE Complete milestone (always green)",
              "IF(NOT(ISBLANK([ipsmv_reuse_latest_complete_drop])), 0 , blank()) & ",
              "// display items that ARE REUSE and DO NOT HAVE a complete milestone (always light green)",
              "IF(NOT(ISBLANK([ipsmv_reuse_latest_drop])), IF(NOT(ISBLANK(ip_soc_mapping[ipsmv_trend])), 1, blank()),  blank())  & ",
              "// display items that ARE NOT Reuse - need to check for and add the (-diff)",
              "IF(NOT(ISBLANK([ipsmv_non_reuse_latest_drop])), ",
              "\tif(ip_soc_mapping[ipsmv_Complete] = \"Yes\", 0, // if already compelte then dark green",
              "\t\tif(ISBLANK(ip_soc_mapping[ipsmv_offset]) , if(ip_soc_mapping[has_complete_IE] = \"No\", 2, 3),  // if offset is blank then we ar emissing trend or por, color accoridngly based on IE compelteness",
              "\t\t\tIF([ipsmv_offset] < 0, // it is late and needs ot be red ",
              "\t\t\t\t4, // is red",
              "\t\t\t1) // complete was not YES, and offset was not late, so it is LIGHT green, still active but on time",
              "\t\t)",
              "\t)",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "has_complete_IE",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "// If the config is NOT reuse then this will check if it has a COMPLETE IE milesotne or not",
              "",
              "if(NOT(ISBLANK(CALCULATE(DISTINCTCOUNT(ip_soc_mapping[MilestoneId]), FILTER(ip_soc_mapping, ip_soc_mapping[Configuration] = EARLIEST(ip_soc_mapping[Configuration]) && [ipsmv_milestone_drop] = \"IP Execution Commit (IE)\" && [Die in UsingProducts] = 1 && [DieName] = EARLIEST([DieName]) && ip_soc_mapping[ipsmv_Complete] = \"Yes\")))), \"Yes\", \"No\")"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_milestone_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(MilestoneOrder[plc_milestone.milestone_order])"
          },
          {
            "type": "calculated",
            "name": "carbon_url",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(NOT(ISBLANK(ip_soc_mapping[ipsmv_display])), \"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\" & ip_soc_mapping[IpConfigurationId], BLANK())",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "ipsmv_valid_id",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "// need to break up the logic to first mark milesotnes that are valid, and then can get distinct count ",
              "",
              "// if milesotne is IC then do NTO include the criteria to check for die name in using release",
              "if(ip_soc_mapping[ipsmv_milestone_drop] = \"IP Concept (IC)\" || ip_soc_mapping[ipsmv_is_reuse] = \"Yes\", CALCULATE(count(ip_soc_mapping[MilestoneId]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype]) && ip_soc_mapping[Depth] = 1 )),",
              "// else when not IC milestone check for the die name in the using release",
              "  CALCULATE(count(ip_soc_mapping[MilestoneId]), FILTER(ip_soc_mapping, ip_soc_mapping[IpConfigurationId] = EARLIEST(ip_soc_mapping[IpConfigurationId]) && ip_soc_mapping[DieName] = EARLIEST(ip_soc_mapping[DieName]) && ip_soc_mapping[ipsmv_milestone_drop] = EARLIEST(ip_soc_mapping[ipsmv_milestone_drop]) && ip_soc_mapping[ipsmv_droptype] = EARLIEST(ip_soc_mapping[ipsmv_droptype]) && ip_soc_mapping[Die in UsingProducts] = 1 && ip_soc_mapping[Depth] = 1)) )"
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " SWITCH([ipsmv_display_color], 0, \"Complete\", 1, \" On Time\",  2 , \"  Missing Trend/POR (IE Not Done)\",  3, \"   Missing Trend/POR IE Done!\", 4, \"    Late\")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ipsmv_display_itrm",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "// display items that ARE REUSE and HAVE Complete milestone (always green)",
              "IF(NOT(ISBLANK([ipsmv_reuse_latest_complete_drop])), [ipsmv_reuse_latest_complete_drop], blank()) & ",
              "// display items that ARE REUSE and DO NOT HAVE a complete milestone (always light green)",
              "IF(NOT(ISBLANK([ipsmv_reuse_latest_drop])), ip_soc_mapping[ipsmv_reuse_latest_drop], blank())  & ",
              "// display items that ARE NOT Reuse - need to check for and add the (-diff)",
              "IF(NOT(ISBLANK([ipsmv_non_reuse_latest_drop])), ",
              "\tif(ip_soc_mapping[ipsmv_Complete] = \"Yes\", [ipsmv_non_reuse_latest_drop],",
              "\t\tIF([ipsmv_offset] < 0, ",
              "\t\t\t[ipsmv_non_reuse_latest_drop] & \" (\" & [ipsmv_offset] & \")\",",
              "\t\t\t[ipsmv_non_reuse_latest_drop]",
              "\t\t)",
              "\t)",
              ")",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "ip_soc_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select [IpConfigurationId],[Configuration],[Depth],",
                "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
                "[Carbon ProductName],  [DieID],[DieName],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "[MilestoneId],[Drop matrix order], [is related milestone],[UsingProducts], [Die in UsingProducts]",
                "from[ipg_soc_related_ips_and_milestones]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpConfigurationId],[Configuration],[Depth],",
                  "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
                  "[Carbon ProductName],  [DieID],[DieName],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "[MilestoneId],[Drop matrix order], [is related milestone],[UsingProducts], [Die in UsingProducts]",
                  "from[ipg_soc_related_ips_and_milestones]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select [IpConfigurationId],[Configuration],[Depth],",
              "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
              "[Carbon ProductName],  [DieID],[DieName],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[MilestoneId],[Drop matrix order], [is related milestone],[UsingProducts], [Die in UsingProducts]",
              "from[ipg_soc_related_ips_and_milestones]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_soc_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpConfigurationId],[Configuration],[Depth],",
              "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
              "[Carbon ProductName],  [DieID],[DieName],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[MilestoneId],[Drop matrix order], [is related milestone],[UsingProducts], [Die in UsingProducts]",
              "from[ipg_soc_related_ips_and_milestones]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_milestone_key",
        "isHidden": true,
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "ip_milestone_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select   [IpConfigurationId],[Configuration],[MilestoneId],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId]",
                "from  [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] ='IPG'",
                "and [Visible] = 'Yes'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select   [IpConfigurationId],[Configuration],[MilestoneId],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId]",
                  "from  [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] ='IPG'",
                  "and [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select   [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] ='IPG'",
              "and [Visible] = 'Yes'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_milestone_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select   [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] ='IPG'",
              "and [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "die_key",
        "isHidden": true,
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "die_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [DieID],[DieName]",
                "from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                " where [DieStatus] = 'Active'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [DieID],[DieName]",
                  "from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  " where [DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [DieID],[DieName]",
              "from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              " where [DieStatus] = 'Active'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "die_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [DieID],[DieName]",
              "from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              " where [DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_dates",
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Stepping Name",
            "dataType": "string",
            "sourceColumn": "Stepping Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Milestone",
            "dataType": "string",
            "sourceColumn": "Milestone",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Drop",
            "dataType": "string",
            "sourceColumn": "SOC Drop",
            "sortByColumn": "SOC Drop order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Date YYYYWW",
            "dataType": "string",
            "sourceColumn": "SOC Date YYYYWW",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Date",
            "dataType": "dateTime",
            "sourceColumn": "SOC Date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "SOC Date Complete",
            "dataType": "string",
            "sourceColumn": "SOC Date Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Drop order",
            "dataType": "int64",
            "sourceColumn": "SOC Drop order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "max stepping",
            "dataType": "string",
            "sourceColumn": "max stepping"
          },
          {
            "name": "Stepping without platform stepping",
            "dataType": "string",
            "sourceColumn": "Stepping without platform stepping"
          },
          {
            "name": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
            "dataType": "string",
            "sourceColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID"
          },
          {
            "name": "Actual Finish YYYYWW",
            "dataType": "string",
            "sourceColumn": "Actual Finish YYYYWW"
          },
          {
            "name": "Trend YYYYWW",
            "dataType": "string",
            "sourceColumn": "Trend YYYYWW"
          },
          {
            "name": "POR YYYYWW",
            "dataType": "string",
            "sourceColumn": "POR YYYYWW"
          },
          {
            "name": "Actual Finish",
            "dataType": "dateTime",
            "sourceColumn": "Actual Finish"
          },
          {
            "name": "Trend",
            "dataType": "dateTime",
            "sourceColumn": "Trend"
          },
          {
            "name": "POR",
            "dataType": "dateTime",
            "sourceColumn": "POR"
          },
          {
            "name": "DriveTo YYYYWW",
            "dataType": "string",
            "sourceColumn": "DriveTo YYYYWW"
          },
          {
            "name": "DriveTo",
            "dataType": "dateTime",
            "sourceColumn": "DriveTo"
          },
          {
            "name": "Actual Finish Quarter",
            "dataType": "string",
            "sourceColumn": "Actual Finish Quarter"
          },
          {
            "name": "Trend Quarter",
            "dataType": "string",
            "sourceColumn": "Trend Quarter"
          },
          {
            "name": "POR Quarter",
            "dataType": "string",
            "sourceColumn": "POR Quarter"
          },
          {
            "name": "DriveTo Quarter",
            "dataType": "string",
            "sourceColumn": "DriveTo Quarter"
          },
          {
            "name": "SOC Date Quarter",
            "dataType": "string",
            "sourceColumn": "SOC Date Quarter"
          },
          {
            "name": "SOC Drop color",
            "dataType": "string",
            "sourceColumn": "SOC Drop color"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset"
          },
          {
            "name": "Actual Finish Offset",
            "dataType": "int64",
            "sourceColumn": "Actual Finish Offset"
          },
          {
            "name": "Trend is late",
            "dataType": "int64",
            "sourceColumn": "Trend is late"
          },
          {
            "name": "Actual Finish is late",
            "dataType": "int64",
            "sourceColumn": "Actual Finish is late"
          },
          {
            "type": "calculated",
            "name": "SOC Drop and Date",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[SOC Drop] &\" \"&UNICHAR(10)& [SOC Date YYYYWW]"
          },
          {
            "name": "Actual Finish (POR)",
            "dataType": "dateTime",
            "sourceColumn": "Actual Finish (POR)"
          },
          {
            "name": "Actual Finish (POR) YYYYWW",
            "dataType": "string",
            "sourceColumn": "Actual Finish (POR) YYYYWW"
          },
          {
            "name": "testchip_color_coding",
            "dataType": "int64",
            "sourceColumn": "testchip_color_coding"
          }
        ],
        "partitions": [
          {
            "name": "soc_dates",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select bom.[DieID],",
                "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
                "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Drop],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete],soc_dates.[SOC Drop order],soc_dates.[SOC Drop color],",
                "soc_dates.[Actual Finish (POR)],soc_dates.[Actual Finish (POR) YYYYWW],",
                "soc_dates.[Actual Finish YYYYWW],soc_dates.[Trend YYYYWW],soc_dates.[POR YYYYWW],soc_dates.[DriveTo YYYYWW], soc_dates.[Actual Finish],soc_dates.[Trend],soc_dates.[POR],soc_dates.[DriveTo],",
                "soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter],soc_dates.[POR Quarter] ,soc_dates.[DriveTo Quarter],",
                "isnull(isnull(isnull(soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter]),soc_dates.[POR Quarter]) ,soc_dates.[DriveTo Quarter])as [SOC Date Quarter],",
                "soc_dates.[Trend Offset],soc_dates.[Actual Finish Offset],soc_dates.[Trend is late],soc_dates.[Actual Finish is late],soc_dates.[testchip_color_coding],",
                "max (case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] end) over (partition by bom.[DieID]) as [max stepping],",
                "case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] ",
                "when soc_dates.[SOC Drop] in ( 'Alpha', 'Beta','PV') then [max stepping] end as [Stepping without platform stepping]",
                "from",
                "\t(select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "inner join",
                "\t(select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
                "\tcase when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\twhen [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV'  ",
                "\twhen [Milestone] like'%ES0%' then 'ES0' when [Milestone] like'%ES1%' then 'ES1' when [Milestone] like'%ES2%' then 'ES2' when [Milestone] like'%QS%' then 'QS'",
                "\telse [Milestone] end as [SOC Drop],",
                "\tcase  when [SOC Drop] = 'POPL2' then 1 when [SOC Drop] = 'POPL3' then 5",
                "\twhen [SOC Drop] = 'Tape In' then 10 when [SOC Drop] = 'Power On' then 20 ",
                "\twhen [SOC Drop] = 'ES0' then 23 when [SOC Drop] = 'ES1' then 25 when [SOC Drop] = 'ES2' then 27 ",
                "\twhen [SOC Drop] = 'QS' then 30 when [SOC Drop] = 'PRQ' then 35  ",
                "\twhen [SOC Drop] = 'Alpha' then 40 when [SOC Drop] = 'Beta' then 45 when [SOC Drop] = 'PV' then 50  else 70 end as [SOC Drop order],",
                "\tcase  when [SOC Drop] = 'POPL2' then '#00C7FD' when [SOC Drop] = 'POPL3' then '#0068B5'",
                "\twhen [SOC Drop] = 'Tape In' then '#8BAE46' when [SOC Drop] = 'Power On' then '#E96115' ",
                "\twhen [SOC Drop] = 'ES0' then '#58eb34'  when [SOC Drop] = 'ES1' then '#3499eb'  when [SOC Drop] = 'ES2' then '#6b34eb'  ",
                "\twhen [SOC Drop] = 'QS' then '#eb8934'  when [SOC Drop] = 'PRQ' then '#FEC91B'  ",
                "\twhen [SOC Drop] = 'Alpha' then '#FEC91B' when [SOC Drop] = 'Beta' then '#FEC91B' when [SOC Drop] = 'PV' then '#FEC91B'  else '#E9E9E9' end as [SOC Drop color],",
                "\tisnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                "\tisnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "\tisnull([Actual Finish],[POR])as [Actual Finish (POR)],",
                "\tisnull([Actual Finish YYYYWW],[POR YYYYWW])as [Actual Finish (POR) YYYYWW],",
                "\t[Actual Finish YYYYWW],[Trend YYYYWW],[POR YYYYWW],[Drive To YYYYWW] as [DriveTo YYYYWW],",
                "\t[Actual Finish],[Trend],[POR],[DriveTo],",
                "\tdatepart(year,[Actual Finish])+'Q'+datepart(quarter,[Actual Finish])as [Actual Finish Quarter],",
                "\tdatepart(year,[Trend])+'Q'+datepart(quarter,[Trend])as [Trend Quarter],",
                "\tdatepart(year,[POR])+'Q'+datepart(quarter,[POR])as [POR Quarter],",
                "\tdatepart(year,[DriveTo])+'Q'+datepart(quarter,[DriveTo])as [DriveTo Quarter],",
                "\tcase when [POR YYYYWW] > 0 and [Trend YYYYWW]> 0 then cast([POR YYYYWW]as int)-cast([Trend YYYYWW]as int) else null end as [Trend Offset],",
                "\tcase when [POR YYYYWW] > 0 and [Actual Finish YYYYWW]> 0 then cast([POR YYYYWW]as int) -cast([Actual Finish YYYYWW]as int) else null end as [Actual Finish Offset],",
                "\tcase when [Trend Offset] in (-2,-3) then 1 when [Trend Offset] < -3 then 2 else 0 end as [Trend is Late],",
                "\tcase when [Actual Finish Offset] in (-2,-3) then 1 when [Actual Finish Offset] < -3 then 2 else 0 end as [Actual Finish is Late],",
                "\tcase when [Actual Finish YYYYWW] > 0 then 1 when [Trend Offset] < 0 then 2 else 3 end as [testchip_color_coding],",
                "\tcase when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "\twhere [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                "\tand [Milestone] not like '%Candidate/Pre%'",
                "\tand ([Milestone] in ('POPL2','POPL3') or[Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                "\tor [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%'",
                "\tor [Milestone] like'%ES0%' or [Milestone] like'%ES1%' or [Milestone] like'%ES2%' or [Milestone] like'%QS%')",
                "\t) as soc_dates",
                "on ",
                "(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] in ('POPL2','POPL3','Tape In')) or ",
                "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ','ES0', 'ES1','ES2', 'QS')) or ",
                "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')) ",
                "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select bom.[DieID],",
                  "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
                  "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Drop],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete],soc_dates.[SOC Drop order],soc_dates.[SOC Drop color],",
                  "soc_dates.[Actual Finish (POR)],soc_dates.[Actual Finish (POR) YYYYWW],",
                  "soc_dates.[Actual Finish YYYYWW],soc_dates.[Trend YYYYWW],soc_dates.[POR YYYYWW],soc_dates.[DriveTo YYYYWW], soc_dates.[Actual Finish],soc_dates.[Trend],soc_dates.[POR],soc_dates.[DriveTo],",
                  "soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter],soc_dates.[POR Quarter] ,soc_dates.[DriveTo Quarter],",
                  "isnull(isnull(isnull(soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter]),soc_dates.[POR Quarter]) ,soc_dates.[DriveTo Quarter])as [SOC Date Quarter],",
                  "soc_dates.[Trend Offset],soc_dates.[Actual Finish Offset],soc_dates.[Trend is late],soc_dates.[Actual Finish is late],soc_dates.[testchip_color_coding],",
                  "max (case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] end) over (partition by bom.[DieID]) as [max stepping],",
                  "case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] ",
                  "when soc_dates.[SOC Drop] in ( 'Alpha', 'Beta','PV') then [max stepping] end as [Stepping without platform stepping]",
                  "from",
                  "\t(select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "inner join",
                  "\t(select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
                  "\tcase when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\twhen [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV'  ",
                  "\twhen [Milestone] like'%ES0%' then 'ES0' when [Milestone] like'%ES1%' then 'ES1' when [Milestone] like'%ES2%' then 'ES2' when [Milestone] like'%QS%' then 'QS'",
                  "\telse [Milestone] end as [SOC Drop],",
                  "\tcase  when [SOC Drop] = 'POPL2' then 1 when [SOC Drop] = 'POPL3' then 5",
                  "\twhen [SOC Drop] = 'Tape In' then 10 when [SOC Drop] = 'Power On' then 20 ",
                  "\twhen [SOC Drop] = 'ES0' then 23 when [SOC Drop] = 'ES1' then 25 when [SOC Drop] = 'ES2' then 27 ",
                  "\twhen [SOC Drop] = 'QS' then 30 when [SOC Drop] = 'PRQ' then 35  ",
                  "\twhen [SOC Drop] = 'Alpha' then 40 when [SOC Drop] = 'Beta' then 45 when [SOC Drop] = 'PV' then 50  else 70 end as [SOC Drop order],",
                  "\tcase  when [SOC Drop] = 'POPL2' then '#00C7FD' when [SOC Drop] = 'POPL3' then '#0068B5'",
                  "\twhen [SOC Drop] = 'Tape In' then '#8BAE46' when [SOC Drop] = 'Power On' then '#E96115' ",
                  "\twhen [SOC Drop] = 'ES0' then '#58eb34'  when [SOC Drop] = 'ES1' then '#3499eb'  when [SOC Drop] = 'ES2' then '#6b34eb'  ",
                  "\twhen [SOC Drop] = 'QS' then '#eb8934'  when [SOC Drop] = 'PRQ' then '#FEC91B'  ",
                  "\twhen [SOC Drop] = 'Alpha' then '#FEC91B' when [SOC Drop] = 'Beta' then '#FEC91B' when [SOC Drop] = 'PV' then '#FEC91B'  else '#E9E9E9' end as [SOC Drop color],",
                  "\tisnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
                  "\tisnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "\tisnull([Actual Finish],[POR])as [Actual Finish (POR)],",
                  "\tisnull([Actual Finish YYYYWW],[POR YYYYWW])as [Actual Finish (POR) YYYYWW],",
                  "\t[Actual Finish YYYYWW],[Trend YYYYWW],[POR YYYYWW],[Drive To YYYYWW] as [DriveTo YYYYWW],",
                  "\t[Actual Finish],[Trend],[POR],[DriveTo],",
                  "\tdatepart(year,[Actual Finish])+'Q'+datepart(quarter,[Actual Finish])as [Actual Finish Quarter],",
                  "\tdatepart(year,[Trend])+'Q'+datepart(quarter,[Trend])as [Trend Quarter],",
                  "\tdatepart(year,[POR])+'Q'+datepart(quarter,[POR])as [POR Quarter],",
                  "\tdatepart(year,[DriveTo])+'Q'+datepart(quarter,[DriveTo])as [DriveTo Quarter],",
                  "\tcase when [POR YYYYWW] > 0 and [Trend YYYYWW]> 0 then cast([POR YYYYWW]as int)-cast([Trend YYYYWW]as int) else null end as [Trend Offset],",
                  "\tcase when [POR YYYYWW] > 0 and [Actual Finish YYYYWW]> 0 then cast([POR YYYYWW]as int) -cast([Actual Finish YYYYWW]as int) else null end as [Actual Finish Offset],",
                  "\tcase when [Trend Offset] in (-2,-3) then 1 when [Trend Offset] < -3 then 2 else 0 end as [Trend is Late],",
                  "\tcase when [Actual Finish Offset] in (-2,-3) then 1 when [Actual Finish Offset] < -3 then 2 else 0 end as [Actual Finish is Late],",
                  "\tcase when [Actual Finish YYYYWW] > 0 then 1 when [Trend Offset] < 0 then 2 else 3 end as [testchip_color_coding],",
                  "\tcase when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                  "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "\twhere [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                  "\tand [Milestone] not like '%Candidate/Pre%'",
                  "\tand ([Milestone] in ('POPL2','POPL3') or[Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
                  "\tor [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%'",
                  "\tor [Milestone] like'%ES0%' or [Milestone] like'%ES1%' or [Milestone] like'%ES2%' or [Milestone] like'%QS%')",
                  "\t) as soc_dates",
                  "on ",
                  "(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] in ('POPL2','POPL3','Tape In')) or ",
                  "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ','ES0', 'ES1','ES2', 'QS')) or ",
                  "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')) ",
                  "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AGG of SOCs",
            "expression": [
              "",
              "IF(MAX(soc_dates[SOC Drop]) = \"Tape In\",",
              "CALCULATE(CONCATENATEX(VALUES(soc_data[Die grouping - short]),[Die grouping - short], UNICHAR(10),[Die grouping - short],ASC),",
              "FILTER(ALL(soc_data[Die grouping - short]),NOT(ISBLANK(soc_data[Die grouping - short])))",
              ") ,",
              "IF(MAX(soc_dates[SOC Drop]) in {\"Power On\",\"PRQ\"},",
              "CALCULATE(CONCATENATEX(VALUES(soc_data[Silicon grouping - short]),[Silicon grouping - short], UNICHAR(10),[Silicon grouping - short],ASC),",
              "FILTER(ALL(soc_data[Silicon grouping - short]),NOT(ISBLANK(soc_data[Silicon grouping - short])))",
              ") ,",
              "IF(MAX(soc_dates[SOC Drop]) in {\"Alpha\",\"Beta\",\"PV\"},",
              "CALCULATE(CONCATENATEX(VALUES(soc_data[Platform grouping - short]),[Platform grouping - short], UNICHAR(10),[Platform grouping - short],ASC),",
              "FILTER(ALL(soc_data[Platform grouping - short]),NOT(ISBLANK(soc_data[Platform grouping - short])))",
              ") ",
              ")))"
            ]
          },
          {
            "name": "AGG of SOC Dates YYYYYWW",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Date YYYYWW]),[SOC Date YYYYWW], \", \",[SOC Date YYYYWW],ASC),",
              "FILTER(ALL(soc_dates[SOC Date YYYYWW]),NOT(ISBLANK(soc_dates[SOC Date YYYYWW])))",
              ") "
            ]
          },
          {
            "name": "AGG of SOC Die Dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Date YYYYWW]),[SOC Date YYYYWW], \", \",[SOC Date YYYYWW],ASC),",
              "FILTER(ALL(soc_dates[SOC Date YYYYWW]),NOT(ISBLANK(soc_dates[SOC Date YYYYWW]))),",
              "FILTER(ALL(soc_dates[SOC Drop]),soc_dates[SOC Drop] = \"Tape In\")",
              ") "
            ]
          },
          {
            "name": "AGG of SOC Silicon Dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Date YYYYWW]),[SOC Date YYYYWW], \", \",[SOC Date YYYYWW],ASC),",
              "FILTER(ALL(soc_dates[SOC Date YYYYWW]),NOT(ISBLANK(soc_dates[SOC Date YYYYWW]))),",
              "FILTER(ALL(soc_dates[SOC Drop]),soc_dates[SOC Drop] in {\"Power On\",\"PRQ\"})",
              ") "
            ]
          },
          {
            "name": "AGG of SOC Platform Dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Date YYYYWW]),[SOC Date YYYYWW], \", \",[SOC Date YYYYWW],ASC),",
              "FILTER(ALL(soc_dates[SOC Date YYYYWW]),NOT(ISBLANK(soc_dates[SOC Date YYYYWW]))),",
              "FILTER(ALL(soc_dates[SOC Drop]),soc_dates[SOC Drop] in {\"Alpha\",\"Beta\",\"PV\"})",
              ") "
            ]
          },
          {
            "name": "AGG of Power On Dates",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Date YYYYWW]),[SOC Date YYYYWW], \", \",[SOC Date YYYYWW],ASC),",
              "FILTER(ALL(soc_dates[SOC Date YYYYWW]),NOT(ISBLANK(soc_dates[SOC Date YYYYWW]))),",
              "FILTER(ALL(soc_dates[SOC Drop]),soc_dates[SOC Drop] =\"Power On\")",
              ") "
            ]
          },
          {
            "name": "AGG of SOC Dates (drop and date)",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(soc_dates[SOC Drop and Date]),[SOC Drop and Date], \", \",[SOC Drop and Date],ASC),",
              "FILTER(ALL(soc_dates[SOC Drop and Date]),NOT(ISBLANK(soc_dates[SOC Drop and Date])))",
              "",
              ") "
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select bom.[DieID],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
              "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Drop],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete],soc_dates.[SOC Drop order],soc_dates.[SOC Drop color],",
              "soc_dates.[Actual Finish (POR)],soc_dates.[Actual Finish (POR) YYYYWW],",
              "soc_dates.[Actual Finish YYYYWW],soc_dates.[Trend YYYYWW],soc_dates.[POR YYYYWW],soc_dates.[DriveTo YYYYWW], soc_dates.[Actual Finish],soc_dates.[Trend],soc_dates.[POR],soc_dates.[DriveTo],",
              "soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter],soc_dates.[POR Quarter] ,soc_dates.[DriveTo Quarter],",
              "isnull(isnull(isnull(soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter]),soc_dates.[POR Quarter]) ,soc_dates.[DriveTo Quarter])as [SOC Date Quarter],",
              "soc_dates.[Trend Offset],soc_dates.[Actual Finish Offset],soc_dates.[Trend is late],soc_dates.[Actual Finish is late],soc_dates.[testchip_color_coding],",
              "max (case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] end) over (partition by bom.[DieID]) as [max stepping],",
              "case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] ",
              "when soc_dates.[SOC Drop] in ( 'Alpha', 'Beta','PV') then [max stepping] end as [Stepping without platform stepping]",
              "from",
              "\t(select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "inner join",
              "\t(select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
              "\tcase when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\twhen [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV'  ",
              "\twhen [Milestone] like'%ES0%' then 'ES0' when [Milestone] like'%ES1%' then 'ES1' when [Milestone] like'%ES2%' then 'ES2' when [Milestone] like'%QS%' then 'QS'",
              "\telse [Milestone] end as [SOC Drop],",
              "\tcase  when [SOC Drop] = 'POPL2' then 1 when [SOC Drop] = 'POPL3' then 5",
              "\twhen [SOC Drop] = 'Tape In' then 10 when [SOC Drop] = 'Power On' then 20 ",
              "\twhen [SOC Drop] = 'ES0' then 23 when [SOC Drop] = 'ES1' then 25 when [SOC Drop] = 'ES2' then 27 ",
              "\twhen [SOC Drop] = 'QS' then 30 when [SOC Drop] = 'PRQ' then 35  ",
              "\twhen [SOC Drop] = 'Alpha' then 40 when [SOC Drop] = 'Beta' then 45 when [SOC Drop] = 'PV' then 50  else 70 end as [SOC Drop order],",
              "\tcase  when [SOC Drop] = 'POPL2' then '#00C7FD' when [SOC Drop] = 'POPL3' then '#0068B5'",
              "\twhen [SOC Drop] = 'Tape In' then '#8BAE46' when [SOC Drop] = 'Power On' then '#E96115' ",
              "\twhen [SOC Drop] = 'ES0' then '#58eb34'  when [SOC Drop] = 'ES1' then '#3499eb'  when [SOC Drop] = 'ES2' then '#6b34eb'  ",
              "\twhen [SOC Drop] = 'QS' then '#eb8934'  when [SOC Drop] = 'PRQ' then '#FEC91B'  ",
              "\twhen [SOC Drop] = 'Alpha' then '#FEC91B' when [SOC Drop] = 'Beta' then '#FEC91B' when [SOC Drop] = 'PV' then '#FEC91B'  else '#E9E9E9' end as [SOC Drop color],",
              "\tisnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\tisnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\tisnull([Actual Finish],[POR])as [Actual Finish (POR)],",
              "\tisnull([Actual Finish YYYYWW],[POR YYYYWW])as [Actual Finish (POR) YYYYWW],",
              "\t[Actual Finish YYYYWW],[Trend YYYYWW],[POR YYYYWW],[Drive To YYYYWW] as [DriveTo YYYYWW],",
              "\t[Actual Finish],[Trend],[POR],[DriveTo],",
              "\tdatepart(year,[Actual Finish])+'Q'+datepart(quarter,[Actual Finish])as [Actual Finish Quarter],",
              "\tdatepart(year,[Trend])+'Q'+datepart(quarter,[Trend])as [Trend Quarter],",
              "\tdatepart(year,[POR])+'Q'+datepart(quarter,[POR])as [POR Quarter],",
              "\tdatepart(year,[DriveTo])+'Q'+datepart(quarter,[DriveTo])as [DriveTo Quarter],",
              "\tcase when [POR YYYYWW] > 0 and [Trend YYYYWW]> 0 then cast([POR YYYYWW]as int)-cast([Trend YYYYWW]as int) else null end as [Trend Offset],",
              "\tcase when [POR YYYYWW] > 0 and [Actual Finish YYYYWW]> 0 then cast([POR YYYYWW]as int) -cast([Actual Finish YYYYWW]as int) else null end as [Actual Finish Offset],",
              "\tcase when [Trend Offset] in (-2,-3) then 1 when [Trend Offset] < -3 then 2 else 0 end as [Trend is Late],",
              "\tcase when [Actual Finish Offset] in (-2,-3) then 1 when [Actual Finish Offset] < -3 then 2 else 0 end as [Actual Finish is Late],",
              "\tcase when [Actual Finish YYYYWW] > 0 then 1 when [Trend Offset] < 0 then 2 else 3 end as [testchip_color_coding],",
              "\tcase when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\twhere [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\tand [Milestone] not like '%Candidate/Pre%'",
              "\tand ([Milestone] in ('POPL2','POPL3') or[Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\tor [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%'",
              "\tor [Milestone] like'%ES0%' or [Milestone] like'%ES1%' or [Milestone] like'%ES2%' or [Milestone] like'%QS%')",
              "\t) as soc_dates",
              "on ",
              "(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] in ('POPL2','POPL3','Tape In')) or ",
              "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ','ES0', 'ES1','ES2', 'QS')) or ",
              "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')) ",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_dates"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select bom.[DieID],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID],",
              "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Drop],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete],soc_dates.[SOC Drop order],soc_dates.[SOC Drop color],",
              "soc_dates.[Actual Finish (POR)],soc_dates.[Actual Finish (POR) YYYYWW],",
              "soc_dates.[Actual Finish YYYYWW],soc_dates.[Trend YYYYWW],soc_dates.[POR YYYYWW],soc_dates.[DriveTo YYYYWW], soc_dates.[Actual Finish],soc_dates.[Trend],soc_dates.[POR],soc_dates.[DriveTo],",
              "soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter],soc_dates.[POR Quarter] ,soc_dates.[DriveTo Quarter],",
              "isnull(isnull(isnull(soc_dates.[Actual Finish Quarter],soc_dates.[Trend Quarter]),soc_dates.[POR Quarter]) ,soc_dates.[DriveTo Quarter])as [SOC Date Quarter],",
              "soc_dates.[Trend Offset],soc_dates.[Actual Finish Offset],soc_dates.[Trend is late],soc_dates.[Actual Finish is late],soc_dates.[testchip_color_coding],",
              "max (case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] end) over (partition by bom.[DieID]) as [max stepping],",
              "case when soc_dates.[SOC Drop] in ('Tape In','Power On', 'PRQ','ES0', 'ES1','ES2', 'QS') then soc_dates.[Stepping Name] ",
              "when soc_dates.[SOC Drop] in ( 'Alpha', 'Beta','PV') then [max stepping] end as [Stepping without platform stepping]",
              "from",
              "\t(select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "inner join",
              "\t(select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
              "\tcase when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\twhen [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV'  ",
              "\twhen [Milestone] like'%ES0%' then 'ES0' when [Milestone] like'%ES1%' then 'ES1' when [Milestone] like'%ES2%' then 'ES2' when [Milestone] like'%QS%' then 'QS'",
              "\telse [Milestone] end as [SOC Drop],",
              "\tcase  when [SOC Drop] = 'POPL2' then 1 when [SOC Drop] = 'POPL3' then 5",
              "\twhen [SOC Drop] = 'Tape In' then 10 when [SOC Drop] = 'Power On' then 20 ",
              "\twhen [SOC Drop] = 'ES0' then 23 when [SOC Drop] = 'ES1' then 25 when [SOC Drop] = 'ES2' then 27 ",
              "\twhen [SOC Drop] = 'QS' then 30 when [SOC Drop] = 'PRQ' then 35  ",
              "\twhen [SOC Drop] = 'Alpha' then 40 when [SOC Drop] = 'Beta' then 45 when [SOC Drop] = 'PV' then 50  else 70 end as [SOC Drop order],",
              "\tcase  when [SOC Drop] = 'POPL2' then '#00C7FD' when [SOC Drop] = 'POPL3' then '#0068B5'",
              "\twhen [SOC Drop] = 'Tape In' then '#8BAE46' when [SOC Drop] = 'Power On' then '#E96115' ",
              "\twhen [SOC Drop] = 'ES0' then '#58eb34'  when [SOC Drop] = 'ES1' then '#3499eb'  when [SOC Drop] = 'ES2' then '#6b34eb'  ",
              "\twhen [SOC Drop] = 'QS' then '#eb8934'  when [SOC Drop] = 'PRQ' then '#FEC91B'  ",
              "\twhen [SOC Drop] = 'Alpha' then '#FEC91B' when [SOC Drop] = 'Beta' then '#FEC91B' when [SOC Drop] = 'PV' then '#FEC91B'  else '#E9E9E9' end as [SOC Drop color],",
              "\tisnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as [SOC Date YYYYWW],",
              "\tisnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "\tisnull([Actual Finish],[POR])as [Actual Finish (POR)],",
              "\tisnull([Actual Finish YYYYWW],[POR YYYYWW])as [Actual Finish (POR) YYYYWW],",
              "\t[Actual Finish YYYYWW],[Trend YYYYWW],[POR YYYYWW],[Drive To YYYYWW] as [DriveTo YYYYWW],",
              "\t[Actual Finish],[Trend],[POR],[DriveTo],",
              "\tdatepart(year,[Actual Finish])+'Q'+datepart(quarter,[Actual Finish])as [Actual Finish Quarter],",
              "\tdatepart(year,[Trend])+'Q'+datepart(quarter,[Trend])as [Trend Quarter],",
              "\tdatepart(year,[POR])+'Q'+datepart(quarter,[POR])as [POR Quarter],",
              "\tdatepart(year,[DriveTo])+'Q'+datepart(quarter,[DriveTo])as [DriveTo Quarter],",
              "\tcase when [POR YYYYWW] > 0 and [Trend YYYYWW]> 0 then cast([POR YYYYWW]as int)-cast([Trend YYYYWW]as int) else null end as [Trend Offset],",
              "\tcase when [POR YYYYWW] > 0 and [Actual Finish YYYYWW]> 0 then cast([POR YYYYWW]as int) -cast([Actual Finish YYYYWW]as int) else null end as [Actual Finish Offset],",
              "\tcase when [Trend Offset] in (-2,-3) then 1 when [Trend Offset] < -3 then 2 else 0 end as [Trend is Late],",
              "\tcase when [Actual Finish Offset] in (-2,-3) then 1 when [Actual Finish Offset] < -3 then 2 else 0 end as [Actual Finish is Late],",
              "\tcase when [Actual Finish YYYYWW] > 0 then 1 when [Trend Offset] < 0 then 2 else 3 end as [testchip_color_coding],",
              "\tcase when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "\twhere [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\tand [Milestone] not like '%Candidate/Pre%'",
              "\tand ([Milestone] in ('POPL2','POPL3') or[Milestone] like'%Tape In%' or[Milestone] like'%Power On Start%' or [Milestone] like'%PRQ%' ",
              "\tor [Milestone] like'%platform Alpha%' or [Milestone] like'%platform Beta%' or [Milestone] like'%platform PV%'",
              "\tor [Milestone] like'%ES0%' or [Milestone] like'%ES1%' or [Milestone] like'%ES2%' or [Milestone] like'%QS%')",
              "\t) as soc_dates",
              "on ",
              "(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] in ('POPL2','POPL3','Tape In')) or ",
              "(bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ','ES0', 'ES1','ES2', 'QS')) or ",
              "(bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')) ",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "die_silicon_platform_key",
        "isHidden": true,
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SiProductItemCd",
            "dataType": "int64",
            "sourceColumn": "SiProductItemCd",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SecondLvlPlatformConfigID",
            "dataType": "int64",
            "sourceColumn": "SecondLvlPlatformConfigID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
            "dataType": "string",
            "sourceColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "die_silicon_platform_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "bom.[DieID],bom.[SiProductItemCd],bom.[SecondLvlPlatformConfigID],",
                "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID]",
                "from",
                "\t(select  [DieID],[SiProductItemCd],[SecondLvlPlatformConfigID],[DieStatus]",
                "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "bom.[DieID],bom.[SiProductItemCd],bom.[SecondLvlPlatformConfigID],",
                  "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID]",
                  "from",
                  "\t(select  [DieID],[SiProductItemCd],[SecondLvlPlatformConfigID],[DieStatus]",
                  "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
                  "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "bom.[DieID],bom.[SiProductItemCd],bom.[SecondLvlPlatformConfigID],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID]",
              "from",
              "\t(select  [DieID],[SiProductItemCd],[SecondLvlPlatformConfigID],[DieStatus]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "die_silicon_platform_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "bom.[DieID],bom.[SiProductItemCd],bom.[SecondLvlPlatformConfigID],",
              "isnull(bom.[DieID],'') +', '+isnull(bom.[SiProductItemCd],'') +', '+isnull(bom.[SecondLvlPlatformConfigID],'')as [DieID, SiProductItemCd, SecondLvlPlatformConfigID]",
              "from",
              "\t(select  [DieID],[SiProductItemCd],[SecondLvlPlatformConfigID],[DieStatus]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' ) as bom",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_milestone_data_with_dates",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sortByColumn": "Drop order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendYYYYWW (PorYYYYWW)",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW (PorYYYYWW)",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop order",
            "dataType": "int64",
            "sourceColumn": "Drop order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop color",
            "dataType": "string",
            "sourceColumn": "Drop color",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is standard drop",
            "dataType": "int64",
            "sourceColumn": "is standard drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is late",
            "dataType": "int64",
            "sourceColumn": "is late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop case",
            "dataType": "int64",
            "sourceColumn": "drop case",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Year",
            "dataType": "int64",
            "sourceColumn": "Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Quarter",
            "dataType": "string",
            "sourceColumn": "Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW",
            "sortByColumn": "YY'WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WW start date",
            "dataType": "dateTime",
            "sourceColumn": "WW start date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "YY'WW",
            "dataType": "string",
            "sourceColumn": "YY'WW",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "is ww of drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([TrendYYYYWW (PorYYYYWW)]= [WW],1,0)"
          },
          {
            "name": "is relevant ww",
            "dataType": "int64",
            "sourceColumn": "is relevant ww"
          },
          {
            "type": "calculated",
            "name": "Drop with space",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ip_milestone_data_with_dates[is ww of drop] =1, [Drop] & [Drop label], ",
              "IF(ip_milestone_data_with_dates[is relevant ww] =1, \"\",",
              "IF(ip_milestone_data_with_dates[is current WW] =1, \"\"",
              ")))"
            ]
          },
          {
            "name": "is 1 week late",
            "dataType": "int64",
            "sourceColumn": "is 1 week late"
          },
          {
            "name": "is 2 or more weeks late",
            "dataType": "int64",
            "sourceColumn": "is 2 or more weeks late"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IpConfigurationId]&\", \"&[ww]"
          },
          {
            "name": "is future drop",
            "dataType": "int64",
            "sourceColumn": "is future drop"
          },
          {
            "name": "current WW",
            "dataType": "int64",
            "sourceColumn": "current WW"
          },
          {
            "name": "is current WW",
            "dataType": "int64",
            "sourceColumn": "is current WW"
          },
          {
            "type": "calculated",
            "name": "Drop color with current ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is current WW] =1, \"#BEBEBE\", [Drop color])"
          },
          {
            "type": "calculated",
            "name": "Is gap milestone",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(  [PorYYYYWW]<= [WW] && ",
              "[WW] <= [current WW] &&",
              "([Is complete] =0 || ( [is late] =1 && [TrendYYYYWW] > [WW] ))",
              ",1,0)"
            ]
          },
          {
            "name": "is complete",
            "dataType": "int64",
            "sourceColumn": "is complete"
          },
          {
            "name": "Drop label",
            "dataType": "string",
            "sourceColumn": "Drop label"
          },
          {
            "name": "drop matrix order",
            "dataType": "int64",
            "sourceColumn": "drop matrix order"
          },
          {
            "name": "is stale",
            "dataType": "int64",
            "sourceColumn": "is stale"
          },
          {
            "type": "calculated",
            "name": "Delta view color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is stale] =1,\"#00C7FD\",",
              "IF([Trend Offset] = -1, \"#FEC91B\",",
              "IF([Trend Offset] < -1, \"#C81326\",",
              "\"#708541\")))"
            ]
          },
          {
            "name": "LeadProduct",
            "dataType": "string",
            "sourceColumn": "LeadProduct"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse"
          },
          {
            "type": "calculated",
            "name": "drop_details_color_code",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is stale] = 1, 4,",
              "IF([is 2 or more weeks late]=1,3,",
              "IF([is late]=1,2,",
              "1",
              ")))"
            ]
          },
          {
            "type": "calculated",
            "name": "Stale?",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is stale]=1, \"Yes\", \"No\")"
          },
          {
            "type": "calculated",
            "name": "late_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is 2 or more weeks late]=1,\"Late\",",
              "IF([is late]=1,\"One week late\",",
              "IF([is missing trend or por]=1,\"Missing Trend/ POR\",",
              "\"On time\"",
              ")))"
            ],
            "sortByColumn": "late_legend_int"
          },
          {
            "type": "calculated",
            "name": "is missing trend or por",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(NOT([TrendYYYYWW]>0) || NOT([PorYYYYWW]>0),1,0)"
          },
          {
            "type": "calculated",
            "name": "late_legend_int",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([is 2 or more weeks late]=1,4,",
              "IF([is late]=1,3,",
              "IF([is missing trend or por]=1,2,",
              "1",
              ")))"
            ]
          },
          {
            "type": "calculated",
            "name": "YearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Year]&[Quarter]"
          },
          {
            "type": "calculated",
            "name": "carbon_milestone_link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "project_view_drop_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Drop Legend\""
          },
          {
            "type": "calculated",
            "name": "is_missing_using_releases",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([UsingProducts] = \"\" || [UsingProductsSummary] = \"\",1,0)",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "ip_milestone_data_with_dates",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select *,",
                " case when milestone.[is late] =0 and milestone.[drop case]=1 and milestone.[TrendYYYYWW] <= ww.[WW] and milestone.[PorYYYYWW] >= ww.[WW] then 1",
                " when milestone.[is late] =1 and milestone.[drop case]=1 and milestone.[PorYYYYWW] <= ww.[WW] and  milestone.[TrendYYYYWW]>= ww.[WW]then 1",
                " when milestone.[drop case]=2 and   milestone.[TrendYYYYWW] = ww.[WW] then 1",
                " when milestone.[drop case]=3 and   milestone.[PorYYYYWW]  = ww.[WW] then 1",
                "else 0 end as [is relevant ww]",
                "from",
                "\t(select  distinct ",
                "\t[IpConfigurationId],[Configuration],[MilestoneId],",
                "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "\t[LeadProduct],[Reuse],",
                "\t[UsingProductsSummary],[UsingProducts],",
                "\t[Revision],[Drop],[Complete],[DropType],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffset] as int) as [Trend Offset],",
                "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5  when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                "\t when [Drop] like '%(IC)%'  then 30 when [Drop] like '%(IE)%'  then 35  when [Drop] like '%EV%' then 40 when [Drop] like '%UV%' then 50  when [Drop] = 'eFV' then 60 when [Drop] = 'FV' then 70 ",
                "\telse 100 end as [Drop order],",
                "\tcase when [Drop] = 'RTL0P5' then '#00C7FD' ",
                "\t\twhen [Drop] = 'RTL0P8' then '#3e7ee4' ",
                "\t\twhen [Drop] = 'RTL1P0' then '#ade4ad'",
                "\t\twhen [Drop] = 'POLO' then '#FEC91B' ",
                "\t\twhen [Drop] = 'PROD' then '#9776b0'",
                "\t\twhen [Drop] = 'FV' then '#eee778' ",
                "\t\twhen [Drop] = 'RTL1P1' then '#85C191'",
                "\t\twhen [Drop] = 'eFV' then '#DB9B80' ",
                "\t\twhen [Drop] = 'RTL0P0' then '#FAA916' ",
                "\t\twhen [Drop] = 'RTL0P3' then '#DBAD6A' ",
                "\t\twhen [Drop] = 'UV' then '#65cdc4' ",
                "\t\twhen [Drop] = 'UV1' then '#5293A3'",
                "\t\twhen [Drop] = 'UV2' then '#4ebccf' ",
                "\t\twhen [Drop] = 'EV1' then '#7161EF'",
                "\t\twhen [Drop] = 'EV2' then '#957FEF' ",
                "\t\twhen [Drop] = 'IP Execution Commit (IE)' then '#FFE6C2'",
                "\t\twhen [Drop] = 'IP Architecture Complete (IAC)' then '#FFF7B2'",
                "\t\twhen [Drop] = 'IP Concept (IC)' then '#F7E1D8' ",
                "\t\telse '#56ffcc' ",
                "\tend as [Drop color],",
                "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                "\tcase when [DropType] like '%Standard%' then '' when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'  then 'hf' when [DropType] like '%Early%' then 'e'",
                "\twhen [DropType] like '%PCR%' then 'p' when [DropType] like '%TechnologyChange%' then 't'when [DropType] like '%Side Drop%' or [DropType] like '%Patch%'  then 's' else '' end as [Drop label] ,",
                "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
                "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is future drop],",
                "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order]",
                "\tfrom  [V_IPG_CARBON_MILESTONE]",
                "\twhere [DevOrg] ='IPG' ",
                "\tand [Visible] = 'Yes') as milestone",
                "full join",
                "\t(select distinct  ",
                "\t[Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                "\t[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                "\tright([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                "\tdatepart(ww,dateadd(year,0,getdate())) as [current WW],",
                "\tcase when [Intel Year-Work Week] = datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is current WW]",
                "\tfrom  [v_ipg_calendar]",
                "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-5,getdate()))  and  datepart(ww,dateadd(year,5,getdate())) ",
                "\t) as ww",
                "on  1=1",
                "where [is relevant ww]=1 or ( /*milestone.[drop case]=4 and*/ ww.[is current WW]=1)"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
                  " case when milestone.[is late] =0 and milestone.[drop case]=1 and milestone.[TrendYYYYWW] <= ww.[WW] and milestone.[PorYYYYWW] >= ww.[WW] then 1",
                  " when milestone.[is late] =1 and milestone.[drop case]=1 and milestone.[PorYYYYWW] <= ww.[WW] and  milestone.[TrendYYYYWW]>= ww.[WW]then 1",
                  " when milestone.[drop case]=2 and   milestone.[TrendYYYYWW] = ww.[WW] then 1",
                  " when milestone.[drop case]=3 and   milestone.[PorYYYYWW]  = ww.[WW] then 1",
                  "else 0 end as [is relevant ww]",
                  "from",
                  "\t(select  distinct ",
                  "\t[IpConfigurationId],[Configuration],[MilestoneId],",
                  "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "\t[LeadProduct],[Reuse],",
                  "\t[UsingProductsSummary],[UsingProducts],",
                  "\t[Revision],[Drop],[Complete],[DropType],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffset] as int) as [Trend Offset],",
                  "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                  "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5  when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                  "\t when [Drop] like '%(IC)%'  then 30 when [Drop] like '%(IE)%'  then 35  when [Drop] like '%EV%' then 40 when [Drop] like '%UV%' then 50  when [Drop] = 'eFV' then 60 when [Drop] = 'FV' then 70 ",
                  "\telse 100 end as [Drop order],",
                  "\tcase when [Drop] = 'RTL0P5' then '#00C7FD' ",
                  "\t\twhen [Drop] = 'RTL0P8' then '#3e7ee4' ",
                  "\t\twhen [Drop] = 'RTL1P0' then '#ade4ad'",
                  "\t\twhen [Drop] = 'POLO' then '#FEC91B' ",
                  "\t\twhen [Drop] = 'PROD' then '#9776b0'",
                  "\t\twhen [Drop] = 'FV' then '#eee778' ",
                  "\t\twhen [Drop] = 'RTL1P1' then '#85C191'",
                  "\t\twhen [Drop] = 'eFV' then '#DB9B80' ",
                  "\t\twhen [Drop] = 'RTL0P0' then '#FAA916' ",
                  "\t\twhen [Drop] = 'RTL0P3' then '#DBAD6A' ",
                  "\t\twhen [Drop] = 'UV' then '#65cdc4' ",
                  "\t\twhen [Drop] = 'UV1' then '#5293A3'",
                  "\t\twhen [Drop] = 'UV2' then '#4ebccf' ",
                  "\t\twhen [Drop] = 'EV1' then '#7161EF'",
                  "\t\twhen [Drop] = 'EV2' then '#957FEF' ",
                  "\t\twhen [Drop] = 'IP Execution Commit (IE)' then '#FFE6C2'",
                  "\t\twhen [Drop] = 'IP Architecture Complete (IAC)' then '#FFF7B2'",
                  "\t\twhen [Drop] = 'IP Concept (IC)' then '#F7E1D8' ",
                  "\t\telse '#56ffcc' ",
                  "\tend as [Drop color],",
                  "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                  "\tcase when [DropType] like '%Standard%' then '' when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'  then 'hf' when [DropType] like '%Early%' then 'e'",
                  "\twhen [DropType] like '%PCR%' then 'p' when [DropType] like '%TechnologyChange%' then 't'when [DropType] like '%Side Drop%' or [DropType] like '%Patch%'  then 's' else '' end as [Drop label] ,",
                  "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
                  "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                  "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is future drop],",
                  "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                  "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                  "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                  "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order]",
                  "\tfrom  [V_IPG_CARBON_MILESTONE]",
                  "\twhere [DevOrg] ='IPG' ",
                  "\tand [Visible] = 'Yes') as milestone",
                  "full join",
                  "\t(select distinct  ",
                  "\t[Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                  "\t[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                  "\tright([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                  "\tdatepart(ww,dateadd(year,0,getdate())) as [current WW],",
                  "\tcase when [Intel Year-Work Week] = datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is current WW]",
                  "\tfrom  [v_ipg_calendar]",
                  "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-5,getdate()))  and  datepart(ww,dateadd(year,5,getdate())) ",
                  "\t) as ww",
                  "on  1=1",
                  "where [is relevant ww]=1 or ( /*milestone.[drop case]=4 and*/ ww.[is current WW]=1)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "First no blank drop",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(ip_milestone_data_with_dates[Drop with space]),[Drop with space], UNICHAR(10),[Drop with space],ASC),",
              "FILTER(ALL(ip_milestone_data_with_dates[is relevant ww]), ip_milestone_data_with_dates[is relevant ww]=1),",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ")"
            ]
          },
          {
            "name": "First no blank drop color",
            "expression": [
              "",
              "CALCULATE(",
              "FIRSTNONBLANK(ip_milestone_data_with_dates[Drop color with current ww],[Drop color with current ww]),",
              "FILTER(ALL(ip_milestone_data_with_dates[is relevant ww]), ip_milestone_data_with_dates[is relevant ww]=1)",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ") ",
              ""
            ]
          },
          {
            "name": "First no blank is late",
            "expression": [
              "",
              "CALCULATE(FIRSTNONBLANK(ip_milestone_data_with_dates[is late],[is late]),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]), ip_milestone_data_with_dates[is ww of drop]=1),",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ") "
            ]
          },
          {
            "name": "Cumulative plan",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId]),",
              "ALL(dates[WW]),",
              "FILTER(ALL(ip_milestone_data_with_dates[PorYYYYWW]),ip_milestone_data_with_dates[PorYYYYWW]<= max(dates[WW])),",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]), ip_milestone_data_with_dates[is ww of drop]=1)",
              ")"
            ]
          },
          {
            "name": "Cumulative actual",
            "expression": [
              "0+",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId]),",
              "ALL(dates[WW]),",
              "FILTER(ALL(ip_milestone_data_with_dates[Complete]),ip_milestone_data_with_dates[Complete]=\"Yes\"),",
              "FILTER(ALL(ip_milestone_data_with_dates[TrendYYYYWW]),ip_milestone_data_with_dates[TrendYYYYWW]<= max(dates[WW])),",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]), ip_milestone_data_with_dates[is ww of drop]=1)",
              ")"
            ]
          },
          {
            "name": "Cumulative actual RTL0P5",
            "expression": [
              "",
              "CALCULATE([Cumulative actual],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL0P5\")",
              ")"
            ]
          },
          {
            "name": "Cumulative actual RTL0P8",
            "expression": [
              "",
              "CALCULATE([Cumulative actual],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL0P8\")",
              ")"
            ]
          },
          {
            "name": "Cumulative actual RTL1P0",
            "expression": [
              "",
              "CALCULATE([Cumulative actual],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL1P0\")",
              ")"
            ]
          },
          {
            "name": "Cumulative actual POLO",
            "expression": [
              "",
              "CALCULATE([Cumulative actual],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"POLO\")",
              ")"
            ]
          },
          {
            "name": "Cumulative actual PROD",
            "expression": [
              "",
              "CALCULATE([Cumulative actual],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"PROD\")",
              ")"
            ]
          },
          {
            "name": "Cumulative plan RTL0P5",
            "expression": [
              "",
              "CALCULATE([Cumulative plan],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL0P5\")",
              ")"
            ]
          },
          {
            "name": "Cumulative plan RTL0P8",
            "expression": [
              "",
              "CALCULATE([Cumulative plan],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL0P8\")",
              ")"
            ]
          },
          {
            "name": "Cumulative plan RTL1P0",
            "expression": [
              "",
              "CALCULATE([Cumulative plan],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"RTL1P0\")",
              ")"
            ]
          },
          {
            "name": "Cumulative plan POLO",
            "expression": [
              "",
              "CALCULATE([Cumulative plan],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\"POLO\")",
              ")"
            ]
          },
          {
            "name": "Cumulative plan PROD",
            "expression": [
              "",
              "CALCULATE([Cumulative plan],",
              "FILTER(ALL(ip_milestone_data_with_dates[Drop]),ip_milestone_data_with_dates[Drop]=\" PROD\")",
              ")"
            ]
          },
          {
            "name": "First no blank drop color with current ww color",
            "expression": [
              "",
              "LEFT([First no blank drop color]&\",#BEBEBE\",7)",
              "",
              ""
            ]
          },
          {
            "name": "First no blank drop with current ww",
            "expression": [
              " [First no blank drop] & [current ww value]",
              ""
            ]
          },
          {
            "name": "current ww value",
            "expression": [
              "",
              "IF(MAX(ip_milestone_data_with_dates[is current WW])  = 1, \" \")"
            ]
          },
          {
            "name": "Trend AGG NewLine",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(ip_milestone_data_with_dates,[TrendYYYYWW], UNICHAR (10) ,ip_milestone_data_with_dates[MilestoneId] ,ASC),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1)",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1)",
              ") "
            ]
          },
          {
            "name": "POR AGG NewLine",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(ip_milestone_data_with_dates,[porYYYYWW], UNICHAR (10) ,ip_milestone_data_with_dates[MilestoneId] ,ASC),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1)",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1)",
              ") "
            ]
          },
          {
            "name": "Trend Offset AGG NewLine",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(ip_milestone_data_with_dates,[Trend Offset], UNICHAR (10) ,ip_milestone_data_with_dates[MilestoneId] ,ASC),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1)",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1)",
              ") ",
              ""
            ]
          },
          {
            "name": "Count of milestones",
            "expression": [
              "0+",
              "CALCULATE( DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId]) ,",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1),",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1)",
              ") "
            ]
          },
          {
            "name": "Count of milestones - ignore drop column",
            "expression": [
              "0+",
              "CALCULATE( DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId]) ,",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1),",
              "FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1),",
              "ALL(ip_milestone_data_with_dates[Drop])",
              ") "
            ]
          },
          {
            "name": "Count of drops with_dates",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId])",
              " )"
            ]
          },
          {
            "name": "Count of completed drops with_dates",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(ip_milestone_data_with_dates[MilestoneId]),",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]),ip_milestone_data_with_dates[is ww of drop]=1),",
              "-- FILTER(ALL(ip_soc_mapping[is related milestone]),ip_soc_mapping[is related milestone]=1),",
              "FILTER(ALL(ip_milestone_data_with_dates[Complete]),ip_milestone_data_with_dates[Complete]=\"Yes\")",
              " )"
            ]
          },
          {
            "name": "Count of completed on time drops with_dates",
            "expression": [
              "",
              "CALCULATE([Count of completed drops with_dates],",
              "FILTER(ALL(ip_milestone_data_with_dates[is late]),ip_milestone_data_with_dates[is late]=0 && NOT(ISBLANK(ip_milestone_data_with_dates[is late]))),",
              "FILTER(ALL(ip_milestone_data_with_dates[is missing trend or por]),ip_milestone_data_with_dates[is missing trend or por]=0 && NOT(ISBLANK(ip_milestone_data_with_dates[is missing trend or por])))",
              " )"
            ]
          },
          {
            "name": "Count of completed late drops with_dates",
            "expression": [
              "",
              "CALCULATE([Count of completed drops with_dates],",
              "FILTER(ALL(ip_milestone_data_with_dates[is 2 or more weeks late]),ip_milestone_data_with_dates[is 2 or more weeks late]=1)",
              " )"
            ]
          },
          {
            "name": "Count of completed late drops with % with_dates",
            "expression": [
              " IF([Count of completed late drops with_dates] >0,",
              "[Count of completed late drops with_dates]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed late drops with_dates],[Count of completed drops with_dates],0) , \"0%\")",
              " &\")\"",
              " )"
            ]
          },
          {
            "name": "Count of completed on time drops with % with_dates",
            "expression": [
              " IF([Count of completed on time drops with_dates]>0,",
              "[Count of completed on time drops with_dates]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed on time drops with_dates],[Count of completed drops with_dates],0) , \"0%\")",
              " &\")\"",
              " )"
            ]
          },
          {
            "name": "Count of completed 1 week late drops with_dates",
            "expression": [
              "",
              "CALCULATE([Count of completed drops with_dates],",
              "FILTER(ALL(ip_milestone_data_with_dates[is 1 week late]),ip_milestone_data_with_dates[is 1 week late]=1)",
              " )"
            ]
          },
          {
            "name": "Count of completed 1 week late drops with % with_dates",
            "expression": [
              " IF([Count of completed 1 week late drops with_dates]>0,",
              "[Count of completed 1 week late drops with_dates]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed 1 week late drops with_dates],[Count of completed drops with_dates],0) , \"0%\")",
              " &\")\"",
              " )"
            ]
          },
          {
            "name": "Count of completed missing trend or por drops with_dates",
            "expression": [
              "",
              "CALCULATE([Count of completed drops with_dates],",
              "FILTER(ALL(ip_milestone_data_with_dates[is missing trend or por]),ip_milestone_data_with_dates[is missing trend or por]=1)",
              " )",
              ""
            ]
          },
          {
            "name": "Count of completed missing trend or por drops with % with_dates",
            "expression": [
              " IF([Count of completed missing trend or por drops with_dates]>0,",
              "[Count of completed missing trend or por drops with_dates]",
              " &\" (\"& ",
              " FORMAT( DIVIDE([Count of completed missing trend or por drops with_dates],[Count of completed drops with_dates],0) , \"0%\")",
              " &\")\"",
              " )"
            ]
          },
          {
            "name": "complete_legend",
            "expression": [
              "",
              "IF(FIRSTNONBLANK(ip_milestone_data_with_dates[Complete],[Complete]) = \"Yes\",1,0)"
            ]
          },
          {
            "name": "First no blank is complete",
            "expression": [
              "",
              "CALCULATE(FIRSTNONBLANK(ip_milestone_data_with_dates[is complete], [is complete]), ",
              "FILTER(ALL(ip_milestone_data_with_dates[is ww of drop]), ip_milestone_data_with_dates[is ww of drop]=1),",
              "--FILTER(ALL(ip_soc_mapping[is related milestone]), ip_soc_mapping[is related milestone]=1)",
              ")"
            ]
          },
          {
            "name": "trend agg no dups",
            "expression": [
              "",
              "CALCULATE (",
              "    CONCATENATEX (",
              "        SUMMARIZE (",
              "            ip_milestone_data_with_dates,",
              "            ip_milestone_data_with_dates[TrendYYYYWW],",
              "            ip_milestone_data_with_dates[MilestoneId]",
              "        ),",
              "        [trendYYYYWW],",
              "        UNICHAR ( 10 ),",
              "        ip_milestone_data_with_dates[MilestoneId], ASC",
              "    ),",
              "    FILTER (",
              "        ALL ( ip_milestone_data_with_dates[is ww of drop] ),",
              "        ip_milestone_data_with_dates[is ww of drop] = 1",
              "    )",
              ")",
              "/* This measure is created to because of bad relationship between tables that are a little bit tricky to change now, basically the connection between milestone_data and milesone_data_with_dates is based on milestoneid only, ",
              "because configuration/configurationid (it should be the id, in practice the config name is used in the uniqe key and it's unclear why). This relaship creates a duplication of each milestone as the number of configs it connected to in SOC Schedule / Delta View. ",
              "This measure is meant to handle those dups without breaking connection that other dashboards may relay on */"
            ]
          },
          {
            "name": "por agg no dups",
            "expression": [
              "",
              "CALCULATE (",
              "    CONCATENATEX (",
              "        SUMMARIZE (",
              "            ip_milestone_data_with_dates,",
              "            ip_milestone_data_with_dates[PORYYYYWW],",
              "            ip_milestone_data_with_dates[MilestoneId]",
              "        ),",
              "        [PORYYYYWW],",
              "        UNICHAR ( 10 ),",
              "        ip_milestone_data_with_dates[MilestoneId], ASC",
              "    ),",
              "    FILTER (",
              "        ALL ( ip_milestone_data_with_dates[is ww of drop] ),",
              "        ip_milestone_data_with_dates[is ww of drop] = 1",
              "    )",
              ")",
              "/* This measure is created to because of bad relationship between tables that are a little bit tricky to change now, basically the connection between milestone_data and milesone_data_with_dates is based on milestoneid only, ",
              "because configuration/configurationid (it should be the id, in practice the config name is used in the uniqe key and it's unclear why). This relaship creates a duplication of each milestone as the number of configs it connected to in SOC Schedule / Delta View. ",
              "This measure is meant to handle those dups without breaking connection that other dashboards may relay on */"
            ]
          },
          {
            "name": "trend offset agg no dups",
            "expression": [
              "",
              "CALCULATE (",
              "    CONCATENATEX (",
              "        SUMMARIZE (",
              "            ip_milestone_data_with_dates,",
              "            ip_milestone_data_with_dates[Trend Offset],",
              "            ip_milestone_data_with_dates[MilestoneId]",
              "        ),",
              "       [Trend Offset],",
              "        UNICHAR ( 10 ),",
              "        ip_milestone_data_with_dates[MilestoneId], ASC",
              "    ),",
              "    FILTER (",
              "        ALL ( ip_milestone_data_with_dates[is ww of drop] ),",
              "        ip_milestone_data_with_dates[is ww of drop] = 1",
              "    )",
              ")",
              "/* This measure is created to because of bad relationship between tables that are a little bit tricky to change now, basically the connection between milestone_data and milesone_data_with_dates is based on milestoneid only, ",
              "because configuration/configurationid (it should be the id, in practice the config name is used in the uniqe key and it's unclear why). This relaship creates a duplication of each milestone as the number of configs it connected to in SOC Schedule / Delta View. ",
              "This measure is meant to handle those dups without breaking connection that other dashboards may relay on */"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select *,",
              " case when milestone.[is late] =0 and milestone.[drop case]=1 and milestone.[TrendYYYYWW] <= ww.[WW] and milestone.[PorYYYYWW] >= ww.[WW] then 1",
              " when milestone.[is late] =1 and milestone.[drop case]=1 and milestone.[PorYYYYWW] <= ww.[WW] and  milestone.[TrendYYYYWW]>= ww.[WW]then 1",
              " when milestone.[drop case]=2 and   milestone.[TrendYYYYWW] = ww.[WW] then 1",
              " when milestone.[drop case]=3 and   milestone.[PorYYYYWW]  = ww.[WW] then 1",
              "else 0 end as [is relevant ww]",
              "from",
              "\t(select  distinct ",
              "\t[IpConfigurationId],[Configuration],[MilestoneId],",
              "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "\t[LeadProduct],[Reuse],",
              "\t[UsingProductsSummary],[UsingProducts],",
              "\t[Revision],[Drop],[Complete],[DropType],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffset] as int) as [Trend Offset],",
              "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5  when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "\t when [Drop] like '%(IC)%'  then 30 when [Drop] like '%(IE)%'  then 35  when [Drop] like '%EV%' then 40 when [Drop] like '%UV%' then 50  when [Drop] = 'eFV' then 60 when [Drop] = 'FV' then 70 ",
              "\telse 100 end as [Drop order],",
              "\tcase when [Drop] = 'RTL0P5' then '#00C7FD' ",
              "\t\twhen [Drop] = 'RTL0P8' then '#3e7ee4' ",
              "\t\twhen [Drop] = 'RTL1P0' then '#ade4ad'",
              "\t\twhen [Drop] = 'POLO' then '#FEC91B' ",
              "\t\twhen [Drop] = 'PROD' then '#9776b0'",
              "\t\twhen [Drop] = 'FV' then '#eee778' ",
              "\t\twhen [Drop] = 'RTL1P1' then '#85C191'",
              "\t\twhen [Drop] = 'eFV' then '#DB9B80' ",
              "\t\twhen [Drop] = 'RTL0P0' then '#FAA916' ",
              "\t\twhen [Drop] = 'RTL0P3' then '#DBAD6A' ",
              "\t\twhen [Drop] = 'UV' then '#65cdc4' ",
              "\t\twhen [Drop] = 'UV1' then '#5293A3'",
              "\t\twhen [Drop] = 'UV2' then '#4ebccf' ",
              "\t\twhen [Drop] = 'EV1' then '#7161EF'",
              "\t\twhen [Drop] = 'EV2' then '#957FEF' ",
              "\t\twhen [Drop] = 'IP Execution Commit (IE)' then '#FFE6C2'",
              "\t\twhen [Drop] = 'IP Architecture Complete (IAC)' then '#FFF7B2'",
              "\t\twhen [Drop] = 'IP Concept (IC)' then '#F7E1D8' ",
              "\t\telse '#56ffcc' ",
              "\tend as [Drop color],",
              "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "\tcase when [DropType] like '%Standard%' then '' when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'  then 'hf' when [DropType] like '%Early%' then 'e'",
              "\twhen [DropType] like '%PCR%' then 'p' when [DropType] like '%TechnologyChange%' then 't'when [DropType] like '%Side Drop%' or [DropType] like '%Patch%'  then 's' else '' end as [Drop label] ,",
              "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
              "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is future drop],",
              "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG' ",
              "\tand [Visible] = 'Yes') as milestone",
              "full join",
              "\t(select distinct  ",
              "\t[Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "\t[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "\tright([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "\tdatepart(ww,dateadd(year,0,getdate())) as [current WW],",
              "\tcase when [Intel Year-Work Week] = datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is current WW]",
              "\tfrom  [v_ipg_calendar]",
              "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-5,getdate()))  and  datepart(ww,dateadd(year,5,getdate())) ",
              "\t) as ww",
              "on  1=1",
              "where [is relevant ww]=1 or ( /*milestone.[drop case]=4 and*/ ww.[is current WW]=1)"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_milestone_data_with_dates"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
              " case when milestone.[is late] =0 and milestone.[drop case]=1 and milestone.[TrendYYYYWW] <= ww.[WW] and milestone.[PorYYYYWW] >= ww.[WW] then 1",
              " when milestone.[is late] =1 and milestone.[drop case]=1 and milestone.[PorYYYYWW] <= ww.[WW] and  milestone.[TrendYYYYWW]>= ww.[WW]then 1",
              " when milestone.[drop case]=2 and   milestone.[TrendYYYYWW] = ww.[WW] then 1",
              " when milestone.[drop case]=3 and   milestone.[PorYYYYWW]  = ww.[WW] then 1",
              "else 0 end as [is relevant ww]",
              "from",
              "\t(select  distinct ",
              "\t[IpConfigurationId],[Configuration],[MilestoneId],",
              "\t[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "\t[LeadProduct],[Reuse],",
              "\t[UsingProductsSummary],[UsingProducts],",
              "\t[Revision],[Drop],[Complete],[DropType],[TrendYYYYWW],[TrendExactDate],[PorYYYYWW],[PorExactDate],cast([TrendOffset] as int) as [Trend Offset],",
              "\tisnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "\tcase when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5  when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "\t when [Drop] like '%(IC)%'  then 30 when [Drop] like '%(IE)%'  then 35  when [Drop] like '%EV%' then 40 when [Drop] like '%UV%' then 50  when [Drop] = 'eFV' then 60 when [Drop] = 'FV' then 70 ",
              "\telse 100 end as [Drop order],",
              "\tcase when [Drop] = 'RTL0P5' then '#00C7FD' ",
              "\t\twhen [Drop] = 'RTL0P8' then '#3e7ee4' ",
              "\t\twhen [Drop] = 'RTL1P0' then '#ade4ad'",
              "\t\twhen [Drop] = 'POLO' then '#FEC91B' ",
              "\t\twhen [Drop] = 'PROD' then '#9776b0'",
              "\t\twhen [Drop] = 'FV' then '#eee778' ",
              "\t\twhen [Drop] = 'RTL1P1' then '#85C191'",
              "\t\twhen [Drop] = 'eFV' then '#DB9B80' ",
              "\t\twhen [Drop] = 'RTL0P0' then '#FAA916' ",
              "\t\twhen [Drop] = 'RTL0P3' then '#DBAD6A' ",
              "\t\twhen [Drop] = 'UV' then '#65cdc4' ",
              "\t\twhen [Drop] = 'UV1' then '#5293A3'",
              "\t\twhen [Drop] = 'UV2' then '#4ebccf' ",
              "\t\twhen [Drop] = 'EV1' then '#7161EF'",
              "\t\twhen [Drop] = 'EV2' then '#957FEF' ",
              "\t\twhen [Drop] = 'IP Execution Commit (IE)' then '#FFE6C2'",
              "\t\twhen [Drop] = 'IP Architecture Complete (IAC)' then '#FFF7B2'",
              "\t\twhen [Drop] = 'IP Concept (IC)' then '#F7E1D8' ",
              "\t\telse '#56ffcc' ",
              "\tend as [Drop color],",
              "\tcase when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "\tcase when [DropType] like '%Standard%' then '' when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%'  then 'hf' when [DropType] like '%Early%' then 'e'",
              "\twhen [DropType] like '%PCR%' then 'p' when [DropType] like '%TechnologyChange%' then 't'when [DropType] like '%Side Drop%' or [DropType] like '%Patch%'  then 's' else '' end as [Drop label] ,",
              "\tcase when [Complete] = 'Yes' then 1 else 0 end as [is complete],",
              "\tcase when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "\tcase when [TrendYYYYWW] > datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is future drop],",
              "\t--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "\tcase when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "\twhen [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "\tROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG' ",
              "\tand [Visible] = 'Yes') as milestone",
              "full join",
              "\t(select distinct  ",
              "\t[Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "\t[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "\tright([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "\tdatepart(ww,dateadd(year,0,getdate())) as [current WW],",
              "\tcase when [Intel Year-Work Week] = datepart(ww,dateadd(year,0,getdate())) then 1 else 0 end as [is current WW]",
              "\tfrom  [v_ipg_calendar]",
              "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-5,getdate()))  and  datepart(ww,dateadd(year,5,getdate())) ",
              "\t) as ww",
              "on  1=1",
              "where [is relevant ww]=1 or ( /*milestone.[drop case]=4 and*/ ww.[is current WW]=1)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_ww_key",
        "isHidden": true,
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "IpConfigurationId, WW",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, WW",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "ip_ww_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select *,",
                "[IpConfigurationId]+', ' + [WW] as [IpConfigurationId, WW]",
                "from",
                "\t(select  distinct [IpConfigurationId]",
                "\tfrom  [V_IPG_CARBON_MILESTONE]",
                "\twhere [DevOrg] ='IPG') as milestone",
                "full join",
                "\t(select distinct [Intel Year-Work Week] as [WW]",
                "\tfrom  [V_TIME_DAY]",
                "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                "\t) as ww",
                "on  1=1"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
                  "[IpConfigurationId]+', ' + [WW] as [IpConfigurationId, WW]",
                  "from",
                  "\t(select  distinct [IpConfigurationId]",
                  "\tfrom  [V_IPG_CARBON_MILESTONE]",
                  "\twhere [DevOrg] ='IPG') as milestone",
                  "full join",
                  "\t(select distinct [Intel Year-Work Week] as [WW]",
                  "\tfrom  [V_TIME_DAY]",
                  "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                  "\t) as ww",
                  "on  1=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select *,",
              "[IpConfigurationId]+', ' + [WW] as [IpConfigurationId, WW]",
              "from",
              "\t(select  distinct [IpConfigurationId]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG') as milestone",
              "full join",
              "\t(select distinct [Intel Year-Work Week] as [WW]",
              "\tfrom  [V_TIME_DAY]",
              "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "\t) as ww",
              "on  1=1"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_ww_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
              "[IpConfigurationId]+', ' + [WW] as [IpConfigurationId, WW]",
              "from",
              "\t(select  distinct [IpConfigurationId]",
              "\tfrom  [V_IPG_CARBON_MILESTONE]",
              "\twhere [DevOrg] ='IPG') as milestone",
              "full join",
              "\t(select distinct [Intel Year-Work Week] as [WW]",
              "\tfrom  [V_TIME_DAY]",
              "\twhere [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "\t) as ww",
              "on  1=1</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_soc_dates",
        "isHidden": true,
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "SOC Drop",
            "dataType": "string",
            "sourceColumn": "SOC Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Date YYYYWW",
            "dataType": "string",
            "sourceColumn": "SOC Date YYYYWW",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpConfigurationId, SOCDateYYYYWW",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, SOCDateYYYYWW",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "ip_soc_dates",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  distinct [DieID],[DieName],[IpConfigurationId],[SOC Drop],[SOC Date YYYYWW],",
                "[IpConfigurationId]+', '+[SOC Date YYYYWW] as [IpConfigurationId, SOCDateYYYYWW]",
                "from [ipg_ip_to_soc_flattened]",
                "where [SOC Drop] in ('Tape In')",
                "and[SOC Date YYYYWW] >0",
                "and [IpConfigurationId] is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [DieID],[DieName],[IpConfigurationId],[SOC Drop],[SOC Date YYYYWW],",
                  "[IpConfigurationId]+', '+[SOC Date YYYYWW] as [IpConfigurationId, SOCDateYYYYWW]",
                  "from [ipg_ip_to_soc_flattened]",
                  "where [SOC Drop] in ('Tape In')",
                  "and[SOC Date YYYYWW] >0",
                  "and [IpConfigurationId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "TI",
            "expression": [
              "",
              "CALCULATE(\"TI\",",
              "FILTER(ALL(ip_soc_dates[SOC Drop]),ip_soc_dates[SOC Drop]=\"Tape In\"),",
              "FILTER(ALL(ip_soc_dates[DieName]),ip_soc_dates[DieName]= MAX(soc_data[DieName]))",
              ")"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  distinct [DieID],[DieName],[IpConfigurationId],[SOC Drop],[SOC Date YYYYWW],",
              "[IpConfigurationId]+', '+[SOC Date YYYYWW] as [IpConfigurationId, SOCDateYYYYWW]",
              "from [ipg_ip_to_soc_flattened]",
              "where [SOC Drop] in ('Tape In')",
              "and[SOC Date YYYYWW] >0",
              "and [IpConfigurationId] is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_soc_dates"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [DieID],[DieName],[IpConfigurationId],[SOC Drop],[SOC Date YYYYWW],",
              "[IpConfigurationId]+', '+[SOC Date YYYYWW] as [IpConfigurationId, SOCDateYYYYWW]",
              "from [ipg_ip_to_soc_flattened]",
              "where [SOC Drop] in ('Tape In')",
              "and[SOC Date YYYYWW] >0",
              "and [IpConfigurationId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "release_central_family",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpFamilyId",
            "dataType": "string",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "old IpFamily",
            "dataType": "string",
            "sourceColumn": "old IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProductFamily",
            "dataType": "string",
            "sourceColumn": "ProductFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamily",
            "dataType": "string",
            "sourceColumn": "IpFamily"
          },
          {
            "name": "Gladius",
            "dataType": "string",
            "sourceColumn": "Gladius",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Dev_Lead",
            "dataType": "string",
            "sourceColumn": "Dev_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Product_Owner",
            "dataType": "string",
            "sourceColumn": "Product_Owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Support_Lead",
            "dataType": "string",
            "sourceColumn": "Support_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Architecture_Lead",
            "dataType": "string",
            "sourceColumn": "Architecture_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Program_Manager",
            "dataType": "string",
            "sourceColumn": "Program_Manager",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "ProductFamily without IP",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " SUBSTITUTE([ProductFamily],\"IP\",\"\")"
          },
          {
            "type": "calculated",
            "name": "Product_Owner_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Product_Owner])"
          },
          {
            "type": "calculated",
            "name": "Dev_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Dev_Lead])"
          },
          {
            "type": "calculated",
            "name": "Support_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Support_Lead])"
          },
          {
            "type": "calculated",
            "name": "Architecture_Lead_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Architecture_Lead])"
          },
          {
            "type": "calculated",
            "name": "Program_Manager_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(worker_public[User_Name],worker_public[User_Idsid],[Program_Manager])"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          }
        ],
        "partitions": [
          {
            "name": "release_central_family",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select [id] , [IpFamilyId], ",
                "[old_family]as [old IpFamily], ",
                "[suborg_supplier]as [ProductFamily],",
                "[devsuborg] as [SubOrg],",
                "[ip_supplier]as [Supplier],",
                "[Family] as [IpFamily],   ",
                "[Gladius],",
                "[Description],",
                "[Dev_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
                "from v_ipg_family_gladius"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [id] , [IpFamilyId], ",
                  "[old_family]as [old IpFamily], ",
                  "[suborg_supplier]as [ProductFamily],",
                  "[devsuborg] as [SubOrg],",
                  "[ip_supplier]as [Supplier],",
                  "[Family] as [IpFamily],   ",
                  "[Gladius],",
                  "[Description],",
                  "[Dev_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
                  "from v_ipg_family_gladius</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AGG of ProductFamily",
            "expression": [
              "",
              "CALCULATE(CONCATENATEX(VALUES(release_central_family[ProductFamily without IP]),[ProductFamily without IP], \" | \",[ProductFamily without IP],ASC),",
              "FILTER(ALL(release_central_family[ProductFamily without IP]),NOT(ISBLANK(release_central_family[ProductFamily without IP])))",
              ") "
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select [id] , [IpFamilyId], ",
              "[old_family]as [old IpFamily], ",
              "[suborg_supplier]as [ProductFamily],",
              "[devsuborg] as [SubOrg],",
              "[ip_supplier]as [Supplier],",
              "[Family] as [IpFamily],   ",
              "[Gladius],",
              "[Description],",
              "[Dev_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
              "from v_ipg_family_gladius"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "release_central_family"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [id] , [IpFamilyId], ",
              "[old_family]as [old IpFamily], ",
              "[suborg_supplier]as [ProductFamily],",
              "[devsuborg] as [SubOrg],",
              "[ip_supplier]as [Supplier],",
              "[Family] as [IpFamily],   ",
              "[Gladius],",
              "[Description],",
              "[Dev_Lead],  [Product_Owner],   [Support_Lead], [Architecture_Lead],  [Program_Manager]",
              "from v_ipg_family_gladius</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_milestone_data_drop_changes",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PreviousDateWW",
            "dataType": "int64",
            "sourceColumn": "PreviousDateWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "NewDateWW",
            "dataType": "int64",
            "sourceColumn": "NewDateWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DateType",
            "dataType": "string",
            "sourceColumn": "DateType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UpdateDate",
            "dataType": "dateTime",
            "sourceColumn": "UpdateDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "UpdateUser",
            "dataType": "string",
            "sourceColumn": "UpdateUser",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UpdateWW",
            "dataType": "int64",
            "sourceColumn": "UpdateWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "rev",
            "dataType": "int64",
            "sourceColumn": "rev",
            "sourceProviderType": "Integer"
          },
          {
            "name": "IpConfigurationId, MilestoneId, rev",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId, rev"
          },
          {
            "name": "ChangeRevision",
            "dataType": "string",
            "sourceColumn": "ChangeRevision"
          },
          {
            "name": "ChangeReason",
            "dataType": "string",
            "sourceColumn": "ChangeReason"
          },
          {
            "name": "WW Diff",
            "dataType": "int64",
            "sourceColumn": "WW Diff"
          },
          {
            "name": "# of change per milestone",
            "dataType": "int64",
            "sourceColumn": "# of change per milestone"
          },
          {
            "type": "calculated",
            "name": "POR changed in current ww or previous ww",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " IF( DATEDIFF(TODAY(), ip_milestone_data_drop_changes[UpdateDate], WEEK)= 0 ",
              "   || DATEDIFF(TODAY(), ip_milestone_data_drop_changes[UpdateDate], WEEK)= -1",
              "    , 1, 0)"
            ]
          },
          {
            "name": "Visible",
            "dataType": "string",
            "sourceColumn": "Visible"
          }
        ],
        "partitions": [
          {
            "name": "ip_milestone_data_drop_changes",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [IpConfigurationId],[MilestoneId],[Visible],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "[PreviousDateWW], [NewDateWW],[DateType],[UpdateDate],[UpdateUser],[UpdateWW],[ChangeRevision],[ChangeReason],",
                "[NewDateWW] - [PreviousDateWW] as [WW Diff],",
                "count(*)over (partition by [IpConfigurationId],[MilestoneId],[DateType] ) as [# of change per milestone],",
                "row_number() over (partition by [IpConfigurationId],[MilestoneId],[DateType] order by  [UpdateDate] asc) as [rev],",
                "[IpConfigurationId]+', '+[MilestoneId] +', '+[rev] as [IpConfigurationId, MilestoneId, rev]",
                "from [V_IPG_Carbon_MILESTONE_DROP_DATE_CHANGES] ",
                "where [DevOrg] ='IPG'",
                "and [DateType] in ('Trend','POR') ",
                "and [PreviousDateWW] <> [NewDateWW] ",
                "and [PreviousDateWW] is not null ",
                "and[Configuration] not like '%dummy%'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [IpConfigurationId],[MilestoneId],[Visible],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "[PreviousDateWW], [NewDateWW],[DateType],[UpdateDate],[UpdateUser],[UpdateWW],[ChangeRevision],[ChangeReason],",
                  "[NewDateWW] - [PreviousDateWW] as [WW Diff],",
                  "count(*)over (partition by [IpConfigurationId],[MilestoneId],[DateType] ) as [# of change per milestone],",
                  "row_number() over (partition by [IpConfigurationId],[MilestoneId],[DateType] order by  [UpdateDate] asc) as [rev],",
                  "[IpConfigurationId]+', '+[MilestoneId] +', '+[rev] as [IpConfigurationId, MilestoneId, rev]",
                  "from [V_IPG_Carbon_MILESTONE_DROP_DATE_CHANGES] ",
                  "where [DevOrg] ='IPG'",
                  "and [DateType] in ('Trend','POR') ",
                  "and [PreviousDateWW] <> [NewDateWW] ",
                  "and [PreviousDateWW] is not null ",
                  "and[Configuration] not like '%dummy%'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "no_data_changed_curr_or_prev_ww",
            "expression": [
              " ",
              "IF(",
              "    CALCULATE( SUM(ip_milestone_data_drop_changes[POR changed in current ww or previous ww])) = 0, ",
              "             \"No data in the current ww or previous ww\", \"\")"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [IpConfigurationId],[MilestoneId],[Visible],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[PreviousDateWW], [NewDateWW],[DateType],[UpdateDate],[UpdateUser],[UpdateWW],[ChangeRevision],[ChangeReason],",
              "[NewDateWW] - [PreviousDateWW] as [WW Diff],",
              "count(*)over (partition by [IpConfigurationId],[MilestoneId],[DateType] ) as [# of change per milestone],",
              "row_number() over (partition by [IpConfigurationId],[MilestoneId],[DateType] order by  [UpdateDate] asc) as [rev],",
              "[IpConfigurationId]+', '+[MilestoneId] +', '+[rev] as [IpConfigurationId, MilestoneId, rev]",
              "from [V_IPG_Carbon_MILESTONE_DROP_DATE_CHANGES] ",
              "where [DevOrg] ='IPG'",
              "and [DateType] in ('Trend','POR') ",
              "and [PreviousDateWW] <> [NewDateWW] ",
              "and [PreviousDateWW] is not null ",
              "and[Configuration] not like '%dummy%'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_milestone_data_drop_changes"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [IpConfigurationId],[MilestoneId],[Visible],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[PreviousDateWW], [NewDateWW],[DateType],[UpdateDate],[UpdateUser],[UpdateWW],[ChangeRevision],[ChangeReason],",
              "[NewDateWW] - [PreviousDateWW] as [WW Diff],",
              "count(*)over (partition by [IpConfigurationId],[MilestoneId],[DateType] ) as [# of change per milestone],",
              "row_number() over (partition by [IpConfigurationId],[MilestoneId],[DateType] order by  [UpdateDate] asc) as [rev],",
              "[IpConfigurationId]+', '+[MilestoneId] +', '+[rev] as [IpConfigurationId, MilestoneId, rev]",
              "from [V_IPG_Carbon_MILESTONE_DROP_DATE_CHANGES] ",
              "where [DevOrg] ='IPG'",
              "and [DateType] in ('Trend','POR') ",
              "and [PreviousDateWW] <> [NewDateWW] ",
              "and [PreviousDateWW] is not null ",
              "and[Configuration] not like '%dummy%'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "worker_public",
        "columns": [
          {
            "name": "User_Name",
            "dataType": "string",
            "sourceColumn": "User_Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_WWID",
            "dataType": "string",
            "sourceColumn": "User_WWID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_Idsid",
            "dataType": "string",
            "sourceColumn": "User_Idsid",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "worker_public",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                "from [WORKER_PUBLIC]",
                "where [IsActive] =1",
                "and [ShortID] is not null",
                "group by [ShortID]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                  "from [WORKER_PUBLIC]",
                  "where [IsActive] =1",
                  "and [ShortID] is not null",
                  "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "worker_public"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "last_refresh",
        "columns": [
          {
            "name": "last_refresh",
            "dataType": "string",
            "sourceColumn": "last_refresh"
          },
          {
            "type": "calculated",
            "name": "last_refresh_time",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[last_Refresh]&\" PST\""
          }
        ],
        "partitions": [
          {
            "name": "last_refresh",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct getutcdate()as [last_refresh]",
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate()as [last_refresh]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct getutcdate()as [last_refresh]"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "last_refresh"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct getutcdate()as [last_refresh]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "ip_data_ALL",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Domain",
            "dataType": "string",
            "sourceColumn": "Domain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubDomain",
            "dataType": "string",
            "sourceColumn": "SubDomain",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Org",
            "dataType": "string",
            "sourceColumn": "Org",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Supplier",
            "dataType": "string",
            "sourceColumn": "Supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LeadProduct",
            "dataType": "string",
            "sourceColumn": "LeadProduct",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LeadAffectedProduct",
            "dataType": "string",
            "sourceColumn": "LeadAffectedProduct",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamily",
            "dataType": "string",
            "sourceColumn": "IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamilyId",
            "dataType": "int64",
            "sourceColumn": "IpFamilyId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpGeneration",
            "dataType": "string",
            "sourceColumn": "IpGeneration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AffectedProducts",
            "dataType": "string",
            "sourceColumn": "AffectedProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "RequestingProducts",
            "dataType": "string",
            "sourceColumn": "RequestingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "HsdEsId",
            "dataType": "int64",
            "sourceColumn": "HsdEsId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IsFunded",
            "dataType": "boolean",
            "sourceColumn": "IsFunded",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\"",
            "sourceProviderType": "Boolean"
          },
          {
            "name": "IsClosed",
            "dataType": "string",
            "sourceColumn": "IsClosed",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IsUnrequestable",
            "dataType": "string",
            "sourceColumn": "IsUnrequestable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Lifecycle",
            "dataType": "string",
            "sourceColumn": "Lifecycle",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Node",
            "dataType": "string",
            "sourceColumn": "Node",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MDG Name",
            "dataType": "string",
            "sourceColumn": "MDG Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TopLevelModuleName",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Reuse",
            "dataType": "string",
            "sourceColumn": "Reuse",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PlanningStatus",
            "dataType": "string",
            "sourceColumn": "PlanningStatus",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "ip_data_ALL",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                " [IpConfigurationId],[Name] as[Configuration],",
                "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily],[IpFamilyId],[IpGeneration],",
                "[AffectedProducts],[RequestingProducts],",
                "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
                "from  [V_IPG_CARBON_IPCONFIGURATION]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  " [IpConfigurationId],[Name] as[Configuration],",
                  "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily],[IpFamilyId],[IpGeneration],",
                  "[AffectedProducts],[RequestingProducts],",
                  "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
                  "from  [V_IPG_CARBON_IPCONFIGURATION]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              " [IpConfigurationId],[Name] as[Configuration],",
              "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily],[IpFamilyId],[IpGeneration],",
              "[AffectedProducts],[RequestingProducts],",
              "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
              "from  [V_IPG_CARBON_IPCONFIGURATION]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_data_ALL"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              " [IpConfigurationId],[Name] as[Configuration],",
              "[Domain],[SubDomain],[Org],[SubOrg],[Supplier],[LeadProduct],[LeadAffectedProduct],[IpFamily],[IpFamilyId],[IpGeneration],",
              "[AffectedProducts],[RequestingProducts],",
              "[HsdEsId],[IpType],[IsFunded],[IsClosed],[IsUnrequestable],[Lifecycle],[Node],[Process],[Project]as [MDG Name],[TopLevelModuleName],[Reuse],[Status]as [PlanningStatus]",
              "from  [V_IPG_CARBON_IPCONFIGURATION]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_milestone_data_ALL",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sortByColumn": "Drop order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "TrendQuarter",
            "dataType": "string",
            "sourceColumn": "TrendQuarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendMonth",
            "dataType": "string",
            "sourceColumn": "TrendMonth",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorQuarter",
            "dataType": "string",
            "sourceColumn": "PorQuarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorMonth",
            "dataType": "string",
            "sourceColumn": "PorMonth",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW (PorYYYYWW)",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW (PorYYYYWW)",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendYYYYWW_6WW_back",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW_6WW_back",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop order",
            "dataType": "int64",
            "sourceColumn": "Drop order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop color",
            "dataType": "string",
            "sourceColumn": "Drop color",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is standard drop",
            "dataType": "int64",
            "sourceColumn": "is standard drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is hotfix",
            "dataType": "int64",
            "sourceColumn": "is hotfix",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is stale",
            "dataType": "int64",
            "sourceColumn": "is stale",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is late",
            "dataType": "int64",
            "sourceColumn": "is late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is 1 week late",
            "dataType": "int64",
            "sourceColumn": "is 1 week late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is 2 or more weeks late",
            "dataType": "int64",
            "sourceColumn": "is 2 or more weeks late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is future drop",
            "dataType": "int64",
            "sourceColumn": "is future drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current ww or future drop",
            "dataType": "int64",
            "sourceColumn": "is current ww or future drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current ww drop",
            "dataType": "int64",
            "sourceColumn": "is current ww drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is previous ww drop",
            "dataType": "int64",
            "sourceColumn": "is previous ww drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is drop is in last 6 weeks",
            "dataType": "int64",
            "sourceColumn": "is drop is in last 6 weeks",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop case",
            "dataType": "int64",
            "sourceColumn": "drop case",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop matrix legend",
            "dataType": "string",
            "sourceColumn": "drop matrix legend",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop matrix color",
            "dataType": "string",
            "sourceColumn": "drop matrix color",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop matrix order",
            "dataType": "int64",
            "sourceColumn": "drop matrix order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is execution drop",
            "dataType": "int64",
            "sourceColumn": "is execution drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "pas filter",
            "dataType": "int64",
            "sourceColumn": "pas filter",
            "sourceProviderType": "Integer"
          },
          {
            "name": "redrop filter",
            "dataType": "int64",
            "sourceColumn": "redrop filter",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "ip_milestone_data_ALL",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "[UsingProductsSummary],[UsingProducts],",
                "[Revision],[Drop],[Complete],[DropType],",
                "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 else 40 end as [Drop order],",
                "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
                "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
                "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                "------------------- drop matrix fields -------------------",
                "case when [drop case]<>1  then 'Missing Trend/POR'",
                "when [is stale] =1 then 'Stale'",
                "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                "when [is stale] =1 then '#C81326'--'Stale'",
                "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                "end as [drop matrix color],",
                "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                "------------------- end -------------------",
                "case when ([Drop] in('IP Execution Commit (IE)','EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
                "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
                "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
                "from  [V_IPG_CARBON_MILESTONE]",
                "where [Visible] = 'Yes'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "[UsingProductsSummary],[UsingProducts],",
                  "[Revision],[Drop],[Complete],[DropType],",
                  "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                  "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                  "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                  "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                  "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                  "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 else 40 end as [Drop order],",
                  "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
                  "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                  "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
                  "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                  "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                  "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                  "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                  "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                  "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                  "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                  "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                  "------------------- drop matrix fields -------------------",
                  "case when [drop case]<>1  then 'Missing Trend/POR'",
                  "when [is stale] =1 then 'Stale'",
                  "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                  "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                  "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                  "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                  "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                  "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                  "when [is stale] =1 then '#C81326'--'Stale'",
                  "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                  "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                  "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                  "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                  "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                  "end as [drop matrix color],",
                  "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                  "------------------- end -------------------",
                  "case when ([Drop] in('IP Execution Commit (IE)','EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
                  "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
                  "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
                  "from  [V_IPG_CARBON_MILESTONE]",
                  "where [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[UsingProductsSummary],[UsingProducts],",
              "[Revision],[Drop],[Complete],[DropType],",
              "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 else 40 end as [Drop order],",
              "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "------------------- drop matrix fields -------------------",
              "case when [drop case]<>1  then 'Missing Trend/POR'",
              "when [is stale] =1 then 'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "when [is stale] =1 then '#C81326'--'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "end as [drop matrix color],",
              "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "------------------- end -------------------",
              "case when ([Drop] in('IP Execution Commit (IE)','EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
              "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
              "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [Visible] = 'Yes'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_milestone_data_ALL"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[UsingProductsSummary],[UsingProducts],",
              "[Revision],[Drop],[Complete],[DropType],",
              "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 else 40 end as [Drop order],",
              "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#FF5662' end as [Drop color],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "------------------- drop matrix fields -------------------",
              "case when [drop case]<>1  then 'Missing Trend/POR'",
              "when [is stale] =1 then 'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "when [is stale] =1 then '#C81326'--'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "end as [drop matrix color],",
              "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "------------------- end -------------------",
              "case when ([Drop] in('IP Execution Commit (IE)','EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' or  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'or  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is execution drop],",
              "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop','Patch')  then 1 else 0 end as  [pas filter],",
              "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_soc_mapping_ALL",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Depth",
            "dataType": "int64",
            "sourceColumn": "Depth",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Is IPG",
            "dataType": "string",
            "sourceColumn": "Is IPG",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Carbon ProductName",
            "dataType": "string",
            "sourceColumn": "Carbon ProductName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Drop matrix order",
            "dataType": "int64",
            "sourceColumn": "Drop matrix order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is related milestone",
            "dataType": "int64",
            "sourceColumn": "is related milestone",
            "sourceProviderType": "Integer"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId"
          }
        ],
        "partitions": [
          {
            "name": "ip_soc_mapping_ALL",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select [IpConfigurationId],[Configuration],[Depth],",
                "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
                "[Carbon ProductName],  [DieID],[DieName],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "[MilestoneId],[Drop matrix order], [is related milestone]",
                "from[ipg_soc_related_ips_and_milestones_ALL]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpConfigurationId],[Configuration],[Depth],",
                  "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
                  "[Carbon ProductName],  [DieID],[DieName],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "[MilestoneId],[Drop matrix order], [is related milestone]",
                  "from[ipg_soc_related_ips_and_milestones_ALL]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select [IpConfigurationId],[Configuration],[Depth],",
              "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
              "[Carbon ProductName],  [DieID],[DieName],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[MilestoneId],[Drop matrix order], [is related milestone]",
              "from[ipg_soc_related_ips_and_milestones_ALL]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_soc_mapping_ALL"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [IpConfigurationId],[Configuration],[Depth],",
              "case when [IpConfigurationId] is not null then 'Yes' else 'No' end as [Is IPG],",
              "[Carbon ProductName],  [DieID],[DieName],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[MilestoneId],[Drop matrix order], [is related milestone]",
              "from[ipg_soc_related_ips_and_milestones_ALL]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "one_week_late",
        "columns": [
          {
            "name": "one_week_late",
            "dataType": "string",
            "sourceColumn": "one_week_late",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_one_week_late",
            "dataType": "int64",
            "sourceColumn": "is_one_week_late",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "one_week_late",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
                "from [v_ipg_carbon_milestone]",
                "union ",
                "select distinct 'No', 0 ",
                "from [v_ipg_carbon_milestone]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
                  "from [v_ipg_carbon_milestone]",
                  "union ",
                  "select distinct 'No', 0 ",
                  "from [v_ipg_carbon_milestone]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
              "from [v_ipg_carbon_milestone]",
              "union ",
              "select distinct 'No', 0 ",
              "from [v_ipg_carbon_milestone]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "one_week_late"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  'Yes' as [one_week_late], 1 as [is_one_week_late]",
              "from [v_ipg_carbon_milestone]",
              "union ",
              "select distinct 'No', 0 ",
              "from [v_ipg_carbon_milestone]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "qarf_data",
        "columns": [
          {
            "name": "f_id",
            "dataType": "int64",
            "sourceColumn": "f_id",
            "sourceProviderType": "Integer"
          },
          {
            "name": "f_ipname",
            "dataType": "string",
            "sourceColumn": "f_ipname",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "f_milestone",
            "dataType": "string",
            "sourceColumn": "f_milestone",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "f_milestone_id",
            "dataType": "string",
            "sourceColumn": "f_milestone_id",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "f_last_run",
            "dataType": "string",
            "sourceColumn": "f_last_run",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "f_datecreate",
            "dataType": "dateTime",
            "sourceColumn": "f_datecreate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "f_source_file_path",
            "dataType": "string",
            "sourceColumn": "f_source_file_path",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ipname_milestoneid",
            "dataType": "string",
            "sourceColumn": "ipname_milestoneid",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "column_name",
            "dataType": "string",
            "sourceColumn": "column_name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "column_value",
            "dataType": "string",
            "sourceColumn": "column_value",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "log_path",
            "dataType": "string",
            "sourceColumn": "log_path",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "violations_log",
            "dataType": "string",
            "sourceColumn": "violations_log",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "category_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF([category] = \"FE_QA\",5,",
              "IF([category] = \"BE_QA\",10,",
              "IF([category] = \"FEBE\",15,",
              "20)))"
            ]
          },
          {
            "type": "calculated",
            "name": "category_with_order",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[category]",
            "sortByColumn": "category_order"
          },
          {
            "type": "calculated",
            "name": "column_name_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH([column_name],",
              "\"Misc File Presence\", 5,",
              "\"FE File Presence\", 10,",
              "\"VCS Compile\", 15,",
              "\"VCS NLP\", 17,",
              "\"Emulation\", 20,",
              "\"Emulation NLP\", 25,",
              "\"UPF Compile\", 30,",
              "\"Collage\", 35,",
              "\"Nebulon\", 40,",
              "\"Xfire Multirtl\", 45,",
              "\"Zircon Score\", 50,",
              "\"BE File Presence\", 55,",
              "\"Xfire LEF\", 60,",
              "\"Xfire Timing\", 65,",
              "\"Xfire INTGD\", 70,",
              "\"Xfire Horizontal\", 75,",
              "\"LV (Runpds)\", 80,",
              "\"FEV (RTL2RTL)\", 85,",
              "\"FEV (RTL2APR)\", 90,",
              "95)"
            ]
          },
          {
            "type": "calculated",
            "name": "column_name_with_order",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[column_name]",
            "sortByColumn": "column_name_order"
          },
          {
            "type": "calculated",
            "name": "color_coding",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK([column_value]) || LOWER([column_value]) = \"null\", \"#E9E9E9\",",
              "IF(LOWER([column_value]) in {\"fail\",\"warning\",\"error\"}, \"#C81326\",",
              "IF(LOWER([column_value]) = \"waive\", \"#D7F3A2\",",
              "\"#708541\"",
              ")))"
            ]
          },
          {
            "name": "log_path_content",
            "dataType": "string",
            "sourceColumn": "log_path_content"
          },
          {
            "name": "f_qarf_mode",
            "dataType": "string",
            "sourceColumn": "f_qarf_mode"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select *,",
                "case when Column_Name in ('Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score') then 'FE_QA'",
                "when Column_Name in ('BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)')then 'BE_QA'",
                "when Column_Name in ('FEV (RTL2RTL)','FEV (RTL2APR)')then 'FEBE' end as category ",
                "from",
                "\t(select distinct f_id, f_ipname, f_milestone,f_milestone_id, f_last_run, f_datecreate,f_source_file_path, f_qarf_mode,",
                "\t f_ipname ||', '|| f_milestone_id as ipname_milestoneid,",
                "\tunnest(array['Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score','BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)','FEV (RTL2RTL)','FEV (RTL2APR)']) AS Column_Name,",
                "\tunnest(array[f_misc_file::text\t, f_fe_file::text,f_vcs_compile,f_vcs_nlp,f_emulation,f_emulation_nlp,f_upf_compile,f_collage,f_nebulon,f_xfire_multirtl,f_zircon_score,f_be_file,f_xfire_lef,f_xfire_timing,f_xfire_intgd,f_xfire_horizontal,f_lv_runpds,f_fev_rtl2rtl,f_fev_rtl2apr]) AS Column_Value,",
                "\tunnest(array[f_misc_file_log_path::text\t, f_fe_file_log_path::text,f_vcs_compile_log_path,f_vcs_nlp_log_path,f_emulation_log_path,f_emulation_nlp_log_path,f_upf_compile_log_path,f_collage_log_path,f_nebulon_log_path,f_xfire_multirtl_log_path,f_zircon_score_log_path,f_be_file_log_path,f_xfire_lef_log_path,f_xfire_timing_log_path,f_xfire_intgd_log_path,f_xfire_horizontal_log_path,f_lv_runpds_log_path,f_fev_rtl2rtl_log_path,f_fev_rtl2apr_log_path]) AS Log_path,",
                "\tunnest(array[f_misc_file_log::text\t, f_fe_file_log::text,f_vcs_compile_log,f_vcs_nlp_log ,f_emulation_log,f_emulation_nlp_log,f_upf_compile_log,f_collage_log,f_nebulon_log,f_xfire_multirtl_log,f_zircon_score_log,f_be_file_log,f_xfire_lef_log,f_xfire_timing_log,f_xfire_intgd_log,f_xfire_horizontal_log,f_lv_runpds_log,f_fev_rtl2rtl_log,f_fev_rtl2apr_log])::VARCHAR(30000) AS Log_path_content,",
                "\tunnest(array[null::text\t, null::text,null::text,null::text,null::text,null::text,null::text,null::text,null::text,f_xfire_multirtl_violations_log,null::text,null::text,f_xfire_lef_violations_log,f_xfire_timing_violations_log,f_xfire_intgd_violations_log,f_xfire_horizontal_violations_log,f_lv_runpds_violations_log,null::text,null::text])::VARCHAR(30000) AS Violations_log",
                "\tfrom t_qarf",
                "\twhere f_etime is null",
                "\torder by f_id) as data"
              ],
              "dataSource": "actis_db"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
                  "case when Column_Name in ('Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score') then 'FE_QA'",
                  "when Column_Name in ('BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)')then 'BE_QA'",
                  "when Column_Name in ('FEV (RTL2RTL)','FEV (RTL2APR)')then 'FEBE' end as category ",
                  "from",
                  "\t(select distinct f_id, f_ipname, f_milestone,f_milestone_id, f_last_run, f_datecreate,f_source_file_path, f_qarf_mode,",
                  "\t f_ipname ||', '|| f_milestone_id as ipname_milestoneid,",
                  "\tunnest(array['Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score','BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)','FEV (RTL2RTL)','FEV (RTL2APR)']) AS Column_Name,",
                  "\tunnest(array[f_misc_file::text\t, f_fe_file::text,f_vcs_compile,f_vcs_nlp,f_emulation,f_emulation_nlp,f_upf_compile,f_collage,f_nebulon,f_xfire_multirtl,f_zircon_score,f_be_file,f_xfire_lef,f_xfire_timing,f_xfire_intgd,f_xfire_horizontal,f_lv_runpds,f_fev_rtl2rtl,f_fev_rtl2apr]) AS Column_Value,",
                  "\tunnest(array[f_misc_file_log_path::text\t, f_fe_file_log_path::text,f_vcs_compile_log_path,f_vcs_nlp_log_path,f_emulation_log_path,f_emulation_nlp_log_path,f_upf_compile_log_path,f_collage_log_path,f_nebulon_log_path,f_xfire_multirtl_log_path,f_zircon_score_log_path,f_be_file_log_path,f_xfire_lef_log_path,f_xfire_timing_log_path,f_xfire_intgd_log_path,f_xfire_horizontal_log_path,f_lv_runpds_log_path,f_fev_rtl2rtl_log_path,f_fev_rtl2apr_log_path]) AS Log_path,",
                  "\tunnest(array[f_misc_file_log::text\t, f_fe_file_log::text,f_vcs_compile_log,f_vcs_nlp_log ,f_emulation_log,f_emulation_nlp_log,f_upf_compile_log,f_collage_log,f_nebulon_log,f_xfire_multirtl_log,f_zircon_score_log,f_be_file_log,f_xfire_lef_log,f_xfire_timing_log,f_xfire_intgd_log,f_xfire_horizontal_log,f_lv_runpds_log,f_fev_rtl2rtl_log,f_fev_rtl2apr_log])::VARCHAR(30000) AS Log_path_content,",
                  "\tunnest(array[null::text\t, null::text,null::text,null::text,null::text,null::text,null::text,null::text,null::text,f_xfire_multirtl_violations_log,null::text,null::text,f_xfire_lef_violations_log,f_xfire_timing_violations_log,f_xfire_intgd_violations_log,f_xfire_horizontal_violations_log,f_lv_runpds_violations_log,null::text,null::text])::VARCHAR(30000) AS Violations_log",
                  "\tfrom t_qarf",
                  "\twhere f_etime is null",
                  "\torder by f_id) as data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select *,",
              "case when Column_Name in ('Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score') then 'FE_QA'",
              "when Column_Name in ('BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)')then 'BE_QA'",
              "when Column_Name in ('FEV (RTL2RTL)','FEV (RTL2APR)')then 'FEBE' end as category ",
              "from",
              "\t(select distinct f_id, f_ipname, f_milestone,f_milestone_id, f_last_run, f_datecreate,f_source_file_path, f_qarf_mode,",
              "\t f_ipname ||', '|| f_milestone_id as ipname_milestoneid,",
              "\tunnest(array['Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score','BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)','FEV (RTL2RTL)','FEV (RTL2APR)']) AS Column_Name,",
              "\tunnest(array[f_misc_file::text\t, f_fe_file::text,f_vcs_compile,f_vcs_nlp,f_emulation,f_emulation_nlp,f_upf_compile,f_collage,f_nebulon,f_xfire_multirtl,f_zircon_score,f_be_file,f_xfire_lef,f_xfire_timing,f_xfire_intgd,f_xfire_horizontal,f_lv_runpds,f_fev_rtl2rtl,f_fev_rtl2apr]) AS Column_Value,",
              "\tunnest(array[f_misc_file_log_path::text\t, f_fe_file_log_path::text,f_vcs_compile_log_path,f_vcs_nlp_log_path,f_emulation_log_path,f_emulation_nlp_log_path,f_upf_compile_log_path,f_collage_log_path,f_nebulon_log_path,f_xfire_multirtl_log_path,f_zircon_score_log_path,f_be_file_log_path,f_xfire_lef_log_path,f_xfire_timing_log_path,f_xfire_intgd_log_path,f_xfire_horizontal_log_path,f_lv_runpds_log_path,f_fev_rtl2rtl_log_path,f_fev_rtl2apr_log_path]) AS Log_path,",
              "\tunnest(array[f_misc_file_log::text\t, f_fe_file_log::text,f_vcs_compile_log,f_vcs_nlp_log ,f_emulation_log,f_emulation_nlp_log,f_upf_compile_log,f_collage_log,f_nebulon_log,f_xfire_multirtl_log,f_zircon_score_log,f_be_file_log,f_xfire_lef_log,f_xfire_timing_log,f_xfire_intgd_log,f_xfire_horizontal_log,f_lv_runpds_log,f_fev_rtl2rtl_log,f_fev_rtl2apr_log])::VARCHAR(30000) AS Log_path_content,",
              "\tunnest(array[null::text\t, null::text,null::text,null::text,null::text,null::text,null::text,null::text,null::text,f_xfire_multirtl_violations_log,null::text,null::text,f_xfire_lef_violations_log,f_xfire_timing_violations_log,f_xfire_intgd_violations_log,f_xfire_horizontal_violations_log,f_lv_runpds_violations_log,null::text,null::text])::VARCHAR(30000) AS Violations_log",
              "\tfrom t_qarf",
              "\twhere f_etime is null",
              "\torder by f_id) as data"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *,",
              "case when Column_Name in ('Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score') then 'FE_QA'",
              "when Column_Name in ('BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)')then 'BE_QA'",
              "when Column_Name in ('FEV (RTL2RTL)','FEV (RTL2APR)')then 'FEBE' end as category ",
              "from",
              "\t(select distinct f_id, f_ipname, f_milestone,f_milestone_id, f_last_run, f_datecreate,f_source_file_path, f_qarf_mode,",
              "\t f_ipname ||', '|| f_milestone_id as ipname_milestoneid,",
              "\tunnest(array['Misc File Presence','FE File Presence','VCS Compile','VCS NLP','Emulation','Emulation NLP','UPF Compile','Collage','Nebulon','Xfire Multirtl','Zircon Score','BE File Presence','Xfire LEF','Xfire Timing','Xfire INTGD','Xfire Horizontal','LV (Runpds)','FEV (RTL2RTL)','FEV (RTL2APR)']) AS Column_Name,",
              "\tunnest(array[f_misc_file::text\t, f_fe_file::text,f_vcs_compile,f_vcs_nlp,f_emulation,f_emulation_nlp,f_upf_compile,f_collage,f_nebulon,f_xfire_multirtl,f_zircon_score,f_be_file,f_xfire_lef,f_xfire_timing,f_xfire_intgd,f_xfire_horizontal,f_lv_runpds,f_fev_rtl2rtl,f_fev_rtl2apr]) AS Column_Value,",
              "\tunnest(array[f_misc_file_log_path::text\t, f_fe_file_log_path::text,f_vcs_compile_log_path,f_vcs_nlp_log_path,f_emulation_log_path,f_emulation_nlp_log_path,f_upf_compile_log_path,f_collage_log_path,f_nebulon_log_path,f_xfire_multirtl_log_path,f_zircon_score_log_path,f_be_file_log_path,f_xfire_lef_log_path,f_xfire_timing_log_path,f_xfire_intgd_log_path,f_xfire_horizontal_log_path,f_lv_runpds_log_path,f_fev_rtl2rtl_log_path,f_fev_rtl2apr_log_path]) AS Log_path,",
              "\tunnest(array[f_misc_file_log::text\t, f_fe_file_log::text,f_vcs_compile_log,f_vcs_nlp_log ,f_emulation_log,f_emulation_nlp_log,f_upf_compile_log,f_collage_log,f_nebulon_log,f_xfire_multirtl_log,f_zircon_score_log,f_be_file_log,f_xfire_lef_log,f_xfire_timing_log,f_xfire_intgd_log,f_xfire_horizontal_log,f_lv_runpds_log,f_fev_rtl2rtl_log,f_fev_rtl2apr_log])::VARCHAR(30000) AS Log_path_content,",
              "\tunnest(array[null::text\t, null::text,null::text,null::text,null::text,null::text,null::text,null::text,null::text,f_xfire_multirtl_violations_log,null::text,null::text,f_xfire_lef_violations_log,f_xfire_timing_violations_log,f_xfire_intgd_violations_log,f_xfire_horizontal_violations_log,f_lv_runpds_violations_log,null::text,null::text])::VARCHAR(30000) AS Violations_log",
              "\tfrom t_qarf",
              "\twhere f_etime is null",
              "\torder by f_id) as data</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "subip_milestone_data",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "sourceColumn": "IpConfigurationId, MilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProductsSummary",
            "dataType": "string",
            "sourceColumn": "UsingProductsSummary",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "UsingProducts",
            "dataType": "string",
            "sourceColumn": "UsingProducts",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Revision",
            "dataType": "string",
            "sourceColumn": "Revision",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Drop",
            "dataType": "string",
            "sourceColumn": "Drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Complete",
            "dataType": "string",
            "sourceColumn": "Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DropType",
            "dataType": "string",
            "sourceColumn": "DropType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendExactDate",
            "dataType": "dateTime",
            "sourceColumn": "TrendExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "TrendQuarter",
            "dataType": "string",
            "sourceColumn": "TrendQuarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendMonth",
            "dataType": "string",
            "sourceColumn": "TrendMonth",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PorExactDate",
            "dataType": "dateTime",
            "sourceColumn": "PorExactDate",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "PorQuarter",
            "dataType": "string",
            "sourceColumn": "PorQuarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "PorMonth",
            "dataType": "string",
            "sourceColumn": "PorMonth",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Trend Offset",
            "dataType": "int64",
            "sourceColumn": "Trend Offset",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendChangeReason",
            "dataType": "string",
            "sourceColumn": "TrendChangeReason",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW (PorYYYYWW)",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW (PorYYYYWW)",
            "sourceProviderType": "Integer"
          },
          {
            "name": "TrendYYYYWW_6WW_back",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW_6WW_back",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop order",
            "dataType": "int64",
            "sourceColumn": "Drop order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Drop color",
            "dataType": "string",
            "sourceColumn": "Drop color",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is standard drop",
            "dataType": "int64",
            "sourceColumn": "is standard drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is hotfix",
            "dataType": "int64",
            "sourceColumn": "is hotfix",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is stale",
            "dataType": "int64",
            "sourceColumn": "is stale",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is late",
            "dataType": "int64",
            "sourceColumn": "is late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is 1 week late",
            "dataType": "int64",
            "sourceColumn": "is 1 week late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is 2 or more weeks late",
            "dataType": "int64",
            "sourceColumn": "is 2 or more weeks late",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is future drop",
            "dataType": "int64",
            "sourceColumn": "is future drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current ww or future drop",
            "dataType": "int64",
            "sourceColumn": "is current ww or future drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current ww drop",
            "dataType": "int64",
            "sourceColumn": "is current ww drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is previous ww drop",
            "dataType": "int64",
            "sourceColumn": "is previous ww drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is drop is in last 6 weeks",
            "dataType": "int64",
            "sourceColumn": "is drop is in last 6 weeks",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop case",
            "dataType": "int64",
            "sourceColumn": "drop case",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop matrix legend",
            "dataType": "string",
            "sourceColumn": "drop matrix legend",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop matrix color",
            "dataType": "string",
            "sourceColumn": "drop matrix color",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop matrix order",
            "dataType": "int64",
            "sourceColumn": "drop matrix order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is execution drop",
            "dataType": "int64",
            "sourceColumn": "is execution drop",
            "sourceProviderType": "Integer"
          },
          {
            "name": "pas filter",
            "dataType": "int64",
            "sourceColumn": "pas filter",
            "sourceProviderType": "Integer"
          },
          {
            "name": "redrop filter",
            "dataType": "int64",
            "sourceColumn": "redrop filter",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "Purpose",
            "dataType": "string",
            "sourceColumn": "Purpose"
          },
          {
            "name": "TopLevelModuleName",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName"
          },
          {
            "name": "TopLevelModuleName, MilestoneId",
            "dataType": "string",
            "sourceColumn": "TopLevelModuleName, MilestoneId"
          },
          {
            "name": "is tentative",
            "dataType": "int64",
            "sourceColumn": "is tentative"
          },
          {
            "type": "calculated",
            "name": "is current ww or previous ww drop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(subip_milestone_data[is previous ww drop] = 1 || subip_milestone_data[is current ww drop] = 1 ,1, 0)"
          }
        ],
        "partitions": [
          {
            "name": "subip_milestone_data",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                "[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
                "[UsingProductsSummary],[UsingProducts],[Purpose],",
                "[Revision],[Drop],[Complete],[DropType],",
                "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                "when [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
                "when [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
                "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#56ffcc' end as [Drop color],",
                "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
                "case when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
                "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                "------------------- drop matrix fields -------------------",
                "case when [drop case]<>1  then 'Missing Trend/POR'",
                "when [is stale] =1 then 'Stale'",
                "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                "when [is stale] =1 then '#C81326'--'Stale'",
                "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                "end as [drop matrix color],",
                "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                "------------------- end -------------------",
                "case when    ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ) then 1 else 0 end as  [is execution drop],",
                "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop', 'Patch')  then 1 else 0 end as  [pas filter],",
                "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
                "from  [V_IPG_CARBON_MILESTONE]",
                "where  [Visible] = 'Yes'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
                  "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
                  "[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
                  "[UsingProductsSummary],[UsingProducts],[Purpose],",
                  "[Revision],[Drop],[Complete],[DropType],",
                  "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
                  "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
                  "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
                  "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
                  "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
                  "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
                  "when [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
                  "when [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
                  "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#56ffcc' end as [Drop color],",
                  "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
                  "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
                  "case when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
                  "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
                  "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
                  "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
                  "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
                  "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
                  "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
                  "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
                  "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
                  "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
                  "------------------- drop matrix fields -------------------",
                  "case when [drop case]<>1  then 'Missing Trend/POR'",
                  "when [is stale] =1 then 'Stale'",
                  "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
                  "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
                  "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
                  "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
                  "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
                  "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
                  "when [is stale] =1 then '#C81326'--'Stale'",
                  "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
                  "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
                  "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
                  "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
                  "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
                  "end as [drop matrix color],",
                  "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
                  "------------------- end -------------------",
                  "case when    ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ) then 1 else 0 end as  [is execution drop],",
                  "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop', 'Patch')  then 1 else 0 end as  [pas filter],",
                  "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
                  "from  [V_IPG_CARBON_MILESTONE]",
                  "where  [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
              "[UsingProductsSummary],[UsingProducts],[Purpose],",
              "[Revision],[Drop],[Complete],[DropType],",
              "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "when [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
              "when [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
              "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#56ffcc' end as [Drop color],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
              "case when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "------------------- drop matrix fields -------------------",
              "case when [drop case]<>1  then 'Missing Trend/POR'",
              "when [is stale] =1 then 'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "when [is stale] =1 then '#C81326'--'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "end as [drop matrix color],",
              "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "------------------- end -------------------",
              "case when    ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ) then 1 else 0 end as  [is execution drop],",
              "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop', 'Patch')  then 1 else 0 end as  [pas filter],",
              "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where  [Visible] = 'Yes'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "subip_milestone_data"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [IpConfigurationId],[Configuration],[MilestoneId],",
              "[IpConfigurationId]+', '+[MilestoneId] as [IpConfigurationId, MilestoneId],",
              "[UniqueCode] as [TopLevelModuleName], [UniqueCode]+', '+[MilestoneId] as [TopLevelModuleName, MilestoneId],",
              "[UsingProductsSummary],[UsingProducts],[Purpose],",
              "[Revision],[Drop],[Complete],[DropType],",
              "[TrendYYYYWW],[TrendExactDate],datepart(year, [TrendExactDate])+'Q'+datepart(quarter, [TrendExactDate]) as [TrendQuarter],datepart(year, [TrendExactDate])+'M'+datepart(month, [TrendExactDate]) as [TrendMonth],",
              "[PorYYYYWW],[PorExactDate],datepart(year, [PorExactDate])+'Q'+datepart(quarter, [PorExactDate]) as [PorQuarter],datepart(year, [PorExactDate])+'M'+datepart(month, [PorExactDate]) as [PorMonth],",
              "cast([TrendOffset] as int) as [Trend Offset],[TrendChangeReason],",
              "isnull([TrendYYYYWW],[PorYYYYWW]) as [TrendYYYYWW (PorYYYYWW)],",
              "max(datepart(ww,dateadd(week,-5,[TrendExactDate]))) over (partition by [TrendYYYYWW]) as [TrendYYYYWW_6WW_back],",
              "case when [Drop] = 'RTL0P5' then 1  when [Drop] = 'RTL0P8' then 5 when [Drop] = 'RTL1P0' then 10 when [Drop] = 'POLO' then 15 when [Drop] = 'PROD' then 20 ",
              "when [Drop] = 'EV1' then 25  when [Drop] = 'EV2' then 30 when [Drop] = 'UV' then 35 when [Drop] = 'UV1' then 40 when [Drop] = 'UV1' then 45 ",
              "when [Drop] = 'UV2' then 50  when [Drop] = 'eFV' then 55 when [Drop] = 'FV' then 60 else 80 end as [Drop order],",
              "case when [Drop] = 'RTL0P5' then '#00C7FD'  when [Drop] = 'RTL0P8' then '#0068B5' when [Drop] = 'RTL1P0' then '#8BAE46' when [Drop] = 'POLO' then '#FEC91B' when [Drop] = 'PROD' then '#8F5DA2' else '#56ffcc' end as [Drop color],",
              "case when [DropType] = 'Standard' then 1 else 0 end as [is standard drop],",
              "case when [DropType] like '%Hotfix%' or [DropType] like '%Re-Drop%' then 1 else 0 end as [is hotfix], ",
              "case when lower([Revision]) like '%tentative%' then 1 else 0 end as [is tentative],",
              "case when [TrendYYYYWW] < datepart(ww,getdate()) and [complete] = 'No'  then 1 else 0 end as [is stale],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < 0 then 1 else 0 end as [is late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] = -1 then 1 else 0 end as [is 1 week late],",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 and [Trend Offset] < -1 then 1 else 0 end as [is 2 or more weeks late],",
              "case when [TrendYYYYWW] > datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is future drop],",
              "case when [TrendYYYYWW] >= datepart(ww,dateadd(week,0,getdate())) then 1 else 0 end as [is current ww or future drop],",
              "case when [TrendYYYYWW] = datepart(ww,getdate()) then 1 else 0 end as [is current ww drop],",
              "case when [TrendYYYYWW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous ww drop],",
              "case when [TrendYYYYWW] between datepart(ww,dateadd(week,-6,getdate())) and   datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is drop is in last 6 weeks],",
              "--drop case: 1- trend and por, 2- only trend, 3- only por, 4- no trend and no por",
              "case when [TrendYYYYWW] >0 and [PorYYYYWW] >0 then 1 ",
              "when [TrendYYYYWW] >0 then 2 when[PorYYYYWW] >0 then 3 else 4 end as [drop case],",
              "------------------- drop matrix fields -------------------",
              "case when [drop case]<>1  then 'Missing Trend/POR'",
              "when [is stale] =1 then 'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then 'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then 'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then 'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then 'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then 'Not released'end as [drop matrix legend],",
              "case when [drop case]<>1  then '#E9E9E9' --'Missing Trend/POR'",
              "when [is stale] =1 then '#C81326'--'Stale'",
              "when [is late] =1 and [Complete] = 'Yes' then '#8F5DA2'--'Completed late'",
              "when [is late] =0 and [Complete] = 'Yes' then '#0068B5'--'Completed on time'",
              "when [is late] =0 and  [is current ww or future drop] =1  then '#708541'--'On track'",
              "when [is late] =1 and  [is current ww or future drop] =1  then '#C81326'--'Late'",
              "when [Complete] = 'No' and [PorYYYYWW] > datepart(ww,getdate()) then '#C81326'--'Not released'",
              "end as [drop matrix color],",
              "ROW_NUMBER ( ) OVER ( PARTITION BY [IpConfigurationId],[Drop]order by  [is current ww or future drop]desc, isnull([TrendYYYYWW],[PorYYYYWW]) asc)  as [drop matrix order],",
              "------------------- end -------------------",
              "case when    ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV') or [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ) then 1 else 0 end as  [is execution drop],",
              "case when [TrendYYYYWW] >0 and   [Complete] = 'Yes' and [DropType] in ('Early','TC_Early','Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Side Drop', 'Patch')  then 1 else 0 end as  [pas filter],",
              "case when   [DropType] in ('Standard','TC_Standard','PCR','TC_PCR','TechnologyChange','TC_TechnologyChange','Hotfix','TC_Hotfix', 'Re-Drop') then 1 else 0 end as  [redrop filter]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where  [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "OpsReviewNavigation",
        "columns": [
          {
            "name": "ReportName",
            "dataType": "string",
            "sourceColumn": "ReportName",
            "sortByColumn": "report_order_int",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "URL",
            "dataType": "string",
            "sourceColumn": "URL",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Level2",
            "dataType": "string",
            "sourceColumn": "Level2",
            "sortByColumn": "order_int",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Order",
            "dataType": "string",
            "sourceColumn": "Order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrgTable",
            "dataType": "string",
            "sourceColumn": "SubOrgTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubOrgField",
            "dataType": "string",
            "sourceColumn": "SubOrgField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SupplierTable",
            "dataType": "string",
            "sourceColumn": "SupplierTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SupplierField",
            "dataType": "string",
            "sourceColumn": "SupplierField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamilyTable",
            "dataType": "string",
            "sourceColumn": "IPFamilyTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IPFamilyField",
            "dataType": "string",
            "sourceColumn": "IPFamilyField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ConfigurationTable",
            "dataType": "string",
            "sourceColumn": "ConfigurationTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ConfigurationField",
            "dataType": "string",
            "sourceColumn": "ConfigurationField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TimeTable",
            "dataType": "string",
            "sourceColumn": "TimeTable",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TimeField",
            "dataType": "string",
            "sourceColumn": "TimeField",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "type": "calculated",
            "name": "order_int",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "IFERROR(VALUE([Order]), BLANK())"
          },
          {
            "name": "report_order",
            "dataType": "string",
            "sourceColumn": "report_order"
          },
          {
            "type": "calculated",
            "name": "report_order_int",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "IFERROR(VALUE([report_order]), BLANK())"
          },
          {
            "name": "YearTable",
            "dataType": "string",
            "sourceColumn": "YearTable"
          },
          {
            "name": "YearField",
            "dataType": "string",
            "sourceColumn": "YearField"
          },
          {
            "name": "QrtTable",
            "dataType": "string",
            "sourceColumn": "QrtTable"
          },
          {
            "name": "QrtField",
            "dataType": "string",
            "sourceColumn": "QrtField"
          },
          {
            "name": "WWTable",
            "dataType": "string",
            "sourceColumn": "WWTable"
          },
          {
            "name": "WWField",
            "dataType": "string",
            "sourceColumn": "WWField"
          }
        ],
        "partitions": [
          {
            "name": "OpsReviewNavigation",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select *",
                "from [ipg_dashboard_url_mdm]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *",
                  "from [ipg_dashboard_url_mdm]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "menuURLs",
            "expression": [
              " ",
              "//written by kelly P.",
              "",
              "// substituting the field names that have \".\" in them for char",
              "IF(COUNTROWS(VALUES('OpsReviewNavigation'[URL]))>1,BLANK(),VALUES('OpsReviewNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and \" & MAX(OpsReviewNavigation[SubOrgTable])&\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[SubOrgField]), \".\", \"_x002E_\", 1) &\" in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&release_central_family[SubOrg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[Supplier]), \" and \" & MAX(OpsReviewNavigation[SupplierTable])&\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[SupplierField]), \".\", \"_x002E_\", 1) &\" in (\"&CONCATENATEX(VALUES(release_central_family[Supplier]),\"'\"&release_central_family[Supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[IpFamily]), \" and \" & if(MAX(OpsReviewNavigation[Level2]) in {\"Schedule Summary\", \"PAS\", \"Trending Late\"}, \"IpFamily\", MAX(OpsReviewNavigation[IPFamilyTable])) &\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[IPFamilyField]), \".\", \"_x002E_\", 1) &\" in (\"&CONCATENATEX(VALUES(release_central_family[IpFamily]),\"'\"&release_central_family[IpFamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(IP_data[Configuration]), \" and \" & MAX(OpsReviewNavigation[ConfigurationTable])&\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[ConfigurationField]), \".\", \"_x002E_\", 1) &\" in (\"&CONCATENATEX(VALUES(IP_data[Configuration]),\"'\"&IP_data[Configuration]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "",
              "",
              "IF(ISFILTERED(ipg_calendar[Category]) || ",
              "ISFILTERED(ipg_calendar[Year]) || ",
              "ISFILTERED(ipg_calendar[Quarter])|| ",
              "ISFILTERED(ipg_calendar[WW]),",
              "     \" and \" & MAX(OpsReviewNavigation[WWTable])&\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[WWField]), \".\", \"_x002E_\", 1) & ",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[WW]),[WW], \",\")&\")\"  // WW are vues so do not wrap values in single quotes",
              "          &",
              "       \" and \" & MAX(OpsReviewNavigation[TimeTable])&\"/\"&SUBSTITUTE(MAX(OpsReviewNavigation[TimeField]), \".\", \"_x002E_\", 1) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[Category]),\"'\"&[Category]&\"'\", \",\")&\")\" // this is string so values need to be wraped in single quotes",
              ")"
            ]
          },
          {
            "name": "pasURL",
            "expression": [
              " ",
              "// written by kelly p.",
              "CALCULATE( IF(COUNTROWS(VALUES('OpsReviewNavigation'[URL]))>1,BLANK(),VALUES('OpsReviewNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and \" & MAX(OpsReviewNavigation[SubOrgTable])&\"/\"&MAX(OpsReviewNavigation[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&release_central_family[SubOrg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[Supplier]), \" and \" & MAX(OpsReviewNavigation[SupplierTable])&\"/\"&MAX(OpsReviewNavigation[SupplierField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[Supplier]),\"'\"&release_central_family[Supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[IpFamily]), \" and \" & MAX(OpsReviewNavigation[IPFamilyTable])&\"/IpFamily\" &\" in (\"&CONCATENATEX(VALUES(release_central_family[IpFamily]),\"'\"&release_central_family[IpFamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(IP_data[Configuration]), \" and \" & MAX(OpsReviewNavigation[ConfigurationTable])&\"/\"&MAX(OpsReviewNavigation[ConfigurationField]) &\" in (\"&CONCATENATEX(VALUES(IP_data[Configuration]),\"'\"&IP_data[Configuration]&\"'\", \",\")&\")\"",
              ")",
              "",
              "",
              "&",
              "IF(ISFILTERED(ipg_calendar[Category]) || ",
              "ISFILTERED(ipg_calendar[Year]) || ",
              "ISFILTERED(ipg_calendar[Quarter])|| ",
              "ISFILTERED(ipg_calendar[WW]),",
              "     \" and \" & MAX(OpsReviewNavigation[WWTable])&\"/\"&MAX(OpsReviewNavigation[WWField]) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[WW]),[WW], \",\")&\")\"",
              "          &",
              "       \" and \" & MAX(OpsReviewNavigation[TimeTable])&\"/\"&MAX(OpsReviewNavigation[TimeField]) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[Category]),\"'\"&[Category]&\"'\", \",\")&\")\"",
              ") ,",
              "",
              "FILTER(OpsReviewNavigation, OpsReviewNavigation[Level2] = \"PAS\")",
              ")"
            ]
          },
          {
            "name": "trend_lateURL",
            "expression": [
              " ",
              "//written by kelly p.",
              "CALCULATE( IF(COUNTROWS(VALUES('OpsReviewNavigation'[URL]))>1,BLANK(),VALUES('OpsReviewNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and \" & MAX(OpsReviewNavigation[SubOrgTable])&\"/\"&MAX(OpsReviewNavigation[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&release_central_family[SubOrg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[Supplier]), \" and \" & MAX(OpsReviewNavigation[SupplierTable])&\"/\"&MAX(OpsReviewNavigation[SupplierField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[Supplier]),\"'\"&release_central_family[Supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[IpFamily]), \" and \" & MAX(OpsReviewNavigation[IPFamilyTable])&\"/IpFamily\" &\" in (\"&CONCATENATEX(VALUES(release_central_family[IpFamily]),\"'\"&release_central_family[IpFamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(IP_data[Configuration]), \" and \" & MAX(OpsReviewNavigation[ConfigurationTable])&\"/\"&MAX(OpsReviewNavigation[ConfigurationField]) &\" in (\"&CONCATENATEX(VALUES(IP_data[Configuration]),\"'\"&IP_data[Configuration]&\"'\", \",\")&\")\"",
              ")",
              "",
              "&",
              "IF(ISFILTERED(ipg_calendar[Category]) || ",
              "ISFILTERED(ipg_calendar[Year]) || ",
              "ISFILTERED(ipg_calendar[Quarter])|| ",
              "ISFILTERED(ipg_calendar[WW]),",
              "     \" and \" & MAX(OpsReviewNavigation[WWTable])&\"/\"&MAX(OpsReviewNavigation[WWField]) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[WW]),[WW], \",\")&\")\"",
              "          &",
              "       \" and \" & MAX(OpsReviewNavigation[TimeTable])&\"/\"&MAX(OpsReviewNavigation[TimeField]) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[Category]),\"'\"&[Category]&\"'\", \",\")&\")\"",
              ") ,",
              "",
              "",
              "FILTER(OpsReviewNavigation, OpsReviewNavigation[Level2] = \"Trending Late\")",
              ")"
            ]
          },
          {
            "name": "has_url",
            "expression": "If(COUNTA(OpsReviewNavigation[URL]) = 0, 0, 1)"
          },
          {
            "name": "feature_stagingURL",
            "expression": [
              " CALCULATE( IF(COUNTROWS(VALUES('OpsReviewNavigation'[URL]))>1,BLANK(),VALUES('OpsReviewNavigation'[URL])&\"?filter=\")",
              "& ",
              "\"navigation/infrastructure in ('IPG', 'Data')\"",
              "&",
              "IF(ISFILTERED(release_central_family[SubOrg]), \" and \" & MAX(OpsReviewNavigation[SubOrgTable])&\"/\"&MAX(OpsReviewNavigation[SubOrgField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[SubOrg]),\"'\"&release_central_family[SubOrg]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[Supplier]), \" and \" & MAX(OpsReviewNavigation[SupplierTable])&\"/\"&MAX(OpsReviewNavigation[SupplierField]) &\" in (\"&CONCATENATEX(VALUES(release_central_family[Supplier]),\"'\"&release_central_family[Supplier]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(release_central_family[IpFamily]), \" and \" & MAX(OpsReviewNavigation[IPFamilyTable])&\"/IpFamily\" &\" in (\"&CONCATENATEX(VALUES(release_central_family[IpFamily]),\"'\"&release_central_family[IpFamily]&\"'\", \",\")&\")\"",
              ")",
              "&",
              "IF(ISFILTERED(IP_data[Configuration]), \" and \" & MAX(OpsReviewNavigation[ConfigurationTable])&\"/\"&MAX(OpsReviewNavigation[ConfigurationField]) &\" in (\"&CONCATENATEX(VALUES(IP_data[Configuration]),\"'\"&IP_data[Configuration]&\"'\", \",\")&\")\"",
              ")",
              "",
              "",
              "",
              "&",
              "IF(ISFILTERED(ipg_calendar[Category]) || ",
              "ISFILTERED(ipg_calendar[Year]) || ",
              "ISFILTERED(ipg_calendar[Quarter]) || ",
              "ISFILTERED(ipg_calendar[WW]),",
              "     \" and \" & MAX(OpsReviewNavigation[WWTable])&\"/\"&MAX(OpsReviewNavigation[WWField]) &",
              "     \" in (\"&CONCATENATEX(VALUES(ipg_calendar[WW]),[WW], \",\")&\")\"",
              ") ,",
              "",
              "",
              "FILTER(OpsReviewNavigation, OpsReviewNavigation[Level2] = \"Feature Staging\")",
              ")"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select *",
              "from [ipg_dashboard_url_mdm]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "OpsReviewNavigation"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *",
              "from [ipg_dashboard_url_mdm]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "milestone_key",
        "isHidden": true,
        "columns": [
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          }
        ],
        "partitions": [
          {
            "name": "toplevelmodulename_milestone_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  distinct [MilestoneId]",
                "from  [V_IPG_CARBON_MILESTONE]",
                "where [DevOrg] ='IPG' ",
                "and [Visible] = 'Yes'"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [MilestoneId]",
                  "from  [V_IPG_CARBON_MILESTONE]",
                  "where [DevOrg] ='IPG' ",
                  "and [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  distinct [MilestoneId]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] ='IPG' ",
              "and [Visible] = 'Yes'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "toplevelmodulename_milestone_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  distinct [MilestoneId]",
              "from  [V_IPG_CARBON_MILESTONE]",
              "where [DevOrg] ='IPG' ",
              "and [Visible] = 'Yes'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ipg_calendar",
        "columns": [
          {
            "name": "Category",
            "dataType": "string",
            "sourceColumn": "Category",
            "sortByColumn": "Category_order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Category_order",
            "dataType": "int64",
            "sourceColumn": "Category_order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Year",
            "dataType": "int64",
            "sourceColumn": "Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Quarter",
            "dataType": "string",
            "sourceColumn": "Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Year_Quarter",
            "dataType": "string",
            "sourceColumn": "Year_Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WW start date",
            "dataType": "dateTime",
            "sourceColumn": "WW start date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "YY'WW",
            "dataType": "string",
            "sourceColumn": "YY'WW",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WW_6WW_back",
            "dataType": "int64",
            "sourceColumn": "WW_6WW_back",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current WW",
            "dataType": "int64",
            "sourceColumn": "is current WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is previous WW",
            "dataType": "int64",
            "sourceColumn": "is previous WW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is current WW or before",
            "dataType": "int64",
            "sourceColumn": "is current WW or before",
            "sourceProviderType": "Integer"
          },
          {
            "name": "is previous WW or before",
            "dataType": "int64",
            "sourceColumn": "is previous WW or before",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "ipg_calendar",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Category],[Category_order],",
                " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
                "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
                "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
                "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
                "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
                "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before]",
                "from  [v_ipg_calendar]",
                "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                "order by [WW start date] asc"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Category],[Category_order],",
                  " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
                  "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
                  "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
                  "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
                  "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
                  "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
                  "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
                  "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
                  "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before]",
                  "from  [v_ipg_calendar]",
                  "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
                  "order by [WW start date] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Category],[Category_order],",
              " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
              "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
              "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
              "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
              "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
              "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before]",
              "from  [v_ipg_calendar]",
              "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "order by [WW start date] asc"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ipg_calendar"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Category],[Category_order],",
              " [Intel Year] as [Year], [Intel Quarter] as [Quarter], [Intel Month]as [Month],",
              "[Intel Year]+[Intel Quarter]as [Year_Quarter],",
              "[Intel Year-Work Week] as [WW], [Intel Work Week Start Date] as [WW start date],",
              "right([Intel Year],2)+''''+ right([Intel Year-Work Week],2) as [YY'WW],",
              "max(datepart(ww,dateadd(week,-5,[WW start date]))) over (partition by [WW]) as [WW_6WW_back],",
              "case when [WW] = datepart(ww,getdate()) then 1 else 0 end as [is current WW],",
              "case when [WW] = datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW],",
              "case when [WW] <= datepart(ww,getdate()) then 1 else 0 end as [is current WW or before],",
              "case when [WW] <= datepart(ww,dateadd(week,-1,getdate())) then 1 else 0 end as [is previous WW or before]",
              "from  [v_ipg_calendar]",
              "where [Intel Year-Work Week] between datepart(ww,dateadd(year,-3,getdate()))  and  datepart(ww,dateadd(year,3,getdate())) ",
              "order by [WW start date] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ip_subip_milestone_mapping",
        "columns": [
          {
            "name": "ParentConfigName",
            "dataType": "string",
            "sourceColumn": "ParentConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentConfigurationId",
            "dataType": "string",
            "sourceColumn": "ParentConfigurationId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentMilestoneId",
            "dataType": "string",
            "sourceColumn": "ParentMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ParentConfigurationId, ParentMilestoneId",
            "dataType": "string",
            "sourceColumn": "ParentConfigurationId, ParentMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigName",
            "dataType": "string",
            "sourceColumn": "ChildConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigurationId",
            "dataType": "string",
            "sourceColumn": "ChildConfigurationId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildMilestoneId",
            "dataType": "string",
            "sourceColumn": "ChildMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ChildConfigurationId, ChildMilestoneId",
            "dataType": "string",
            "sourceColumn": "ChildConfigurationId, ChildMilestoneId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MappingId",
            "dataType": "string",
            "sourceColumn": "MappingId"
          },
          {
            "type": "calculated",
            "name": "Parent Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[ParentConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Child Carbon Milestone Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[ChildConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Parent Carbon Milestone Mapping Link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan-mapping/\"&[ParentConfigurationId]",
            "dataCategory": "WebUrl"
          }
        ],
        "partitions": [
          {
            "name": "ip_subip_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct sub_ip_map.*",
                "from",
                "\t(select distinct [IpConfigurationId]",
                "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                "\twhere [Org] = 'IPG') as ip",
                "left join",
                "\t(select distinct [MappingId],",
                "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
                "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
                "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
                "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
                "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
                "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
                "where sub_ip_map.[MappingId] is not null"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct sub_ip_map.*",
                  "from",
                  "\t(select distinct [IpConfigurationId]",
                  "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                  "\twhere [Org] = 'IPG') as ip",
                  "left join",
                  "\t(select distinct [MappingId],",
                  "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
                  "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
                  "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
                  "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
                  "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
                  "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
                  "where sub_ip_map.[MappingId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct sub_ip_map.*",
              "from",
              "\t(select distinct [IpConfigurationId]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] = 'IPG') as ip",
              "left join",
              "\t(select distinct [MappingId],",
              "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
              "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
              "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
              "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
              "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
              "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
              "where sub_ip_map.[MappingId] is not null"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "ip_subip_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct sub_ip_map.*",
              "from",
              "\t(select distinct [IpConfigurationId]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [Org] = 'IPG') as ip",
              "left join",
              "\t(select distinct [MappingId],",
              "\t [ParentConfigName],[ParentConfigurationId],[ParentMilestoneId],",
              "\t[ParentConfigurationId]+', '+[ParentMilestoneId] as [ParentConfigurationId, ParentMilestoneId],",
              "\t[ChildConfigName],[ChildConfigurationId],[ChildMilestoneId],",
              "\t[ChildConfigurationId]+', '+[ChildMilestoneId] as [ChildConfigurationId, ChildMilestoneId]",
              "\tfrom [IPG_CARBON_IP_MILESTONE_MAPPING_WITH_METADATA]) as sub_ip_map",
              "on ip.[IpConfigurationId] =sub_ip_map.[ParentConfigurationId]",
              "where sub_ip_map.[MappingId] is not null</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "parent_child_mapping",
        "columns": [
          {
            "name": "IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "IpConfigurationId"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "Parent_IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "Parent_IpConfigurationId"
          },
          {
            "name": "Parent_Configuration",
            "dataType": "string",
            "sourceColumn": "Parent_Configuration"
          },
          {
            "name": "Child_IpConfigurationId",
            "dataType": "int64",
            "sourceColumn": "Child_IpConfigurationId"
          },
          {
            "name": "Child_Configuration",
            "dataType": "string",
            "sourceColumn": "Child_Configuration"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "ProductName",
            "dataType": "string",
            "sourceColumn": "ProductName"
          },
          {
            "type": "calculated",
            "name": "Parent_Carbon_LInk",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/overview/\"&[Parent_IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "Child_Carbon_link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://hsdes.intel.com/appstore/carbon/overview/\"&[Child_IpConfigurationId]",
            "dataCategory": "WebUrl"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName"
          },
          {
            "name": "Parent_is_ipg",
            "dataType": "int64",
            "sourceColumn": "Parent_is_ipg"
          },
          {
            "name": "Child_is_ipg",
            "dataType": "int64",
            "sourceColumn": "Child_is_ipg"
          }
        ],
        "partitions": [
          {
            "name": "parent_child_mapping",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  ip.*,",
                " direct_parent.[Parent_IpConfigurationId], parent_data.[Parent_Configuration], parent_data.[Parent_is_ipg],",
                "direct_child.[Child_IpConfigurationId],child_data.[Child_Configuration],child_data.[Child_is_ipg],",
                "direct_soc.[ProductId],direct_soc.[ProductName],direct_soc.[DieName]",
                "from",
                "              (select  [IpConfigurationId] ,[Name] as [Configuration]",
                "              from [V_IPG_CARBON_IPCONFIGURATION]",
                "              where [Org] = 'IPG') as ip",
                "left join",
                "              (select [ParentId] as [Parent_IpConfigurationId],[IpConfigurationId],[SortTreeName],[Depth]",
                "              from [V_IPG_CARBON_NESTED_IP]",
                "              where [Depth] in(1,2))as direct_parent",
                "on ip.[IpConfigurationId] = direct_parent.[IpConfigurationId]",
                "left join",
                "              (select [ParentId],[IpConfigurationId]  as [Child_IpConfigurationId],[SortTreeName],[Depth]",
                "              from [V_IPG_CARBON_NESTED_IP]",
                "              where [Depth] =2)as direct_child",
                "on ip.[IpConfigurationId] = direct_child.[ParentId]",
                "left join",
                "\t(select [ProductId],[ProductName],[ProductName]as[DieName],[IpConfigurationId],[Depth]",
                "\tfrom [V_IPG_CARBON_SOC_NESTED_IP_LIST])as direct_soc",
                "on  (direct_parent.[Parent_IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 2 ) or",
                "(ip.[IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 1 and  direct_soc.[Depth] =1 )",
                "left join",
                "\t(select [IpConfigurationId],[Name] as [Parent_Configuration],",
                "\tcase when [Org] = 'IPG' then 1 else 0 end as [Parent_is_ipg]",
                "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as parent_data",
                "on  direct_parent.[Parent_IpConfigurationId] =  parent_data.[IpConfigurationId]",
                "left join",
                "\t(select [IpConfigurationId],[Name] as [Child_Configuration],",
                "\tcase when [Org] = 'IPG' then 1 else 0 end as [Child_is_ipg]",
                "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as child_data",
                "on  direct_child.[Child_IpConfigurationId] =  child_data.[IpConfigurationId]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  ip.*,",
                  " direct_parent.[Parent_IpConfigurationId], parent_data.[Parent_Configuration], parent_data.[Parent_is_ipg],",
                  "direct_child.[Child_IpConfigurationId],child_data.[Child_Configuration],child_data.[Child_is_ipg],",
                  "direct_soc.[ProductId],direct_soc.[ProductName],direct_soc.[DieName]",
                  "from",
                  "              (select  [IpConfigurationId] ,[Name] as [Configuration]",
                  "              from [V_IPG_CARBON_IPCONFIGURATION]",
                  "              where [Org] = 'IPG') as ip",
                  "left join",
                  "              (select [ParentId] as [Parent_IpConfigurationId],[IpConfigurationId],[SortTreeName],[Depth]",
                  "              from [V_IPG_CARBON_NESTED_IP]",
                  "              where [Depth] in(1,2))as direct_parent",
                  "on ip.[IpConfigurationId] = direct_parent.[IpConfigurationId]",
                  "left join",
                  "              (select [ParentId],[IpConfigurationId]  as [Child_IpConfigurationId],[SortTreeName],[Depth]",
                  "              from [V_IPG_CARBON_NESTED_IP]",
                  "              where [Depth] =2)as direct_child",
                  "on ip.[IpConfigurationId] = direct_child.[ParentId]",
                  "left join",
                  "\t(select [ProductId],[ProductName],[ProductName]as[DieName],[IpConfigurationId],[Depth]",
                  "\tfrom [V_IPG_CARBON_SOC_NESTED_IP_LIST])as direct_soc",
                  "on  (direct_parent.[Parent_IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 2 ) or",
                  "(ip.[IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 1 and  direct_soc.[Depth] =1 )",
                  "left join",
                  "\t(select [IpConfigurationId],[Name] as [Parent_Configuration],",
                  "\tcase when [Org] = 'IPG' then 1 else 0 end as [Parent_is_ipg]",
                  "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as parent_data",
                  "on  direct_parent.[Parent_IpConfigurationId] =  parent_data.[IpConfigurationId]",
                  "left join",
                  "\t(select [IpConfigurationId],[Name] as [Child_Configuration],",
                  "\tcase when [Org] = 'IPG' then 1 else 0 end as [Child_is_ipg]",
                  "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as child_data",
                  "on  direct_child.[Child_IpConfigurationId] =  child_data.[IpConfigurationId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "AGG of parent configuration",
            "expression": [
              "",
              "CONCATENATEX(VALUES(parent_child_mapping[Parent_Configuration]),[Parent_Configuration], UNICHAR(10),[Parent_Configuration],ASC)",
              ""
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  ip.*,",
              " direct_parent.[Parent_IpConfigurationId], parent_data.[Parent_Configuration], parent_data.[Parent_is_ipg],",
              "direct_child.[Child_IpConfigurationId],child_data.[Child_Configuration],child_data.[Child_is_ipg],",
              "direct_soc.[ProductId],direct_soc.[ProductName],direct_soc.[DieName]",
              "from",
              "              (select  [IpConfigurationId] ,[Name] as [Configuration]",
              "              from [V_IPG_CARBON_IPCONFIGURATION]",
              "              where [Org] = 'IPG') as ip",
              "left join",
              "              (select [ParentId] as [Parent_IpConfigurationId],[IpConfigurationId],[SortTreeName],[Depth]",
              "              from [V_IPG_CARBON_NESTED_IP]",
              "              where [Depth] in(1,2))as direct_parent",
              "on ip.[IpConfigurationId] = direct_parent.[IpConfigurationId]",
              "left join",
              "              (select [ParentId],[IpConfigurationId]  as [Child_IpConfigurationId],[SortTreeName],[Depth]",
              "              from [V_IPG_CARBON_NESTED_IP]",
              "              where [Depth] =2)as direct_child",
              "on ip.[IpConfigurationId] = direct_child.[ParentId]",
              "left join",
              "\t(select [ProductId],[ProductName],[ProductName]as[DieName],[IpConfigurationId],[Depth]",
              "\tfrom [V_IPG_CARBON_SOC_NESTED_IP_LIST])as direct_soc",
              "on  (direct_parent.[Parent_IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 2 ) or",
              "(ip.[IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 1 and  direct_soc.[Depth] =1 )",
              "left join",
              "\t(select [IpConfigurationId],[Name] as [Parent_Configuration],",
              "\tcase when [Org] = 'IPG' then 1 else 0 end as [Parent_is_ipg]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as parent_data",
              "on  direct_parent.[Parent_IpConfigurationId] =  parent_data.[IpConfigurationId]",
              "left join",
              "\t(select [IpConfigurationId],[Name] as [Child_Configuration],",
              "\tcase when [Org] = 'IPG' then 1 else 0 end as [Child_is_ipg]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as child_data",
              "on  direct_child.[Child_IpConfigurationId] =  child_data.[IpConfigurationId]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "parent_child_mapping"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  ip.*,",
              " direct_parent.[Parent_IpConfigurationId], parent_data.[Parent_Configuration], parent_data.[Parent_is_ipg],",
              "direct_child.[Child_IpConfigurationId],child_data.[Child_Configuration],child_data.[Child_is_ipg],",
              "direct_soc.[ProductId],direct_soc.[ProductName],direct_soc.[DieName]",
              "from",
              "              (select  [IpConfigurationId] ,[Name] as [Configuration]",
              "              from [V_IPG_CARBON_IPCONFIGURATION]",
              "              where [Org] = 'IPG') as ip",
              "left join",
              "              (select [ParentId] as [Parent_IpConfigurationId],[IpConfigurationId],[SortTreeName],[Depth]",
              "              from [V_IPG_CARBON_NESTED_IP]",
              "              where [Depth] in(1,2))as direct_parent",
              "on ip.[IpConfigurationId] = direct_parent.[IpConfigurationId]",
              "left join",
              "              (select [ParentId],[IpConfigurationId]  as [Child_IpConfigurationId],[SortTreeName],[Depth]",
              "              from [V_IPG_CARBON_NESTED_IP]",
              "              where [Depth] =2)as direct_child",
              "on ip.[IpConfigurationId] = direct_child.[ParentId]",
              "left join",
              "\t(select [ProductId],[ProductName],[ProductName]as[DieName],[IpConfigurationId],[Depth]",
              "\tfrom [V_IPG_CARBON_SOC_NESTED_IP_LIST])as direct_soc",
              "on  (direct_parent.[Parent_IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 2 ) or",
              "(ip.[IpConfigurationId] = direct_soc.[IpConfigurationId] and direct_parent.[Depth] = 1 and  direct_soc.[Depth] =1 )",
              "left join",
              "\t(select [IpConfigurationId],[Name] as [Parent_Configuration],",
              "\tcase when [Org] = 'IPG' then 1 else 0 end as [Parent_is_ipg]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as parent_data",
              "on  direct_parent.[Parent_IpConfigurationId] =  parent_data.[IpConfigurationId]",
              "left join",
              "\t(select [IpConfigurationId],[Name] as [Child_Configuration],",
              "\tcase when [Org] = 'IPG' then 1 else 0 end as [Child_is_ipg]",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]) as child_data",
              "on  direct_child.[Child_IpConfigurationId] =  child_data.[IpConfigurationId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "pearl_data",
        "columns": [
          {
            "name": "ipConfigName",
            "dataType": "string",
            "sourceColumn": "ipConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ipConfigID",
            "dataType": "int64",
            "sourceColumn": "ipConfigID",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "milestoneID",
            "dataType": "int64",
            "sourceColumn": "milestoneID",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "checklistName",
            "dataType": "string",
            "sourceColumn": "checklistName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "checklistID",
            "dataType": "int64",
            "sourceColumn": "checklistID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "grade",
            "dataType": "double",
            "sourceColumn": "grade",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "Color",
            "dataType": "string",
            "sourceColumn": "Color",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "pearl_link",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"https://ipquality.swiss.intel.com/checklist?checklist=\"&[checklistID]&\"&milestone=\"&[milestoneID]&\"&mode=1&ip=\"&[ipConfigID]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculated",
            "name": "pearl_color_coding",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(LOWER([Color]),",
              "\"red\",\"#C81326\",",
              "\"yellow\",\"#FEC91B\",",
              "\"green\",\"#708541\",",
              "\"grey\",\"#E9E9E9\"",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "pearl_grade",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([grade]) , \"NA\", FORMAT([grade], \"General Number\")&\"%\")"
          },
          {
            "name": "source",
            "dataType": "string",
            "sourceColumn": "source"
          },
          {
            "name": "milestoneID, checklist",
            "dataType": "string",
            "sourceColumn": "milestoneID, checklist"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url"
          },
          {
            "name": "comment",
            "dataType": "string",
            "sourceColumn": "comment"
          },
          {
            "name": "milestoneID, checklistID",
            "dataType": "string",
            "sourceColumn": "milestoneID, checklistID"
          },
          {
            "type": "calculated",
            "name": "dummy_field",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "name": "ipConfigID, milestoneID",
            "dataType": "string",
            "sourceColumn": "ipConfigID, milestoneID"
          }
        ],
        "partitions": [
          {
            "name": "pearl_data",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  pearl.*",
                "from",
                "\t(select [IpConfigurationId] ",
                "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                "\twhere [org] = 'IPG')as ip",
                "inner join",
                "\t(select 'Pearl' as [source], [ipConfigName],[ipConfigID],[milestoneID],",
                "\t[checklistName],[checklistID], [grade],lower([Color])as [color],",
                "\t[ipConfigID]+', '+ [milestoneID]as [ipConfigID, milestoneID],",
                "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklistID],",
                "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklist],",
                "\t'https://ipquality.swiss.intel.com/checklist?checklist='+[checklistID]+'&milestone='+[milestoneID]+'&mode=1&ip='+[ipConfigID]as [url],",
                "\t'' as [comment]",
                "\tfrom  [V_BM_PEARL_IPPLC_CHECKLIST_STATUS]",
                "\t) as pearl",
                "on ip.[IpConfigurationId] = pearl.[ipConfigID]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  pearl.*",
                  "from",
                  "\t(select [IpConfigurationId] ",
                  "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
                  "\twhere [org] = 'IPG')as ip",
                  "inner join",
                  "\t(select 'Pearl' as [source], [ipConfigName],[ipConfigID],[milestoneID],",
                  "\t[checklistName],[checklistID], [grade],lower([Color])as [color],",
                  "\t[ipConfigID]+', '+ [milestoneID]as [ipConfigID, milestoneID],",
                  "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklistID],",
                  "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklist],",
                  "\t'https://ipquality.swiss.intel.com/checklist?checklist='+[checklistID]+'&milestone='+[milestoneID]+'&mode=1&ip='+[ipConfigID]as [url],",
                  "\t'' as [comment]",
                  "\tfrom  [V_BM_PEARL_IPPLC_CHECKLIST_STATUS]",
                  "\t) as pearl",
                  "on ip.[IpConfigurationId] = pearl.[ipConfigID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "count_green",
            "expression": [
              "0+",
              "CALCULATE([pearl_count_total],",
              "FILTER(ALL(pearl_data[Color]), pearl_data[Color]=\"green\")",
              ")"
            ]
          },
          {
            "name": "count_yellow",
            "expression": [
              "0+",
              "CALCULATE([pearl_count_total],",
              "FILTER(ALL(pearl_data[Color]), pearl_data[Color]=\"yellow\")",
              ")"
            ]
          },
          {
            "name": "count_red",
            "expression": [
              "0+",
              "CALCULATE([pearl_count_total],",
              "FILTER(ALL(pearl_data[Color]), pearl_data[Color]=\"red\")",
              ")"
            ]
          },
          {
            "name": "count_grey",
            "expression": [
              "0+",
              "CALCULATE([pearl_count_total],",
              "FILTER(ALL(pearl_data[Color]), pearl_data[Color]=\"grey\")",
              ")"
            ]
          },
          {
            "name": "pearl_counts",
            "expression": [
              "",
              "[count_green]&\"/\"&",
              "[count_yellow]&\"/\"&",
              "[count_red]&\"/\"&",
              "[count_grey]"
            ]
          },
          {
            "name": "pearl_counts_color_coding",
            "expression": [
              "",
              "IF([count_red] >0, \"#C81326\",",
              "IF([count_yellow] >0, \"#FEC91B\",",
              "IF([count_green] >0, \"#708541\",",
              "\"#E9E9E9\"",
              ")))",
              ""
            ]
          },
          {
            "name": "pearl_counts_color_coding_integer",
            "expression": [
              "",
              "IF([count_red] >0, 1,",
              "IF([count_yellow] >0, 2,",
              "IF([count_green] >0, 3,",
              "4",
              ")))"
            ]
          },
          {
            "name": "pearl_count_total",
            "expression": [
              "0+",
              "CALCULATE(SUMX(DISTINCT(pearl_data[milestoneID, checklist]),[pearl_MaxDummy])",
              ")"
            ]
          },
          {
            "name": "pearl_MaxDummy",
            "expression": "MAX(pearl_data[dummy_field])"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  pearl.*",
              "from",
              "\t(select [IpConfigurationId] ",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [org] = 'IPG')as ip",
              "inner join",
              "\t(select 'Pearl' as [source], [ipConfigName],[ipConfigID],[milestoneID],",
              "\t[checklistName],[checklistID], [grade],lower([Color])as [color],",
              "\t[ipConfigID]+', '+ [milestoneID]as [ipConfigID, milestoneID],",
              "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklistID],",
              "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklist],",
              "\t'https://ipquality.swiss.intel.com/checklist?checklist='+[checklistID]+'&milestone='+[milestoneID]+'&mode=1&ip='+[ipConfigID]as [url],",
              "\t'' as [comment]",
              "\tfrom  [V_BM_PEARL_IPPLC_CHECKLIST_STATUS]",
              "\t) as pearl",
              "on ip.[IpConfigurationId] = pearl.[ipConfigID]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "pearl_data"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  pearl.*",
              "from",
              "\t(select [IpConfigurationId] ",
              "\tfrom [V_IPG_CARBON_IPCONFIGURATION]",
              "\twhere [org] = 'IPG')as ip",
              "inner join",
              "\t(select 'Pearl' as [source], [ipConfigName],[ipConfigID],[milestoneID],",
              "\t[checklistName],[checklistID], [grade],lower([Color])as [color],",
              "\t[ipConfigID]+', '+ [milestoneID]as [ipConfigID, milestoneID],",
              "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklistID],",
              "\t[milestoneID]+', '+ [checklistName]as [milestoneID, checklist],",
              "\t'https://ipquality.swiss.intel.com/checklist?checklist='+[checklistID]+'&milestone='+[milestoneID]+'&mode=1&ip='+[ipConfigID]as [url],",
              "\t'' as [comment]",
              "\tfrom  [V_BM_PEARL_IPPLC_CHECKLIST_STATUS]",
              "\t) as pearl",
              "on ip.[IpConfigurationId] = pearl.[ipConfigID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "ipg_feature",
        "columns": [
          {
            "name": "QueryFeature.Alpha_Milestone",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Alpha_Milestone"
          },
          {
            "name": "QueryFeature.Alpha_MiletstoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Alpha_MiletstoneID"
          },
          {
            "name": "QueryFeature.Alpha_TrendDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Alpha_TrendDate"
          },
          {
            "name": "QueryFeature.Beta_Milestone",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Beta_Milestone"
          },
          {
            "name": "QueryFeature.Beta_MilestoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Beta_MilestoneID"
          },
          {
            "name": "QueryFeature.Beta_TrendDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Beta_TrendDate"
          },
          {
            "name": "QueryFeature.Configuration",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Configuration"
          },
          {
            "name": "QueryFeature.id",
            "dataType": "string",
            "sourceColumn": "QueryFeature.id"
          },
          {
            "name": "QueryFeature.IPFamily",
            "dataType": "string",
            "sourceColumn": "QueryFeature.IPFamily"
          },
          {
            "name": "QueryFeature.Prod_Milestone",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Prod_Milestone"
          },
          {
            "name": "QueryFeature.Prod_MilestoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Prod_MilestoneID"
          },
          {
            "name": "QueryFeature.Prod_TrendDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.Prod_TrendDate"
          },
          {
            "name": "QueryFeature.SoC",
            "dataType": "string",
            "sourceColumn": "QueryFeature.SoC"
          },
          {
            "name": "QueryFeature.SoC Die",
            "dataType": "string",
            "sourceColumn": "QueryFeature.SoC Die"
          },
          {
            "name": "QueryFeature.title",
            "dataType": "string",
            "sourceColumn": "QueryFeature.title"
          },
          {
            "name": "QueryFeature.url",
            "dataType": "string",
            "sourceColumn": "QueryFeature.url"
          },
          {
            "name": "QueryFeature.hsdes_jira_status",
            "dataType": "string",
            "sourceColumn": "QueryFeature.hsdes_jira_status"
          },
          {
            "name": "QueryFeature.FeatureLiveData",
            "dataType": "string",
            "sourceColumn": "QueryFeature.FeatureLiveData"
          },
          {
            "name": "QueryFeature.ContractCommitAlphaMilestoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitAlphaMilestoneID"
          },
          {
            "name": "QueryFeature.ContractCommitAlphaPORDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitAlphaPORDate"
          },
          {
            "name": "QueryFeature.ContractCommitBetaMilestoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitBetaMilestoneID"
          },
          {
            "name": "QueryFeature.ContractCommitBetaPORDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitBetaPORDate"
          },
          {
            "name": "QueryFeature.ContractCommitProdMilestoneID",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitProdMilestoneID"
          },
          {
            "name": "QueryFeature.ContractCommitProdPORDate",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ContractCommitProdPORDate"
          },
          {
            "type": "calculated",
            "name": "alpha_actual_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([QueryFeature.Alpha_MiletstoneID]=[QueryFeature.Beta_MilestoneID] || [QueryFeature.Alpha_MiletstoneID]=[QueryFeature.Prod_MilestoneID],0,1)"
          },
          {
            "type": "calculated",
            "name": "beta_actual_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF( [QueryFeature.Beta_MilestoneID]=[QueryFeature.Prod_MilestoneID],0,1)"
          },
          {
            "type": "calculated",
            "name": "prod_actual_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "alpha_commit_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([QueryFeature.ContractCommitAlphaMilestoneID]=[QueryFeature.ContractCommitBetaMilestoneID] || [QueryFeature.ContractCommitAlphaMilestoneID]=[QueryFeature.ContractCommitProdMilestoneID],0,1)"
          },
          {
            "type": "calculated",
            "name": "beta_commit_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([QueryFeature.ContractCommitBetaMilestoneID]=[QueryFeature.ContractCommitProdMilestoneID],0,1)"
          },
          {
            "type": "calculated",
            "name": "prod_commit_valid_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "name": "QueryFeature.ipconfigurationid",
            "dataType": "string",
            "sourceColumn": "QueryFeature.ipconfigurationid"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"AnalysisServices/ipg_feature intel com;ipg_feature\",",
                "    Model1 = Source{[Id=\"Model\"]}[Data],",
                "    Model2 = Model1{[Id=\"Model\"]}[Data],",
                "    #\"Added Items\" = Cube.Transform(Model2,",
                "        {",
                "            {Cube.AddAndExpandDimensionColumn, \"[QueryFeature]\", {\"[QueryFeature].[Alpha_Milestone].[Alpha_Milestone]\", \"[QueryFeature].[Alpha_MiletstoneID].[Alpha_MiletstoneID]\", \"[QueryFeature].[Alpha_TrendDate].[Alpha_TrendDate]\", \"[QueryFeature].[Beta_Milestone].[Beta_Milestone]\", \"[QueryFeature].[Beta_MilestoneID].[Beta_MilestoneID]\", \"[QueryFeature].[Beta_TrendDate].[Beta_TrendDate]\", \"[QueryFeature].[Configuration].[Configuration]\", \"[QueryFeature].[ContractCommitAlphaMilestoneID].[ContractCommitAlphaMilestoneID]\", \"[QueryFeature].[ContractCommitAlphaPORDate].[ContractCommitAlphaPORDate]\", \"[QueryFeature].[ContractCommitBetaMilestoneID].[ContractCommitBetaMilestoneID]\", \"[QueryFeature].[ContractCommitBetaPORDate].[ContractCommitBetaPORDate]\", \"[QueryFeature].[ContractCommitProdMilestoneID].[ContractCommitProdMilestoneID]\", \"[QueryFeature].[ContractCommitProdPORDate].[ContractCommitProdPORDate]\", \"[QueryFeature].[FeatureLiveData].[FeatureLiveData]\", \"[QueryFeature].[hsdes_jira_status].[hsdes_jira_status]\", \"[QueryFeature].[id].[id]\", \"[QueryFeature].[ipconfigurationid].[ipconfigurationid]\", \"[QueryFeature].[IPFamily].[IPFamily]\", \"[QueryFeature].[Prod_Milestone].[Prod_Milestone]\", \"[QueryFeature].[Prod_MilestoneID].[Prod_MilestoneID]\", \"[QueryFeature].[Prod_TrendDate].[Prod_TrendDate]\", \"[QueryFeature].[SoC].[SoC]\", \"[QueryFeature].[SoC Die].[SoC Die]\", \"[QueryFeature].[title].[title]\", \"[QueryFeature].[url].[url]\"}, {\"QueryFeature.Alpha_Milestone\", \"QueryFeature.Alpha_MiletstoneID\", \"QueryFeature.Alpha_TrendDate\", \"QueryFeature.Beta_Milestone\", \"QueryFeature.Beta_MilestoneID\", \"QueryFeature.Beta_TrendDate\", \"QueryFeature.Configuration\", \"QueryFeature.ContractCommitAlphaMilestoneID\", \"QueryFeature.ContractCommitAlphaPORDate\", \"QueryFeature.ContractCommitBetaMilestoneID\", \"QueryFeature.ContractCommitBetaPORDate\", \"QueryFeature.ContractCommitProdMilestoneID\", \"QueryFeature.ContractCommitProdPORDate\", \"QueryFeature.FeatureLiveData\", \"QueryFeature.hsdes_jira_status\", \"QueryFeature.id\", \"QueryFeature.ipconfigurationid\", \"QueryFeature.IPFamily\", \"QueryFeature.Prod_Milestone\", \"QueryFeature.Prod_MilestoneID\", \"QueryFeature.Prod_TrendDate\", \"QueryFeature.SoC\", \"QueryFeature.SoC Die\", \"QueryFeature.title\", \"QueryFeature.url\"}}",
                "        }),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Added Items\", each [QueryFeature.FeatureLiveData] = \"1\")",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ]
      },
      {
        "name": "feature_milestone_data",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "id",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[id]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "URL",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[URL]",
            "dataCategory": "WebUrl"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Title",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Title]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Configuration",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Configuration]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IPFamily",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[IPFamily]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MilestoneId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "[MilestoneId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Stage",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Stage]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Status",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Status]"
          },
          {
            "type": "calculated",
            "name": "stage_color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Stage]= \"Alpha\", \"#76CEFF\",",
              "IF([Stage]= \"Beta\", \"#FFC599\",",
              "IF([Stage]= \"Prod\", \"#98A1FF\"",
              ")))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "Actual/Planned",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Actual/Planned]"
          },
          {
            "type": "calculated",
            "name": "Drop",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(ip_milestone_data[Drop],ip_milestone_data[MilestoneId],feature_milestone_data[MilestoneId])"
          },
          {
            "type": "calculated",
            "name": "actual_planned_color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Actual/Planned]= \"Actual\", \"#0068B5\",",
              "IF([Actual/Planned]= \"Planned\", \"#E96115\"",
              "))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ContractCommitPORDate",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ContractCommitPORDate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "is_valid",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[is_valid]"
          },
          {
            "type": "calculated",
            "name": "dummy_field",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Commit/Actual",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Commit/Actual]"
          },
          {
            "type": "calculated",
            "name": "commit_actual_color",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF([Commit/Actual]= \"Actual\", \"#0068B5\",",
              "IF([Commit/Actual]= \"Commit\", \"#E96115\"",
              "))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "actual_milestoneid_lookup",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE(feature_milestone_data[id],",
              "feature_milestone_data[MilestoneId],feature_milestone_data[MilestoneId],",
              "feature_milestone_data[Commit/Actual],\"Actual\",",
              "feature_milestone_data[Stage],feature_milestone_data[Stage],",
              "feature_milestone_data[id],feature_milestone_data[id]",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "is_missed",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([Commit/Actual] =\"Commit\" && ISBLANK([actual_milestoneid_lookup]),1,0)"
          },
          {
            "type": "calculated",
            "name": "IpConfigurationId, MilestoneId",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IpConfigurationId]&\", \"&[MilestoneId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IpConfigurationId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[IpConfigurationId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                " ",
                "        UNION(",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.Alpha_MiletstoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Actual\",",
                "\t\t\"Commit/Actual\", \"Actual\",",
                "\t\t\"Stage\", \"Alpha\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\", Blank(),",
                "\t\t\"is_valid\", ipg_feature[alpha_actual_valid_check],",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.Alpha_MiletstoneID])",
                "",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.Beta_MilestoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Actual\",",
                "\t\t\"Commit/Actual\", \"Actual\",",
                "\t\t\"Stage\", \"Beta\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\", Blank(),",
                "\t\t\"is_valid\", ipg_feature[beta_actual_valid_check],",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.Beta_MilestoneID])",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.Prod_MilestoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Actual\",",
                "\t\t\"Commit/Actual\", \"Actual\",",
                "\t\t\"Stage\", \"Prod\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\", Blank(),",
                "\t\t\"is_valid\", ipg_feature[prod_actual_valid_check],",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.Prod_MilestoneID])",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.ContractCommitAlphaMilestoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Planned\",",
                "\t\t\"Commit/Actual\", \"Commit\",",
                "\t\t\"Stage\", \"Alpha\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\",ipg_feature[QueryFeature.ContractCommitAlphaPORDate],",
                "\t\t\"is_valid\", ipg_feature[alpha_commit_valid_check],\t\t",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.ContractCommitAlphaMilestoneID])",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.ContractCommitBetaMilestoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Planned\",",
                "\t\t\"Commit/Actual\", \"Commit\",\t\t\t\t\t",
                "\t\t\"Stage\", \"Beta\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\",ipg_feature[QueryFeature.ContractCommitBetaPORDate],",
                "\t\t\"is_valid\", ipg_feature[beta_commit_valid_check],",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.ContractCommitBetaMilestoneID])",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(ipg_feature, ",
                "        NOT(ISBLANK(ipg_feature[QueryFeature.ContractCommitProdMilestoneID])) && ",
                "                    ipg_feature[QueryFeature.hsdes_jira_status] in {\"complete\", \"por\", \"Scheduled\", \"Alpha\", \"Beta\", \"Prod\"}",
                "                    ),",
                "\t\t\"Actual/Planned\", \"Planned\",",
                "\t\t\"Commit/Actual\", \"Commit\",\t\t\t\t\t",
                "\t\t\"Stage\", \"Prod\",",
                "\t\t\"id\", ipg_feature[QueryFeature.id],",
                "\t\t\"URL\", ipg_feature[QueryFeature.url],",
                "\t\t\"Title\", ipg_feature[QueryFeature.title],",
                "\t\t\"Status\", ipg_feature[QueryFeature.hsdes_jira_status],",
                "\t\t\"Configuration\", ipg_feature[QueryFeature.Configuration],",
                "\t\t\"IpConfigurationId\", ipg_feature[QueryFeature.ipconfigurationid],",
                "\t\t\"IPFamily\", ipg_feature[QueryFeature.IPFamily],",
                "\t\t\"ContractCommitPORDate\",ipg_feature[QueryFeature.ContractCommitProdPORDate],",
                "\t\t\"is_valid\", ipg_feature[prod_commit_valid_check],",
                "\t\t\"MilestoneId\", VALUE(ipg_feature[QueryFeature.ContractCommitProdMilestoneID])",
                ")",
                ") ",
                ""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "ActualAlpha",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Actual\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Alpha\")",
              ")"
            ]
          },
          {
            "name": "ActualBeta",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Actual\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Beta\")",
              ")"
            ]
          },
          {
            "name": "ActualProd",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Actual\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Prod\")",
              ")"
            ]
          },
          {
            "name": "Zero+ActualAlpha",
            "expression": [
              "",
              "0+[ActualAlpha]",
              ""
            ]
          },
          {
            "name": "Zero+ActualBeta",
            "expression": [
              "",
              "0+[ActualBeta]",
              "",
              ""
            ]
          },
          {
            "name": "Zero+ActualProd",
            "expression": [
              "",
              "0+[ActualProd]",
              ""
            ]
          },
          {
            "name": "ContractCommitAlpha",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Commit\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Alpha\")",
              ")"
            ]
          },
          {
            "name": "ContractCommitBeta",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Commit\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Beta\")",
              ")"
            ]
          },
          {
            "name": "ContractCommitProd",
            "expression": [
              "",
              "CALCULATE([FeatureCount],",
              "FILTER(ALL(feature_milestone_data[Commit/Actual]), feature_milestone_data[Commit/Actual]= \"Commit\"),",
              "FILTER(ALL(feature_milestone_data[Stage]), feature_milestone_data[Stage]= \"Prod\")",
              ")"
            ]
          },
          {
            "name": "features_counts_summary",
            "expression": [
              "",
              "\"Planned: \" & ",
              "0+[ContractCommitAlpha] &\"/\"& 0+[ContractCommitBeta] &\"/\"& 0+[ContractCommitProd] ",
              "&UNICHAR(10)&",
              "\"Actual:  \" & ",
              "0+[ActualAlpha] &\"/\"& 0+[ActualBeta] &\"/\"& 0+[ActualProd] "
            ]
          },
          {
            "name": "feature_MaxDummy",
            "expression": "MAX(feature_milestone_data[dummy_field])"
          },
          {
            "name": "FeatureCount",
            "expression": [
              "",
              "CALCULATE(SUMX(DISTINCT(feature_milestone_data[id]),[feature_MaxDummy]),",
              "FILTER(ALL(feature_milestone_data[is_valid]), feature_milestone_data[is_valid]= 1)",
              ")"
            ]
          },
          {
            "name": "FeatureDeliveryOffset",
            "expression": [
              "",
              "([ActualAlpha]+[ActualBeta]+[ActualProd])",
              "-",
              "([ContractCommitAlpha]+[ContractCommitBeta]+[ContractCommitProd])"
            ]
          },
          {
            "name": "AlphaDeliveryOffset",
            "expression": [
              "",
              "[ActualAlpha] - [ContractCommitAlpha]"
            ]
          },
          {
            "name": "BetaDeliveryOffset",
            "expression": [
              "",
              "[ActualBeta] - [ContractCommitBeta]"
            ]
          },
          {
            "name": "ProdDeliveryOffset",
            "expression": [
              "",
              "[ActualProd] - [ContractCommitProd]"
            ]
          }
        ]
      },
      {
        "name": "product_to_milestoneid",
        "columns": [
          {
            "name": "Product",
            "dataType": "string",
            "sourceColumn": "Product",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MilestoneId",
            "dataType": "int64",
            "sourceColumn": "MilestoneId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "name": "Configuration, MilestoneId",
            "dataType": "string",
            "sourceColumn": "Configuration, MilestoneId"
          }
        ],
        "partitions": [
          {
            "name": "product_to_milestoneid",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "SELECT DISTINCT   (ISNULL(Product.[Product],'') + ' ' + ISNULL(Product.[Stepping],'')) AS Product , ISNULL(Product.[milestoneid],0) AS MilestoneId ,",
                "ISNULL(config.[Configuration], '') AS Configuration , (config.[Configuration] + ', ' + product.[milestoneid]) AS [Configuration, MilestoneId]",
                "FROM  V_DSS_PRODUCT_IP_MILESTONE_MAPPING AS Product",
                "LEFT JOIN (",
                "\tSELECT DISTINCT  ISNULL([MilestoneId], 0) AS Milestoneid, ISNULL([Configuration], ' ') AS Configuration",
                "\tFROM V_IPG_CARBON_MILESTONE) AS config",
                "ON Product.[MilestoneId] = config.[MilestoneId]"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT DISTINCT   (ISNULL(Product.[Product],'') + ' ' + ISNULL(Product.[Stepping],'')) AS Product , ISNULL(Product.[milestoneid],0) AS MilestoneId ,",
                  "ISNULL(config.[Configuration], '') AS Configuration , (config.[Configuration] + ', ' + product.[milestoneid]) AS [Configuration, MilestoneId]",
                  "FROM  V_DSS_PRODUCT_IP_MILESTONE_MAPPING AS Product",
                  "LEFT JOIN (",
                  "\tSELECT DISTINCT  ISNULL([MilestoneId], 0) AS Milestoneid, ISNULL([Configuration], ' ') AS Configuration",
                  "\tFROM V_IPG_CARBON_MILESTONE) AS config",
                  "ON Product.[MilestoneId] = config.[MilestoneId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Sum of Configuration",
            "expression": "SUM([Configuration])"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "SELECT DISTINCT   (ISNULL(Product.[Product],'') + ' ' + ISNULL(Product.[Stepping],'')) AS Product , ISNULL(Product.[milestoneid],0) AS MilestoneId ,",
              "ISNULL(config.[Configuration], '') AS Configuration , (config.[Configuration] + ', ' + product.[milestoneid]) AS [Configuration, MilestoneId]",
              "FROM  V_DSS_PRODUCT_IP_MILESTONE_MAPPING AS Product",
              "LEFT JOIN (",
              "\tSELECT DISTINCT  ISNULL([MilestoneId], 0) AS Milestoneid, ISNULL([Configuration], ' ') AS Configuration",
              "\tFROM V_IPG_CARBON_MILESTONE) AS config",
              "ON Product.[MilestoneId] = config.[MilestoneId]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "product_to_milestoneid"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT DISTINCT   (ISNULL(Product.[Product],'') + ' ' + ISNULL(Product.[Stepping],'')) AS Product , ISNULL(Product.[milestoneid],0) AS MilestoneId ,",
              "ISNULL(config.[Configuration], '') AS Configuration , (config.[Configuration] + ', ' + product.[milestoneid]) AS [Configuration, MilestoneId]",
              "FROM  V_DSS_PRODUCT_IP_MILESTONE_MAPPING AS Product",
              "LEFT JOIN (",
              "\tSELECT DISTINCT  ISNULL([MilestoneId], 0) AS Milestoneid, ISNULL([Configuration], ' ') AS Configuration",
              "\tFROM V_IPG_CARBON_MILESTONE) AS config",
              "ON Product.[MilestoneId] = config.[MilestoneId]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryMilestonedatediff",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "milestone_version.based_on",
            "dataType": "string",
            "sourceColumn": "milestone_version.based_on",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "milestone_version.ww_trend_date",
            "dataType": "string",
            "sourceColumn": "milestone_version.ww_trend_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrenddateYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrenddateYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "milestone_version.milestone",
            "dataType": "string",
            "sourceColumn": "milestone_version.milestone",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "milestone_version.name",
            "dataType": "string",
            "sourceColumn": "milestone_version.name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family_affected",
            "dataType": "string",
            "sourceColumn": "family_affected",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop",
            "dataType": "string",
            "sourceColumn": "drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "DateDiff",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "DATEDIFF(QueryMilestonedatediff[based_on_trend_dateYYYYWW],QueryMilestonedatediff[TrenddateYYYYWW],DAY)"
          },
          {
            "name": "LeadProductId",
            "dataType": "int64",
            "sourceColumn": "LeadProductId"
          },
          {
            "name": "Generation",
            "dataType": "string",
            "sourceColumn": "Generation"
          },
          {
            "name": "PlanningStatus",
            "dataType": "string",
            "sourceColumn": "PlanningStatus"
          },
          {
            "name": "PorYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PorYYYYWW"
          },
          {
            "name": "DevSubOrg",
            "dataType": "string",
            "sourceColumn": "DevSubOrg"
          },
          {
            "name": "DevOrg",
            "dataType": "string",
            "sourceColumn": "DevOrg"
          },
          {
            "name": "based_on_trend_dateYYYYWW",
            "dataType": "int64",
            "sourceColumn": "based_on_trend_dateYYYYWW"
          },
          {
            "name": "DevGroup",
            "dataType": "string",
            "sourceColumn": "DevGroup"
          },
          {
            "name": "ipg_supplier",
            "dataType": "string",
            "sourceColumn": "ipg_supplier"
          },
          {
            "name": "ipg_family",
            "dataType": "string",
            "sourceColumn": "ipg_family"
          }
        ],
        "partitions": [
          {
            "name": "QueryMilestonedatediff",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*select parent.id,",
                "             parent.[milestone_version.based_on],",
                "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                "          CONVERT (INT,REPLACE(( select [milestone_version.ww_trend_date] ",
                "            from [ES.milestone_version]  ",
                "           where [id] =  parent.[milestone_version.based_on] ),'ww','')) as based_on_trend_dateYYYWW, parent.[milestone_version.milestone],parent.[title],",
                "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                "          carbon.drop, carbon.trendYYYYWW,carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg",
                "from [ES.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.id = carbon.milestoneid",
                "where [milestone_version.based_on] is not null",
                "--and parent.[id]in ('14014488223','22010422161')",
                "*/",
                "/*",
                "-- old query replaced by Mak ww43 -- ",
                "select parent.id,",
                "             parent.[milestone_version.based_on],",
                "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW, ",
                "           parent.[milestone_version.milestone],parent.[title],",
                "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup",
                "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
                "where [milestone_version.based_on] is not null",
                "and  parent.[id] is not null",
                "and parent.[status] = 'active'",
                "and parent.ww=DATEPART(ww,GETUTCDATE())",
                "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')",
                "",
                "*/",
                "",
                "select parent.id,",
                "             parent.[milestone_version.based_on],",
                "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW,",
                "           parent.[milestone_version.milestone],parent.[title],",
                "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup, ipg_fam.ip_supplier as ipg_supplier, ipg_fam.Family as ipg_family",
                "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
                "right join [v_ipg_family_gladius] ipg_fam ON ipg_fam.devsuborg = carbon.DevSubOrg and ipg_fam.ip_supplier = carbon.DevGroup",
                "where [milestone_version.based_on] is not null",
                "and  parent.[id] is not null",
                "and parent.[status] = 'active'",
                "and parent.ww=DATEPART(ww,GETUTCDATE())",
                "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*select parent.id,",
                  "             parent.[milestone_version.based_on],",
                  "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                  "          CONVERT (INT,REPLACE(( select [milestone_version.ww_trend_date] ",
                  "            from [ES.milestone_version]  ",
                  "           where [id] =  parent.[milestone_version.based_on] ),'ww','')) as based_on_trend_dateYYYWW, parent.[milestone_version.milestone],parent.[title],",
                  "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                  "          carbon.drop, carbon.trendYYYYWW,carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg",
                  "from [ES.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.id = carbon.milestoneid",
                  "where [milestone_version.based_on] is not null",
                  "--and parent.[id]in ('14014488223','22010422161')",
                  "*/",
                  "/*",
                  "-- old query replaced by Mak ww43 -- ",
                  "select parent.id,",
                  "             parent.[milestone_version.based_on],",
                  "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                  "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW, ",
                  "           parent.[milestone_version.milestone],parent.[title],",
                  "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                  "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup",
                  "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
                  "where [milestone_version.based_on] is not null",
                  "and  parent.[id] is not null",
                  "and parent.[status] = 'active'",
                  "and parent.ww=DATEPART(ww,GETUTCDATE())",
                  "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')",
                  "",
                  "*/",
                  "",
                  "select parent.id,",
                  "             parent.[milestone_version.based_on],",
                  "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
                  "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW,",
                  "           parent.[milestone_version.milestone],parent.[title],",
                  "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
                  "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup, ipg_fam.ip_supplier as ipg_supplier, ipg_fam.Family as ipg_family",
                  "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
                  "right join [v_ipg_family_gladius] ipg_fam ON ipg_fam.devsuborg = carbon.DevSubOrg and ipg_fam.ip_supplier = carbon.DevGroup",
                  "where [milestone_version.based_on] is not null",
                  "and  parent.[id] is not null",
                  "and parent.[status] = 'active'",
                  "and parent.ww=DATEPART(ww,GETUTCDATE())",
                  "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          CONVERT (INT,REPLACE(( select [milestone_version.ww_trend_date] ",
              "            from [ES.milestone_version]  ",
              "           where [id] =  parent.[milestone_version.based_on] ),'ww','')) as based_on_trend_dateYYYWW, parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.trendYYYYWW,carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg",
              "from [ES.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.id = carbon.milestoneid",
              "where [milestone_version.based_on] is not null",
              "--and parent.[id]in ('14014488223','22010422161')",
              "*/",
              "/*",
              "-- old query replaced by Mak ww43 -- ",
              "select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW, ",
              "           parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup",
              "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
              "where [milestone_version.based_on] is not null",
              "and  parent.[id] is not null",
              "and parent.[status] = 'active'",
              "and parent.ww=DATEPART(ww,GETUTCDATE())",
              "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')",
              "",
              "*/",
              "",
              "select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW,",
              "           parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup, ipg_fam.ip_supplier as ipg_supplier, ipg_fam.Family as ipg_family",
              "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
              "right join [v_ipg_family_gladius] ipg_fam ON ipg_fam.devsuborg = carbon.DevSubOrg and ipg_fam.ip_supplier = carbon.DevGroup",
              "where [milestone_version.based_on] is not null",
              "and  parent.[id] is not null",
              "and parent.[status] = 'active'",
              "and parent.ww=DATEPART(ww,GETUTCDATE())",
              "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryMilestonedatediff"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          CONVERT (INT,REPLACE(( select [milestone_version.ww_trend_date] ",
              "            from [ES.milestone_version]  ",
              "           where [id] =  parent.[milestone_version.based_on] ),'ww','')) as based_on_trend_dateYYYWW, parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.trendYYYYWW,carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg",
              "from [ES.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.id = carbon.milestoneid",
              "where [milestone_version.based_on] is not null",
              "--and parent.[id]in ('14014488223','22010422161')",
              "*/",
              "/*",
              "-- old query replaced by Mak ww43 -- ",
              "select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW, ",
              "           parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup",
              "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
              "where [milestone_version.based_on] is not null",
              "and  parent.[id] is not null",
              "and parent.[status] = 'active'",
              "and parent.ww=DATEPART(ww,GETUTCDATE())",
              "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')",
              "",
              "*/",
              "",
              "select parent.id,",
              "             parent.[milestone_version.based_on],",
              "            parent.[milestone_version.ww_trend_date], CONVERT (INT,REPLACE(parent.[milestone_version.ww_trend_date],'ww','')) as [TrenddateYYYYWW],",
              "          carbon.TrendYYYYWW as based_on_trend_dateYYYYWW,",
              "           parent.[milestone_version.milestone],parent.[title],",
              "           parent.[tenant],parent.[status],parent.[milestone_version.name],parent.[family],parent.[family_affected],",
              "          carbon.drop, carbon.configuration,carbon.LeadProductId,carbon.Generation,carbon.PlanningStatus,carbon.PorYYYYWW,carbon.DevSubOrg,carbon.DevOrg,carbon.DevGroup, ipg_fam.ip_supplier as ipg_supplier, ipg_fam.Family as ipg_family",
              "from [DW.milestone_version]  as parent left join [V_IPG_CARBON_MILESTONE] as carbon ON  parent.[milestone_version.based_on] = carbon.milestoneid",
              "right join [v_ipg_family_gladius] ipg_fam ON ipg_fam.devsuborg = carbon.DevSubOrg and ipg_fam.ip_supplier = carbon.DevGroup",
              "where [milestone_version.based_on] is not null",
              "and  parent.[id] is not null",
              "and parent.[status] = 'active'",
              "and parent.ww=DATEPART(ww,GETUTCDATE())",
              "and carbon.DevSubOrg NOT IN ('CIG-MISC', 'IPG NR')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "MilestoneOrder",
        "columns": [
          {
            "name": "plc_milestone.name",
            "dataType": "string",
            "sourceColumn": "plc_milestone.name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "plc_milestone.milestone_order",
            "dataType": "int64",
            "sourceColumn": "plc_milestone.milestone_order",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "MilestoneOrder",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "[plc_milestone.name],",
                "[plc_milestone.milestone_order]",
                "FROM [ES.release_central.plc_milestone]",
                "where [plc_milestone.name] in",
                "('IP Concept (IC)',",
                "'IP Concept Refresh (ICR)',",
                "'IP Execution Commit (IE)',",
                "'IP Architecture Complete (IAC)',",
                "'EV1',",
                "'EV2',",
                "'UV',",
                "'UV1',",
                "'UVopt',",
                "'UV2',",
                "'eFV',",
                "'FV')"
              ],
              "dataSource": "IBI"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "[plc_milestone.name],",
                  "[plc_milestone.milestone_order]",
                  "FROM [ES.release_central.plc_milestone]",
                  "where [plc_milestone.name] in",
                  "('IP Concept (IC)',",
                  "'IP Concept Refresh (ICR)',",
                  "'IP Execution Commit (IE)',",
                  "'IP Architecture Complete (IAC)',",
                  "'EV1',",
                  "'EV2',",
                  "'UV',",
                  "'UV1',",
                  "'UVopt',",
                  "'UV2',",
                  "'eFV',",
                  "'FV')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "[plc_milestone.name],",
              "[plc_milestone.milestone_order]",
              "FROM [ES.release_central.plc_milestone]",
              "where [plc_milestone.name] in",
              "('IP Concept (IC)',",
              "'IP Concept Refresh (ICR)',",
              "'IP Execution Commit (IE)',",
              "'IP Architecture Complete (IAC)',",
              "'EV1',",
              "'EV2',",
              "'UV',",
              "'UV1',",
              "'UVopt',",
              "'UV2',",
              "'eFV',",
              "'FV')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "MilestoneOrder"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "[plc_milestone.name],",
              "[plc_milestone.milestone_order]",
              "FROM [ES.release_central.plc_milestone]",
              "where [plc_milestone.name] in",
              "('IP Concept (IC)',",
              "'IP Concept Refresh (ICR)',",
              "'IP Execution Commit (IE)',",
              "'IP Architecture Complete (IAC)',",
              "'EV1',",
              "'EV2',",
              "'UV',",
              "'UV1',",
              "'UVopt',",
              "'UV2',",
              "'eFV',",
              "'FV')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "f3d7976f-5130-4fa8-b578-28465f3ee3b3",
        "fromTable": "ip_soc_mapping",
        "fromColumn": "DieID",
        "toTable": "die_key",
        "toColumn": "DieID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "857ecc19-3f73-4318-9578-4034b4cc3863",
        "fromTable": "soc_data",
        "fromColumn": "DieID",
        "toTable": "die_key",
        "toColumn": "DieID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "fdfd6836-23f0-4376-8d85-140a5e38b8a3",
        "fromTable": "soc_dates",
        "fromColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
        "toTable": "die_silicon_platform_key",
        "toColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "1008743c-59a3-40c2-a929-db927278d6ea",
        "fromTable": "soc_data",
        "fromColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
        "toTable": "die_silicon_platform_key",
        "toColumn": "DieID, SiProductItemCd, SecondLvlPlatformConfigID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c406530c-1baa-45b9-a507-124dd7892077",
        "fromTable": "ip_milestone_data_with_dates",
        "fromColumn": "IpConfigurationId, ww",
        "toTable": "ip_ww_key",
        "toColumn": "IpConfigurationId, WW",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ebe7e418-e85d-48a5-9d61-9f9c751de69a",
        "fromTable": "ip_soc_dates",
        "fromColumn": "IpConfigurationId, SOCDateYYYYWW",
        "toTable": "ip_ww_key",
        "toColumn": "IpConfigurationId, WW",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "10dcc453-b8f2-46b8-beb0-5a19705a814e",
        "fromTable": "ip_data",
        "fromColumn": "IpFamilyId",
        "toTable": "release_central_family",
        "toColumn": "IpFamilyId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "a2448913-e0e7-4a42-9bcb-1d6dd81fa364",
        "fromTable": "ip_milestone_data_drop_changes",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "ip_milestone_data",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "f84a1fec-583b-40dc-865d-c8f22b2119f5",
        "fromTable": "ip_milestone_data",
        "fromColumn": "TrendYYYYWW",
        "toTable": "dates",
        "toColumn": "WW"
      },
      {
        "name": "a563f710-af88-4620-8a2d-704a40043798",
        "fromTable": "ip_soc_mapping_ALL",
        "fromColumn": "IpConfigurationId",
        "toTable": "ip_data_ALL",
        "toColumn": "IpConfigurationId"
      },
      {
        "name": "267cff8d-f3fd-4460-b86b-740eb33f198a",
        "fromTable": "ip_subip_milestone_mapping",
        "fromColumn": "ParentConfigurationId, ParentMilestoneId",
        "toTable": "ip_milestone_data",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "6acc766a-ff88-4c32-8ecc-54c17a7413c3",
        "fromTable": "ip_subip_milestone_mapping",
        "fromColumn": "ChildConfigurationId, ChildMilestoneId",
        "toTable": "subip_milestone_data",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "09525a14-503d-449b-b322-776e85caa9ed",
        "fromTable": "ip_milestone_data",
        "fromColumn": "MilestoneId",
        "toTable": "milestone_key",
        "toColumn": "MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "b7c30192-2bf5-43f0-931f-2c1f8743ab7f",
        "fromTable": "qarf_data",
        "fromColumn": "f_milestone_id",
        "toTable": "milestone_key",
        "toColumn": "MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "5a1aa853-c07b-4190-8cc4-b8261bbcfd05",
        "fromTable": "ipg_calendar",
        "fromColumn": "WW",
        "toTable": "dates",
        "toColumn": "WW",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "3ee4eafd-eadc-4e42-943f-0a440e94669a",
        "fromTable": "pearl_data",
        "fromColumn": "milestoneID",
        "toTable": "milestone_key",
        "toColumn": "MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ea00a5b2-56f9-4208-850a-4f2de5556083",
        "fromTable": "ip_soc_mapping_ALL",
        "fromColumn": "DieID",
        "toTable": "die_key",
        "toColumn": "DieID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "93b91d67-03d8-4cc6-9c7e-f8c3da4ef8fb",
        "fromTable": "parent_child_mapping",
        "fromColumn": "IpConfigurationId",
        "toTable": "ip_data",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ad880d2a-38a0-4b3d-93b7-aed7891a6d93",
        "fromTable": "ip_soc_mapping",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "ip_milestone_data",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "1088c730-9fa0-410b-90bb-7c762c6e186e",
        "fromTable": "ip_soc_mapping_ALL",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "ip_milestone_data_ALL",
        "toColumn": "IpConfigurationId, MilestoneId"
      },
      {
        "name": "2826447b-58a6-4b42-b93b-8c9bab76e3b5",
        "fromTable": "ip_soc_mapping",
        "fromColumn": "IpConfigurationId",
        "toTable": "ip_data",
        "toColumn": "IpConfigurationId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "a1093657-e42d-498a-a9bc-9862cdc26cf1",
        "fromTable": "ip_milestone_data_with_dates",
        "fromColumn": "MilestoneId",
        "toTable": "milestone_key",
        "toColumn": "MilestoneId"
      },
      {
        "name": "8f3ebcd9-4f53-4abf-92f3-42267e3ba4ac",
        "fromTable": "ip_milestone_data_with_dates",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "ip_milestone_key",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "750d24e6-0cb2-4e7a-b77a-0808fb2531fa",
        "fromTable": "feature_milestone_data",
        "fromColumn": "IpConfigurationId, MilestoneId",
        "toTable": "ip_milestone_key",
        "toColumn": "IpConfigurationId, MilestoneId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "b79f56d1-9ab8-42ed-8630-3d07fdcbb5b6",
        "fromTable": "product_to_milestoneid",
        "fromColumn": "Configuration, MilestoneId",
        "toTable": "ip_milestone_data",
        "toColumn": "Configuration,MilestoneId key",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "05fe7028-4833-4116-b665-fbbe679ec75f",
        "fromTable": "ip_soc_mapping",
        "fromColumn": "ipsmv_milestone_drop",
        "toTable": "MilestoneOrder",
        "toColumn": "plc_milestone.name"
      }
    ],
    "roles": [
      {
        "name": "IPG_Developers",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          }
        ]
      },
      {
        "name": "IPG_ExternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          }
        ]
      },
      {
        "name": "IPG_InternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          }
        ]
      },
      {
        "name": "BI user",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\SSAS_MSBITABMD",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2406644"
          }
        ]
      },
      {
        "name": "IPG_Transformation",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG Transformation Data Cube Read",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4820567"
          }
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "500"
      }
    ]
  }
}